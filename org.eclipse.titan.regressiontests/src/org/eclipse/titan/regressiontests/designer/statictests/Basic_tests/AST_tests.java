/******************************************************************************
 * Copyright (c) 2000-2021 Ericsson Telecom AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/org/documents/epl-2.0/EPL-2.0.html
 ******************************************************************************/
package org.eclipse.titan.regressiontests.designer.statictests.Basic_tests;

import java.util.ArrayList;

import org.eclipse.core.resources.IMarker;
import org.eclipse.titan.regressiontests.designer.Designer_plugin_tests;
import org.eclipse.titan.regressiontests.library.MarkerToCheck;
import org.junit.Test;

public class AST_tests {
	//ASNValues_asn
	//attribute_tests_ttcn
	//expression_tests_ttcn
	//specificValue_template_tests_ttcn
	//statement_tests_ttcn
	//subtype_tests_ttcn
	//template_assignment_tests_ttcn
	//template_formalparlist_tests_ttcn
	//template_specific_test_ttcn
	//value_assignment_tests_ttcn
	//value_tests_ttcn
	//value_tests2_ttcn
	//negativeTesting_ttcn
	//ttcnpp_marker_test_with_syntax_errors_ttcnpp
	//assignment_ttcn

	@Test
	public void ASNValues_asn() throws Exception {
		Designer_plugin_tests.checkSemanticMarkersOnFile(ASNValues_asn_initializer(), "src/Basic_tests/ASNValues.asn");
	}

	@Test
	public void attribute_tests_ttcn() throws Exception {
		Designer_plugin_tests.checkSemanticMarkersOnFile(attribute_tests_ttcn_initializer(), "src/Basic_tests/attribute_tests.ttcn");
	}

	@Test
	public void expression_tests_ttcn() throws Exception {
		Designer_plugin_tests.checkSemanticMarkersOnFile(expression_tests_ttcn_initializer(), "src/Basic_tests/expression_tests.ttcn");
	}

	@Test
	public void specificValue_template_tests_ttcn() throws Exception {
		Designer_plugin_tests.checkSemanticMarkersOnFile(specificValue_template_tests_ttcn_initializer(), "src/Basic_tests/specificValue_template_tests.ttcn");
	}

	@Test
	public void statement_tests_ttcn() throws Exception {
		Designer_plugin_tests.checkSemanticMarkersOnFile(statement_tests_ttcn_initializer(), "src/Basic_tests/statement_tests.ttcn");
	}

	@Test
	public void subtype_tests_ttcn() throws Exception {
		Designer_plugin_tests.checkSemanticMarkersOnFile(subtype_tests_ttcn_initializer(), "src/Basic_tests/subtype_tests.ttcn");
	}

	@Test
	public void template_assignment_tests_ttcn() throws Exception {
		Designer_plugin_tests.checkSemanticMarkersOnFile(template_assignment_tests_ttcn_initializer(), "src/Basic_tests/template_assignment_tests.ttcn");
	}

	@Test
	public void template_formalparlist_tests_ttcn() throws Exception {
		Designer_plugin_tests.checkSemanticMarkersOnFile(template_formalparlist_tests_ttcn_initializer(), "src/Basic_tests/template_formalparlist_tests.ttcn");
	}

	@Test
	public void template_specific_test_ttcn() throws Exception {
		Designer_plugin_tests.checkSemanticMarkersOnFile(template_specific_test_ttcn_initializer(), "src/Basic_tests/template_specific_test.ttcn");
	}

	@Test
	public void value_assignment_tests_ttcn() throws Exception {
		Designer_plugin_tests.checkSemanticMarkersOnFile(value_assignment_tests_ttcn_initializer(), "src/Basic_tests/value_assignment_tests.ttcn");
	}

	@Test
	public void value_tests_ttcn() throws Exception {
		Designer_plugin_tests.checkSemanticMarkersOnFile(value_tests_ttcn_initializer(), "src/Basic_tests/value_tests.ttcn");

	}

	@Test
	public void value_tests2_ttcn() throws Exception {
		Designer_plugin_tests.checkSemanticMarkersOnFile(value_tests2_ttcn_initializer(), "src/Basic_tests/value_tests2.ttcn");
	}

	@Test
	public void negativeTesting_ttcn() throws Exception {
		Designer_plugin_tests.checkSemanticMarkersOnFile(negativeTesting_ttcn_initializer(), "src/Basic_tests/negativeTesting.ttcn");
	}

	@Test
	public void ttcnpp_marker_test_with_syntax_errors_ttcnpp() throws Exception {
		Designer_plugin_tests.checkSyntaxMarkersOnFile(ttcnpp_marker_test_with_syntax_errors_ttcnpp_initializer(), "src/Basic_tests/preprocessor_test/ttcnpp_marker_test_with_syntax_errors.ttcnpp");
		Designer_plugin_tests.checkSemanticMarkersOnFile(ttcnpp_marker_test_with_syntax_errors_ttcnpp_initializer_semantic(), "src/Basic_tests/preprocessor_test/ttcnpp_marker_test_with_syntax_errors.ttcnpp");
	}

	@Test
	public void assignment_ttcn() throws Exception {
		Designer_plugin_tests.checkSemanticMarkersOnFile(assignment_ttcn_initializer(), "cfgFile/module_parameters/assignment/assignment.ttcn");
	}

	private ArrayList<MarkerToCheck> ASNValues_asn_initializer() {
		//ASNValues.asn
		ArrayList<MarkerToCheck> markersToCheck = new ArrayList<MarkerToCheck>(3);
		int lineNum = 66;
		markersToCheck.add(new MarkerToCheck("There is no assignment or imported symbol with name `myObjectIdentifierValue1' in module `ASNValues'",  lineNum, IMarker.SEVERITY_ERROR));

		return markersToCheck;
	}

	private ArrayList<MarkerToCheck> attribute_tests_ttcn_initializer() {
		//attribute_tests.ttcn
		ArrayList<MarkerToCheck> markersToCheck = new ArrayList<MarkerToCheck>(190);
		int lineNum = 54;
		markersToCheck.add(new MarkerToCheck("The function must have one parameter instead of 0 for attribute `prototype(convert)'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("The function must have one parameter instead of 2 for attribute `prototype(convert)'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("The parameter must be an `in' value parameter for attribute `prototype(convert)' instead of `out' value parameter",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("The parameter must be an `in' value parameter for attribute `prototype(convert)' instead of `inout' value parameter",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("The function must have a return type for attribute `prototype(convert)'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("The function must return a value instead of a template for attribute `prototype(convert)'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("The function cannot have `runs on' clause for attribute `prototype(convert)'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("The function must have two parameters for attribute `prototype(fast)' instead of 1",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("The function must have two parameters for attribute `prototype(fast)' instead of 3",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("The first parameter must be an `in' value parameter for attribute `prototype(fast)' instead of `out' value parameter",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("The first parameter must be an `in' value parameter for attribute `prototype(fast)' instead of `inout' value parameter",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("The second parameter must be an `out' value parameter for attribute `prototype(fast)' instead of value parameter",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("The second parameter must be an `out' value parameter for attribute `prototype(fast)' instead of value parameter",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("The second parameter must be an `out' value parameter for attribute `prototype(fast)' instead of `inout' value parameter",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("The function cannot have return type for attribute `prototype(fast)'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("The function cannot have `runs on' clause for attribute `prototype(fast)'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("The function must have two parameters for attribute `prototype(sliding)' instead of 1",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("The function must have two parameters for attribute `prototype(sliding)' instead of 3",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("The first parameter must be an `inout' value parameter for attribute `prototype(sliding)' instead of value parameter",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("The first parameter must be an `inout' value parameter for attribute `prototype(sliding)' instead of value parameter",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("The first parameter must be an `inout' value parameter for attribute `prototype(sliding)' instead of `out' value parameter",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("The type of the first parameter must be `octetstring' or `charstring' for attribute `prototype(sliding)'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("The function must have a return type for attribute `prototype(sliding)'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("The function must return a value instead of a template for attribute `prototype(sliding)'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("The return type of the function must be `integer' instead of `charstring' for attribute `prototype(sliding)'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("The function cannot have `runs on' clause for attribute `prototype(sliding)'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("The function must have two parameters for attribute `prototype(backtrack)' instead of 1",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("The function must have two parameters for attribute `prototype(backtrack)' instead of 3",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("The first parameter must be an `in' value parameter for attribute `prototype(backtrack)' instead of `out' value parameter",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("The first parameter must be an `in' value parameter for attribute `prototype(backtrack)' instead of `inout' value parameter",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("The function must have a return type for attribute `prototype(backtrack)'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("The function must return a value instead of a template for attribute `prototype(backtrack)'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("The return type of the function must be `integer' instead of `charstring' for attribute `prototype(backtrack)'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 6;
		markersToCheck.add(new MarkerToCheck("Duplicate definition with name `f_encode_good' was first declared here",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 7;
		markersToCheck.add(new MarkerToCheck("duplicate attribute `prototype'.",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("duplicate attribute `encode'.",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("Attribute `errorbehavior' can only be used together with `encode' or `decode'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Attribute `encode' cannot be used without `prototype'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Attribute `encode' cannot be used without `prototype(backtrack)'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The output type of BER encoding should be `bitstring' or `octetstring' instead of `charstring'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Attribute `encode' cannot be used without `prototype(sliding)'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The output type of BER encoding should be `bitstring' or `octetstring' instead of `charstring'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("duplicate attribute `decode'.",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("`decode' and `encode' attributes cannot be used at the same time.",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("Attribute `errorbehavior' can only be used together with `encode' or `decode'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Attribute `decode' cannot be used without `prototype'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 7;
		markersToCheck.add(new MarkerToCheck("Duplicate definition with name `f_encode_good' was declared here again",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 20;
		markersToCheck.add(new MarkerToCheck("Target type of BER encoding should be `octetstring' instead of `integer'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Source type of BER encoding should be `octetstring' instead of `integer'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("The input type of external function `@attribute_tests.f_encode_good' must be the same as the source type of the mapping: `integer' was expected instead of `charstring'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 6;
		markersToCheck.add(new MarkerToCheck("Attributes `address' and `internal' cannot be used at the same time",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Attributes `address' and `internal' cannot be used at the same time",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 10;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `address_port_nonExi' in module `attribute_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("The referenced port type `@attribute_tests.address_port_good' must have the `provider' attribute",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("Reference `f_encode_good' does not refer to a type",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to parameterized definition `f_encode_good' without actual parameter list",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("Missing attribute `internal'. Provider port type `@attribute_tests.internal_port_good' has attribute `internal', which must be also present here",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The referenced port type `@attribute_tests.internal_port_good' must have the `provider' attribute",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("Duplicate attribute `user'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("Attributes `provider' and `user' cannot be used at the same time",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("Attributes `user' and `provider' cannot be used at the same time",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("The source and target types must be the same: `integer' was expected instead of `charstring'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("Incoming message type `integer' of provider port type `@attribute_tests.provider_port_good' is not handled by the incoming mappings",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Source type `charstring' of the `in' mapping is not present on the list of incoming messages in provider port type `@attribute_tests.provider_port_good'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The source and target types must be the same: `charstring' was expected instead of `integer'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("Incoming message type `integer' of provider port type `@attribute_tests.provider_port_good' is not handled by the incoming mappings",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Source type `octetstring' of the `in' mapping is not present on the list of incoming messages in provider port type `@attribute_tests.provider_port_good'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Target type `octetstring' of the `in' mapping is not present on the list of incoming messages in user port type `@attribute_tests.user_port_bad10'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Missing `out' mapping to handle the outgoing message types of user port type `@attribute_tests.user_port_bad11'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Incoming message type `integer' of provider port type `@attribute_tests.provider_port_good' is not handled by the incoming mappings",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Source type `octetstring' of the `in' mapping is not present on the list of incoming messages in provider port type `@attribute_tests.provider_port_good'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Target type `octetstring' of the `in' mapping is not present on the list of incoming messages in user port type `@attribute_tests.user_port_bad11'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Missing `in' mappings to handle the incoming message types of provider port type `@attribute_tests.provider_port_good'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Invalid outgoing mappings. User port type `@attribute_tests.user_port_bad12' does not have outgoing message types",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Target type `octetstring' of the `out' mapping is not present on the list of outgoing messages in provider port type `@attribute_tests.provider_port_good'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Missing `in' mappings to handle the incoming message types of provider port type `@attribute_tests.provider_port_good'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Outgoing message type `charstring' of user port type `@attribute_tests.user_port_bad13' is not handled by the outgoing mappings",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Source type `octetstring' of the `out' mapping is not present on the list of outgoing messages in user port type `@attribute_tests.user_port_bad13'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Target type `charstring' of the `out' mapping is not present on the list of outgoing messages in provider port type `@attribute_tests.provider_port_good'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The source and target types must be the same: `octetstring' was expected instead of `charstring'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("Incoming message type `integer' of provider port type `@attribute_tests.provider_port_good' is not handled by the incoming mappings",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `charstring_nonExi' in module `attribute_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `f_nonExi' in module `attribute_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `octetstring_nonExi' in module `attribute_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("The referenced function `@attribute_tests.f_emptyfunction' does not have `prototype' attribute",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("Reference to a function or external function was expected instead of type `@attribute_tests.user_port_good'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("Incoming message type `integer' of provider port type `@attribute_tests.provider_port_good' is not handled by the incoming mappings",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Source type `hexstring' of the `in' mapping is not present on the list of incoming messages in provider port type `@attribute_tests.provider_port_good'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The input type of function `@attribute_tests.f_fast_good' must be the same as the source type of the mapping: `hexstring' was expected instead of `integer'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The output type of function `@attribute_tests.f_fast_good' must be the same as the target type of the mapping: `octetstring' was expected instead of `charstring'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 6;
		markersToCheck.add(new MarkerToCheck("The referenced function `@attribute_tests.f_fast_good2' must have the attribute `prototype(backtrack)' or `prototype(sliding)' when more than one targets are present",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Target type `charstring' of the `in' mapping is not present on the list of incoming messages in user port type `@attribute_tests.user_port_bad19'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The referenced function `@attribute_tests.f_fast_good' must have the attribute `prototype(backtrack)' or `prototype(sliding)' when more than one targets are present",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 12;
		markersToCheck.add(new MarkerToCheck("Definition `i2' inherited from component type `@attribute_tests.Attr_A' collides with definition inherited from `@attribute_tests.B'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Missing local definition of `i3', which was inherited from component type `@attribute_tests.Attr_A'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 14;
		markersToCheck.add(new MarkerToCheck("The member definition `v_private_int_B' in component type `C' is not visible in this scope",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("The member definition `priv_A' in component type `C' is not visible in this scope",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 45;
		markersToCheck.add(new MarkerToCheck("Local definition `c1' is a variable, but the definition inherited from component type `@attribute_tests.original' is a constant",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Local constant `c2' and the constant inherited from component type `@attribute_tests.original' have different values",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Local constant `c3' has type `charstring', but the constant inherited from component type `@attribute_tests.original' has type `integer'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Local definition `v1' is a constant, but the definition inherited from component type `@attribute_tests.original' is a variable",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Local variable `v2' has type `charstring', but the variable inherited from component type `@attribute_tests.original' has type `integer'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("Local definition `vt1' is a variable, but the definition inherited from component type `@attribute_tests.original' is a template variable",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Local template variable `vt2' has type `charstring', but the template variable inherited from component type `@attribute_tests.original' has type `integer'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("Local definition `t1' is a constant, but the definition inherited from component type `@attribute_tests.original' is a timer",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Local definition `t3' is a timer array, but the definition inherited from component type `@attribute_tests.original' is a single timer",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Local definition `t4' is a single timer, but the definition inherited from component type `@attribute_tests.original' is a timer array",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 7;
		markersToCheck.add(new MarkerToCheck("Local definition `p1' is a variable, but the definition inherited from component type `@attribute_tests.original' is a port",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Local port `p2' has type `@attribute_tests.extendedPort2', but the port inherited from component type `@attribute_tests.original' has type `@attribute_tests.extendedPort'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Local definition `p4' is a single port, but the definition inherited from component type `@attribute_tests.original' is a port array",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Local definition `p5' is a port array, but the definition inherited from component type `@attribute_tests.original' is a single port",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 26;
		markersToCheck.add(new MarkerToCheck("Reference to a non-existent field `attr2' in type `@attribute_tests.qualifierRecord'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a non-existent field `attr3' in type `@attribute_tests.qualifierRecord'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		int i = 0;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Type `@attribute_tests.qualifierRecord' can not be indexed", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 8;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `attr': type `@attribute_tests.qualifierRecordOf' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid field reference `elem_list': type `@attribute_tests.qualifierRecordOf' does not have fields.",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid field reference `attr2': type `@attribute_tests.qualifierRecordOf' does not have fields.",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 13;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `attr': type `@attribute_tests.qualifierSetOf' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid field reference `elem_list': type `@attribute_tests.qualifierSetOf' does not have fields.",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid field reference `attr2': type `@attribute_tests.qualifierSetOf' does not have fields.",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 10;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Field qualifiers are only allowed for record, set and union types", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 6;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Field qualifiers are only allowed for record, set and union types", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 92;
		markersToCheck.add(new MarkerToCheck("Invalid field name `nonexi' in RAW parameter TAG for type `@attribute_tests.RAW_PDU_146'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a non-existent field `nonexi' in type `@attribute_tests.intrec'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonexi' in module `attribute_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("octetstring value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 13;
		markersToCheck.add(new MarkerToCheck("Invalid field name `nonexi' in RAW parameter TAG for type `@attribute_tests.RAW_PDU_145'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a non-existent field `nonexi' in type `@attribute_tests.intrec'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonexi' in module `attribute_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("octetstring value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 13;
		markersToCheck.add(new MarkerToCheck("Invalid field name `nonexi' in RAW parameter TAG for type `@attribute_tests.RAW_PDU_145_2'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a non-existent field `nonexi' in type `@attribute_tests.intrec'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonexi' in module `attribute_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("octetstring value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 71;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Invalid fieldname in RAW parameter CROSSTAG for field union2: nonexi", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("bitstring value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid fieldname in RAW parameter CROSSTAG for field union2: nonexi1",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid fieldname in RAW parameter CROSSTAG for field union2: nonexi2",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("bitstring value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 28;
		markersToCheck.add(new MarkerToCheck("Reference to a non-existent field `nonexi' in type `@attribute_tests.RAW_PDU_167'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("bitstring value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 20;
		markersToCheck.add(new MarkerToCheck("Invalid fieldname in RAW parameter LENGTHTO for field length1: nonexi",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 23;
		markersToCheck.add(new MarkerToCheck("Invalid fieldname in RAW parameter POINTERTO for field ptr1: nonexi",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid field name `nonexi' in RAW parameter PTROFFSET for field `ptr2'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 13;
		markersToCheck.add(new MarkerToCheck("Pointer must precede the pointed field. Incorrect field name `field2' in RAW parameter POINTERTO for field `ptr2'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 8;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Duplicate version attribute", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Version template must be exactly <RnXnn>",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate version attribute",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Wrong format for product version information: The accepted formats resemble CRL 113 200/1 R9A or 7/CAX 105 7730 R2A or 7.2.1",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate version attribute",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Wrong format for version information: The accepted formats resemble R2D02 or R2D or 7.2.1",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate version attribute",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Wrong format for version information: The accepted formats resemble R2D02 or R2D or 7.2.1",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate version attribute",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The minor version number 2,147,483,648 is unexpectedly large, right now we can not handle such large numbers",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate version attribute",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The build version number 2,147,483,648 is unexpectedly large, right now we can not handle such large numbers",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 5; i++) {
			markersToCheck.add(new MarkerToCheck("Duplicate version attribute", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Wrong format for product version information: The accepted formats resemble CRL 113 200/1 R9A or 7/CAX 105 7730 R2A or 7.2.1",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate version attribute",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Wrong format for version information: The accepted formats resemble R2D02 or R2D or 7.2.1",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 6; i++) {
			markersToCheck.add(new MarkerToCheck("There is no module with name `nonExi'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Wrong format for product version information: The accepted formats resemble CRL 113 200/1 R9A or 7/CAX 105 7730 R2A or 7.2.1",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no module with name `nonExi'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Wrong format for version information: The accepted formats resemble R2D02 or R2D or 7.2.1",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("Wrong format for product version information: The accepted formats resemble CRL 113 200/1 R9A or 7/CAX 105 7730 R2A or 7.2.1",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Wrong format for version information: The accepted formats resemble R2D02 or R2D or 7.2.1", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The minor version number 2,147,483,648 is unexpectedly large, right now we can not handle such large numbers",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The build version number 2,147,483,648 is unexpectedly large, right now we can not handle such large numbers",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("Wrong format for product version information: The accepted formats resemble CRL 113 200/1 R9A or 7/CAX 105 7730 R2A or 7.2.1",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Wrong format for version information: The accepted formats resemble R2D02 or R2D or 7.2.1",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field qualifiers are only allowed for record, set and union types",  ++lineNum, IMarker.SEVERITY_ERROR));

		return markersToCheck;
	}

	private ArrayList<MarkerToCheck> expression_tests_ttcn_initializer() {
		//expression_tests.ttcn
		ArrayList<MarkerToCheck> markersToCheck = new ArrayList<MarkerToCheck>(1505);
		int lineNum = 122;
		int i = 0;
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `not' operation should be a boolean value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `not' operation should be a boolean value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 8;
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `unary +' operation should be an integer or float value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 6; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `unary +' operation should be an integer or float value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 15;
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `unary -' operation should be an integer or float value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 6; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `unary -' operation should be an integer or float value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 16;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("The operands of operation `*' should be of the same type", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The first operand of the `*' operation should be an integer or float value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `*' operation should be an integer or float value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `*' operation should be an integer or float value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `*' operation should be an integer or float value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `*' operation should be an integer or float value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `*' operation should be an integer or float value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `*' operation should be an integer or float value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `*' operation should be an integer or float value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `*' operation should be an integer or float value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `*' operation should be an integer or float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("The operands of operation `*' should be of the same type",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 5; i++) {
			markersToCheck.add(new MarkerToCheck("The second operand of the `*' operation should be an integer or float value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 20;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("The operands of operation `+' should be of the same type", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The first operand of the `+' operation should be an integer or float value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `+' operation should be an integer or float value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `+' operation should be an integer or float value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `+' operation should be an integer or float value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `+' operation should be an integer or float value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `+' operation should be an integer or float value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `+' operation should be an integer or float value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `+' operation should be an integer or float value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `+' operation should be an integer or float value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `+' operation should be an integer or float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("The operands of operation `+' should be of the same type",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 5; i++) {
			markersToCheck.add(new MarkerToCheck("The second operand of the `+' operation should be an integer or float value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 20;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("The operands of operation `-' should be of the same type", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The first operand of the `-' operation should be an integer or float value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `-' operation should be an integer or float value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `-' operation should be an integer or float value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `-' operation should be an integer or float value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `-' operation should be an integer or float value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `-' operation should be an integer or float value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `-' operation should be an integer or float value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `-' operation should be an integer or float value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `-' operation should be an integer or float value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `-' operation should be an integer or float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("The operands of operation `-' should be of the same type",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 5; i++) {
			markersToCheck.add(new MarkerToCheck("The second operand of the `-' operation should be an integer or float value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 20;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("The operands of operation `/' should be of the same type", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The first operand of the `/' operation should be an integer or float value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `/' operation should be an integer or float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("The second operand of operation `/' should not be zero", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The operands of operation `/' should be of the same type",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of operation `/' should not be zero",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("The operands of operation `/' should be of the same type",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `/' operation should be an integer or float value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `/' operation should be an integer or float value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `/' operation should be an integer or float value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `/' operation should be an integer or float value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `/' operation should be an integer or float value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `/' operation should be an integer or float value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `/' operation should be an integer or float value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `/' operation should be an integer or float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("The operands of operation `/' should be of the same type",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 5; i++) {
			markersToCheck.add(new MarkerToCheck("The second operand of the `/' operation should be an integer or float value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 18;
		markersToCheck.add(new MarkerToCheck("The first operand of the `mod' operation should be an integer value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `mod' operation should be an integer value",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("The second operand of operation `mod' should not be zero", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The first operand of the `mod' operation should be an integer value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `mod' operation should be an integer value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `mod' operation should be an integer value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `mod' operation should be an integer value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `mod' operation should be an integer value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `mod' operation should be an integer value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `mod' operation should be an integer value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `mod' operation should be an integer value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `mod' operation should be an integer value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `mod' operation should be an integer value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("The first operand of the `mod' operation should be an integer value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `mod' operation should be an integer value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `mod' operation should be an integer value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `mod' operation should be an integer value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `mod' operation should be an integer value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `mod' operation should be an integer value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `mod' operation should be an integer value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `mod' operation should be an integer value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 15;
		markersToCheck.add(new MarkerToCheck("The first operand of the `rem' operation should be an integer value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `rem' operation should be an integer value",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("The second operand of operation `rem' should not be zero", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The first operand of the `rem' operation should be an integer value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `rem' operation should be an integer value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `rem' operation should be an integer value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `rem' operation should be an integer value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `rem' operation should be an integer value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `rem' operation should be an integer value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `rem' operation should be an integer value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `rem' operation should be an integer value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `rem' operation should be an integer value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `rem' operation should be an integer value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("The first operand of the `rem' operation should be an integer value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `rem' operation should be an integer value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `rem' operation should be an integer value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `rem' operation should be an integer value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `rem' operation should be an integer value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `rem' operation should be an integer value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `rem' operation should be an integer value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `rem' operation should be an integer value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 16;
		markersToCheck.add(new MarkerToCheck("The first operand of the `and' operation should be a boolean value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `and' operation should be a boolean value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `and' operation should be a boolean value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `and' operation should be a boolean value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `and' operation should be a boolean value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `and' operation should be a boolean value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `and' operation should be a boolean value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `and' operation should be a boolean value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("The first operand of the `and' operation should be a boolean value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `and' operation should be a boolean value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `and' operation should be a boolean value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `and' operation should be a boolean value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `and' operation should be a boolean value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `and' operation should be a boolean value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `and' operation should be a boolean value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `and' operation should be a boolean value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 18;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("The first operand of the `or' operation should be a boolean value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += -1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("The second operand of the `or' operation should be a boolean value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The first operand of the `or' operation should be a boolean value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `or' operation should be a boolean value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `or' operation should be a boolean value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `or' operation should be a boolean value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("The first operand of the `or' operation should be a boolean value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `or' operation should be a boolean value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `or' operation should be a boolean value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `or' operation should be a boolean value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `or' operation should be a boolean value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `or' operation should be a boolean value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `or' operation should be a boolean value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `or' operation should be a boolean value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `cl_myrecof' in module `expression_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 16;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("The first operand of the `xor' operation should be a boolean value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += -1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("The second operand of the `xor' operation should be a boolean value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The first operand of the `xor' operation should be a boolean value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `xor' operation should be a boolean value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `xor' operation should be a boolean value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `xor' operation should be a boolean value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("The first operand of the `xor' operation should be a boolean value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `xor' operation should be a boolean value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `xor' operation should be a boolean value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `xor' operation should be a boolean value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `xor' operation should be a boolean value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `xor' operation should be a boolean value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `xor' operation should be a boolean value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `xor' operation should be a boolean value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 29;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `not4b' operation should be a binary string value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 5; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `not4b' operation should be a binary string value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 20;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("The second operand of the `and4b' operation should be a binary string value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The first operand of the `and4b' operation should be a binary string value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `and4b' operation should be a binary string value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `and4b' operation should be a binary string value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `and4b' operation should be a binary string value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 6; i++) {
			markersToCheck.add(new MarkerToCheck("The operands of operation `and4b' should be of the same type", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("The operands must have the same length", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The first operand of the `and4b' operation should be a binary string value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `and4b' operation should be a binary string value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("The first operand of the `and4b' operation should be a binary string value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `and4b' operation should be a binary string value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `and4b' operation should be a binary string value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `and4b' operation should be a binary string value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `and4b' operation should be a binary string value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `and4b' operation should be a binary string value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 21;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("The second operand of the `or4b' operation should be a binary string value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The first operand of the `or4b' operation should be a binary string value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `or4b' operation should be a binary string value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `or4b' operation should be a binary string value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `or4b' operation should be a binary string value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 6; i++) {
			markersToCheck.add(new MarkerToCheck("The operands of operation `or4b' should be of the same type", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("The operands must have the same length", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The first operand of the `or4b' operation should be a binary string value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `or4b' operation should be a binary string value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("The first operand of the `or4b' operation should be a binary string value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `or4b' operation should be a binary string value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `or4b' operation should be a binary string value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `or4b' operation should be a binary string value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `or4b' operation should be a binary string value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `or4b' operation should be a binary string value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 21;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("The second operand of the `xor4b' operation should be a binary string value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The first operand of the `xor4b' operation should be a binary string value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `xor4b' operation should be a binary string value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `xor4b' operation should be a binary string value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `xor4b' operation should be a binary string value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 6; i++) {
			markersToCheck.add(new MarkerToCheck("The operands of operation `xor4b' should be of the same type", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("The operands must have the same length", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The first operand of the `xor4b' operation should be a binary string value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `xor4b' operation should be a binary string value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("The first operand of the `xor4b' operation should be a binary string value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `xor4b' operation should be a binary string value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `xor4b' operation should be a binary string value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `xor4b' operation should be a binary string value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `xor4b' operation should be a binary string value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `xor4b' operation should be a binary string value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 33;
		markersToCheck.add(new MarkerToCheck("The first operand of the `<<' operation should be a binary string value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("bitstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The second operand of the `<<' operation should be an integer value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("The first operand of the `<<' operation should be a binary string value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The second operand of the `<<' operation should be an integer value",  --lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("The second operand of the `<<' operation should be an integer value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The first operand of the `<<' operation should be a binary string value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `<<' operation should be an integer value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `<<' operation should be a binary string value",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 33;
		markersToCheck.add(new MarkerToCheck("The first operand of the `>>' operation should be a binary string value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("bitstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The second operand of the `>>' operation should be an integer value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("The first operand of the `>>' operation should be a binary string value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The second operand of the `>>' operation should be an integer value",  --lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("The second operand of the `>>' operation should be an integer value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The first operand of the `>>' operation should be a binary string value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `>>' operation should be an integer value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `>>' operation should be a binary string value",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 57;
		markersToCheck.add(new MarkerToCheck("The first operand of the `<@' operation should be a string, `record of', `set of' or an array value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("bitstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The second operand of the `<@' operation should be an integer value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("bitstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The first operand of the `<@' operation should be a string, `record of', `set of' or an array value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `<@' operation should be an integer value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("The second operand of the `<@' operation should be an integer value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The first operand of the `<@' operation should be a string, `record of', `set of' or an array value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `<@' operation should be an integer value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `<@' operation should be a string, `record of', `set of' or an array value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Using a large integer value (9,999,999,999,999) as the second operand of the `<@' operation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 56;
		markersToCheck.add(new MarkerToCheck("The first operand of the `@>' operation should be a string, `record of', `set of' or an array  value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("bitstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The second operand of the `@>' operation should be an integer value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("bitstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The first operand of the `@>' operation should be a string, `record of', `set of' or an array  value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `@>' operation should be an integer value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("The second operand of the `@>' operation should be an integer value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The first operand of the `@>' operation should be a string, `record of', `set of' or an array  value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `@>' operation should be an integer value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `@>' operation should be a string, `record of', `set of' or an array  value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Using a large integer value (9,999,999,999,999) as the second operand of the `@>' operation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 31;
		markersToCheck.add(new MarkerToCheck("The first operand of operation `substr' should be a string, `record of', or a `set of' value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `bitstring' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `bitstring' and `@expression_tests.myrecof1' are not compatible",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `expression_tests'", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The second operand of operation `substr' should not be negative",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The third operand of operation `substr' should not be negative",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The sum of second operand (6) and third operand (1) of operation `substr' is greater than the length of the first operand (4)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of operation `substr' (6) is greater than the length of the first operand (4)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The third operand of operation `substr' (6) is greater than the length of the first operand (4)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The sum of second operand (2) and third operand (6) of operation `substr' is greater than the length of the first operand (4)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Using a large integer value (99,999,999,999,999,999,999,999) as the second operand of operation `substr' is not allowed",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Using a large integer value (99,999,999,999,999,999,999,999) as the third operand of operation `substr' is not allowed",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The sum of second operand (6) and third operand (1) of operation `substr' is greater than the length of the first operand (6)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The sum of second operand (2) and third operand (6) of operation `substr' is greater than the length of the first operand (6)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The sum of second operand (6) and third operand (1) of operation `substr' is greater than the length of the first operand (1)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The sum of second operand (2) and third operand (6) of operation `substr' is greater than the length of the first operand (1)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The sum of second operand (6) and third operand (1) of operation `substr' is greater than the length of the first operand (4)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `bitstring' and `@expression_tests.myrecof1' are not compatible",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The sum of second operand (2) and third operand (6) of operation `substr' is greater than the length of the first operand (4)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `bitstring' and `@expression_tests.myrecof1' are not compatible",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The sum of second operand (6) and third operand (1) of operation `substr' is greater than the length of the first operand (4)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `bitstring' and `@expression_tests.mysetof1' are not compatible",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The sum of second operand (2) and third operand (6) of operation `substr' is greater than the length of the first operand (4)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `bitstring' and `@expression_tests.mysetof1' are not compatible",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 38;
		markersToCheck.add(new MarkerToCheck("The second operand of the `&' operation should be a string, `record of', or a `set of' value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `&' operation should be a string, `record of', or a `set of' value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `&' operation should be a string, `record of', or a `set of' value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 17; i++) {
			markersToCheck.add(new MarkerToCheck("The operands of operation `&' should be of the same type", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The first operand of the `&' operation should be a string, `record of', or a `set of' value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `&' operation should be a string, `record of', or a `set of' value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the left operand of `&' operation",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the left operand of `&' operation",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The operands of operation `&' should be of the same type",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `&' operation should be a string, `record of', or a `set of' value",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("The first operand of the `&' operation should be a string, `record of', or a `set of' value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("The operands of `&' operation should be of compatible types", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 32;
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.c11.f1' of type `@expression_tests.c1' and `@expression_tests.recR.rof' of type `@expression_tests.recofR' are not compatible: The optionality of fields in record/SEQUENCE types must be the same",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.recofR[].rof' of type `@expression_tests.recofR' and `@expression_tests.c22.f1.f1' of type `@expression_tests.recofR' are not compatible: The optionality of fields in record/SEQUENCE types must be the same",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.A.f1' of type `integer' and `@expression_tests.B.f1' of type `@expression_tests.A' are not compatible: The optionality of fields in record/SEQUENCE types must be the same",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.B.f1' of type `@expression_tests.A' and `@expression_tests.A.f1' of type `integer' are not compatible: The optionality of fields in record/SEQUENCE types must be the same",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 113;
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myrec1' and `@expression_tests.myset1' are not compatible: set/SET and set of/SET OF types are compatible only with other set/SET and set of/SET OF types",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myset1' and `@expression_tests.myrec1' are not compatible: set/SET and set of/SET OF types are compatible only with other set/SET and set of/SET OF types",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myrec1' and `@expression_tests.myset1' are not compatible: set/SET and set of/SET OF types are compatible only with other set/SET and set of/SET OF types",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myset1' and `@expression_tests.myrec1' are not compatible: set/SET and set of/SET OF types are compatible only with other set/SET and set of/SET OF types",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myrec1' and `@expression_tests.mysetof1' are not compatible: set/SET and set of/SET OF types are compatible only with other set/SET and set of/SET OF types",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.mysetof1' and `@expression_tests.myrec1' are not compatible: set/SET and set of/SET OF types are compatible only with other set/SET and set of/SET OF types",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myrec1' and `@expression_tests.mysetof1' are not compatible: set/SET and set of/SET OF types are compatible only with other set/SET and set of/SET OF types",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.mysetof1' and `@expression_tests.myrec1' are not compatible: set/SET and set of/SET OF types are compatible only with other set/SET and set of/SET OF types",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myrecof1' and `@expression_tests.myset1' are not compatible: set/SET and set of/SET OF types are compatible only with other set/SET and set of/SET OF types",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myset1' and `@expression_tests.myrecof1' are not compatible: set/SET and set of/SET OF types are compatible only with other set/SET and set of/SET OF types",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myrecof1' and `@expression_tests.myset1' are not compatible: set/SET and set of/SET OF types are compatible only with other set/SET and set of/SET OF types",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myset1' and `@expression_tests.myrecof1' are not compatible: set/SET and set of/SET OF types are compatible only with other set/SET and set of/SET OF types",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myrecof1' and `@expression_tests.mysetof1' are not compatible: set/SET and set of/SET OF types are compatible only with other set/SET and set of/SET OF types",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.mysetof1' and `@expression_tests.myrecof1' are not compatible: set/SET and set of/SET OF types are compatible only with other set/SET and set of/SET OF types",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myrecof1' and `@expression_tests.mysetof1' are not compatible: set/SET and set of/SET OF types are compatible only with other set/SET and set of/SET OF types",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.mysetof1' and `@expression_tests.myrecof1' are not compatible: set/SET and set of/SET OF types are compatible only with other set/SET and set of/SET OF types",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myset1' and `integer[1]' are not compatible: set/SET and set of/SET OF types are compatible only with other set/SET and set of/SET OF types",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `integer[1]' and `@expression_tests.myset1' are not compatible: set/SET and set of/SET OF types are compatible only with other set/SET and set of/SET OF types",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myset1' and `integer[1]' are not compatible: set/SET and set of/SET OF types are compatible only with other set/SET and set of/SET OF types",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `integer[1]' and `@expression_tests.myset1' are not compatible: set/SET and set of/SET OF types are compatible only with other set/SET and set of/SET OF types",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.mysetof1' and `integer[1]' are not compatible: set/SET and set of/SET OF types are compatible only with other set/SET and set of/SET OF types",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `integer[1]' and `@expression_tests.mysetof1' are not compatible: set/SET and set of/SET OF types are compatible only with other set/SET and set of/SET OF types",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.mysetof1' and `integer[1]' are not compatible: set/SET and set of/SET OF types are compatible only with other set/SET and set of/SET OF types",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `integer[1]' and `@expression_tests.mysetof1' are not compatible: set/SET and set of/SET OF types are compatible only with other set/SET and set of/SET OF types",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myset1' and `@expression_tests.myuni1' are not compatible: union/CHOICE/anytype types are compatible only with other union/CHOICE/anytype types",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myuni1' and `@expression_tests.myset1' are not compatible: union/CHOICE types are compatible only with other union/CHOICE types",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myset1' and `@expression_tests.myuni1' are not compatible: union/CHOICE/anytype types are compatible only with other union/CHOICE/anytype types",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myuni1' and `@expression_tests.myset1' are not compatible: union/CHOICE types are compatible only with other union/CHOICE types",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.mysetof1' and `@expression_tests.myuni1' are not compatible: union/CHOICE/anytype types are compatible only with other union/CHOICE/anytype types",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myuni1' and `@expression_tests.mysetof1' are not compatible: union/CHOICE types are compatible only with other union/CHOICE types",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.mysetof1' and `@expression_tests.myuni1' are not compatible: union/CHOICE/anytype types are compatible only with other union/CHOICE/anytype types",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myuni1' and `@expression_tests.mysetof1' are not compatible: union/CHOICE types are compatible only with other union/CHOICE types",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.anytype' and `@expression_tests.myset1' are not compatible: Type anytype is compatible only with other anytype types",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myset1' and `@expression_tests.anytype' are not compatible: union/CHOICE/anytype types are compatible only with other union/CHOICE/anytype types",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.anytype' and `@expression_tests.myset1' are not compatible: Type anytype is compatible only with other anytype types",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myset1' and `@expression_tests.anytype' are not compatible: union/CHOICE/anytype types are compatible only with other union/CHOICE/anytype types",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.anytype' and `@expression_tests.mysetof1' are not compatible: Type anytype is compatible only with other anytype types",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.mysetof1' and `@expression_tests.anytype' are not compatible: union/CHOICE/anytype types are compatible only with other union/CHOICE/anytype types",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.anytype' and `@expression_tests.mysetof1' are not compatible: Type anytype is compatible only with other anytype types",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.mysetof1' and `@expression_tests.anytype' are not compatible: union/CHOICE/anytype types are compatible only with other union/CHOICE/anytype types",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myrec1.f1' of type `integer' and `@expression_tests.myrec3.f1' of type `integer' are not compatible: The optionality of fields in record/SEQUENCE types must be the same",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myrec3.f1' of type `integer' and `@expression_tests.myrec1.f1' of type `integer' are not compatible: The optionality of fields in record/SEQUENCE types must be the same",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myrec1.f1' of type `integer' and `@expression_tests.myrec3.f1' of type `integer' are not compatible: The optionality of fields in record/SEQUENCE types must be the same",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myrec3.f1' of type `integer' and `@expression_tests.myrec1.f1' of type `integer' are not compatible: The optionality of fields in record/SEQUENCE types must be the same",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myrec3' and `@expression_tests.myuni1' are not compatible: union/CHOICE/anytype types are compatible only with other union/CHOICE/anytype types",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myuni1' and `@expression_tests.myrec3' are not compatible: union/CHOICE types are compatible only with other union/CHOICE types",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myrec3' and `@expression_tests.myuni1' are not compatible: union/CHOICE/anytype types are compatible only with other union/CHOICE/anytype types",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myuni1' and `@expression_tests.myrec3' are not compatible: union/CHOICE types are compatible only with other union/CHOICE types",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.anytype' and `@expression_tests.myrec3' are not compatible: Type anytype is compatible only with other anytype types",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myrec3' and `@expression_tests.anytype' are not compatible: union/CHOICE/anytype types are compatible only with other union/CHOICE/anytype types",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.anytype' and `@expression_tests.myrec3' are not compatible: Type anytype is compatible only with other anytype types",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myrec3' and `@expression_tests.anytype' are not compatible: union/CHOICE/anytype types are compatible only with other union/CHOICE/anytype types",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myset1.f1' of type `integer' and `@expression_tests.myset3.f1' of type `integer' are not compatible: The optionality of fields in set/SET types must be the same",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myset3.f1' of type `integer' and `@expression_tests.myset1.f1' of type `integer' are not compatible: The optionality of fields in set/SET types must be the same",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myset1.f1' of type `integer' and `@expression_tests.myset3.f1' of type `integer' are not compatible: The optionality of fields in set/SET types must be the same",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myset3.f1' of type `integer' and `@expression_tests.myset1.f1' of type `integer' are not compatible: The optionality of fields in set/SET types must be the same",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myrec1' and `@expression_tests.myrec4' are not compatible: The number of fields in record/SEQUENCE types must be the same",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myrec4' and `@expression_tests.myrec1' are not compatible: The number of fields in record/SEQUENCE types must be the same",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myrec1' and `@expression_tests.myrec4' are not compatible: The number of fields in record/SEQUENCE types must be the same",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myrec4' and `@expression_tests.myrec1' are not compatible: The number of fields in record/SEQUENCE types must be the same",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myrec4' and `@expression_tests.myuni1' are not compatible: union/CHOICE/anytype types are compatible only with other union/CHOICE/anytype types",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myuni1' and `@expression_tests.myrec4' are not compatible: union/CHOICE types are compatible only with other union/CHOICE types",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myrec4' and `@expression_tests.myuni1' are not compatible: union/CHOICE/anytype types are compatible only with other union/CHOICE/anytype types",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myuni1' and `@expression_tests.myrec4' are not compatible: union/CHOICE types are compatible only with other union/CHOICE types",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.anytype' and `@expression_tests.myrec4' are not compatible: Type anytype is compatible only with other anytype types",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myrec4' and `@expression_tests.anytype' are not compatible: union/CHOICE/anytype types are compatible only with other union/CHOICE/anytype types",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.anytype' and `@expression_tests.myrec4' are not compatible: Type anytype is compatible only with other anytype types",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myrec4' and `@expression_tests.anytype' are not compatible: union/CHOICE/anytype types are compatible only with other union/CHOICE/anytype types",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myset1' and `@expression_tests.myset4' are not compatible: The number of fields in set/SET types must be the same",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myset4' and `@expression_tests.myset1' are not compatible: The number of fields in set/SET types must be the same",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myset1' and `@expression_tests.myset4' are not compatible: The number of fields in set/SET types must be the same",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `@expression_tests.myset4' and `@expression_tests.myset1' are not compatible: The number of fields in set/SET types must be the same",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Type mismatch: `integer[1]' and `integer[4]' are not compatible: Array types should have the same dimension",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `integer[4]' and `integer[1]' are not compatible: Array types should have the same dimension",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `integer[1]' and `integer[4]' are not compatible: Array types should have the same dimension",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `integer[4]' and `integer[1]' are not compatible: Array types should have the same dimension",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `integer[1]' and `integer[4]' are not compatible: Array types should have the same dimension",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `integer[4]' and `integer[1]' are not compatible: Array types should have the same dimension",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 15;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("The first and fourth operands of operation `replace' should be of the same type", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("The first and fourth operands of operation `replace' should be of the same type", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("The operands of `&' operation should be of compatible types", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 23;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Cannot determine the type of the operands", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Cannot determine the type of the operands", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 61;
		markersToCheck.add(new MarkerToCheck("Type mismatch: `float' and `boolean' are not compatible",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `boolean' and `float' are not compatible",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Only a referenced value can be compared with `omit'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `boolean' and `bitstring' are not compatible",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `boolean' and `hexstring' are not compatible",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `boolean' and `octetstring' are not compatible",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `boolean' and `charstring' are not compatible",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `boolean' and `universal charstring' are not compatible",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `boolean' and `float' are not compatible",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `verdicttype' and `float' are not compatible",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the operands",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `boolean' and `integer' are not compatible",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `bitstring' and `hexstring' are not compatible",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `octetstring' and `charstring' are not compatible",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `float' and `boolean' are not compatible",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `universal charstring' and `boolean' are not compatible",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 23;
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the operands",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `j' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the operands",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `j' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Cannot determine the type of the operands", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the operands",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i1' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i2' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the operands",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i1' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i2' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the operands",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i1' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i2' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("Type mismatch: `float' and `boolean' are not compatible",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `boolean' and `float' are not compatible",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Only a referenced value can be compared with `omit'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `boolean' and `bitstring' are not compatible",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `boolean' and `hexstring' are not compatible",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `boolean' and `octetstring' are not compatible",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `boolean' and `charstring' are not compatible",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `boolean' and `universal charstring' are not compatible",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `boolean' and `float' are not compatible",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `verdicttype' and `float' are not compatible",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the operands",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `boolean' and `integer' are not compatible",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `bitstring' and `hexstring' are not compatible",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `octetstring' and `charstring' are not compatible",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `float' and `boolean' are not compatible",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `universal charstring' and `boolean' are not compatible",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 16;
		markersToCheck.add(new MarkerToCheck("The first operand of the `<' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `<' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `<' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `<' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `<' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `<' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `<' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `<' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `<' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("The second operand of the `<' operation should be an integer, float or enumerated value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Type mismatch: `float' and `boolean' are not compatible",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `<' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `boolean' and `float' are not compatible",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Only a referenced value can be compared with `omit'",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("The first operand of the `<' operation should be an integer, float or enumerated value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The second operand of the `<' operation should be an integer, float or enumerated value",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `boolean' and `bitstring' are not compatible",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `<' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `<' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `boolean' and `hexstring' are not compatible",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `<' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `<' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `boolean' and `octetstring' are not compatible",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `<' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `<' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `boolean' and `charstring' are not compatible",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `<' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `<' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `boolean' and `universal charstring' are not compatible",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `<' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `boolean' and `float' are not compatible",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `<' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `<' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the operands",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx2' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the operands",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `<' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `<' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `<' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `<' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `bitstring' and `hexstring' are not compatible",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `<' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `<' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `octetstring' and `charstring' are not compatible",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 16;
		markersToCheck.add(new MarkerToCheck("The first operand of the `>' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `>' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `>' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `>' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `>' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `>' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `>' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `>' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `>' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("The second operand of the `>' operation should be an integer, float or enumerated value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Type mismatch: `float' and `boolean' are not compatible",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `>' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `boolean' and `float' are not compatible",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Only a referenced value can be compared with `omit'",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("The first operand of the `>' operation should be an integer, float or enumerated value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The second operand of the `>' operation should be an integer, float or enumerated value",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `boolean' and `bitstring' are not compatible",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `>' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `>' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `boolean' and `hexstring' are not compatible",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `>' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `>' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `boolean' and `octetstring' are not compatible",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `>' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `>' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `boolean' and `charstring' are not compatible",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `>' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `>' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `boolean' and `universal charstring' are not compatible",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `>' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `boolean' and `float' are not compatible",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `>' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `>' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the operands",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the operands",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `>' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `>' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `>' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `>' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `bitstring' and `hexstring' are not compatible",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `>' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `>' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `octetstring' and `charstring' are not compatible",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 16;
		markersToCheck.add(new MarkerToCheck("The first operand of the `<=' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `<=' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `<=' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `<=' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `<=' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `<=' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `<=' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `<=' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `<=' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("The second operand of the `<=' operation should be an integer, float or enumerated value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Type mismatch: `float' and `boolean' are not compatible",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `<=' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `boolean' and `float' are not compatible",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Only a referenced value can be compared with `omit'",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("The first operand of the `<=' operation should be an integer, float or enumerated value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The second operand of the `<=' operation should be an integer, float or enumerated value",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `boolean' and `bitstring' are not compatible",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `<=' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `<=' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `boolean' and `hexstring' are not compatible",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `<=' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `<=' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `boolean' and `octetstring' are not compatible",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `<=' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `<=' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `boolean' and `charstring' are not compatible",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `<=' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `<=' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `boolean' and `universal charstring' are not compatible",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `<=' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `boolean' and `float' are not compatible",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `<=' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `<=' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the operands",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx2' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the operands",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `<=' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `<=' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `<=' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `<=' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `bitstring' and `hexstring' are not compatible",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `<=' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `<=' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `octetstring' and `charstring' are not compatible",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 16;
		markersToCheck.add(new MarkerToCheck("The first operand of the `>=' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `>=' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `>=' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `>=' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `>=' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `>=' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `>=' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `>=' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `>=' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("The second operand of the `>=' operation should be an integer, float or enumerated value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Type mismatch: `float' and `boolean' are not compatible",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `>=' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `boolean' and `float' are not compatible",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Only a referenced value can be compared with `omit'",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("The first operand of the `>=' operation should be an integer, float or enumerated value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The second operand of the `>=' operation should be an integer, float or enumerated value",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `boolean' and `bitstring' are not compatible",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `>=' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `>=' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `boolean' and `hexstring' are not compatible",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `>=' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `>=' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `boolean' and `octetstring' are not compatible",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `>=' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `>=' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `boolean' and `charstring' are not compatible",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `>=' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `>=' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `boolean' and `universal charstring' are not compatible",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `>=' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `boolean' and `float' are not compatible",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `>=' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `>=' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the operands",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the operands",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `>=' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `>=' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `>=' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `>=' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `bitstring' and `hexstring' are not compatible",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `>=' operation should be an integer, float or enumerated value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `>=' operation should be an integer, float or enumerated value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `octetstring' and `charstring' are not compatible",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 14;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `bit2hex' operation should be a bitstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `bit2hex' operation should be a bitstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 13;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `bit2int' operation should be a bitstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `bit2int' operation should be a bitstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 14;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `bit2oct' operation should be a bitstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `bit2oct' operation should be a bitstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 13;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `bit2str' operation should be a bitstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `bit2str' operation should be a bitstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("The operand of the `char2int' operation should be of length 1",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 8;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `char2int' operation should be a charstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The operand of the `char2int' operation should be of length 1",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `char2int' operation should be a charstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `char2int' operation should be a charstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 14;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `char2oct' operation should be a charstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `char2oct' operation should be a charstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `char2oct' operation should be a charstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 13;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `float2int' operation should be a float value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `float2int' operation should be a float value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Infinity can not be used as operand of the `float2int' operation",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("-Infinity can not be used as operand of the `float2int' operation",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 14;
		for (i = 0; i < 6; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `float2str' operation should be a float value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 6; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `float2str' operation should be a float value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 14;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `hex2bit' operation should be a hexstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `hex2bit' operation should be a hexstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 13;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `hex2int' operation should be a hexstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 6; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `hex2int' operation should be a hexstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 14;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `hex2oct' operation should be a hexstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `hex2oct' operation should be a hexstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 13;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `hex2str' operation should be a hexstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `hex2str' operation should be a hexstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 13;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `int2char' operation should be an integer value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `int2char' operation should be an integer value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `int2char' operation should be in range 0..127", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 13;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `int2float' operation should be an integer value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `int2float' operation should be an integer value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 13;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `int2str' operation should be an integer value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `int2str' operation should be an integer value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 14;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `int2unichar' operation should be an integer value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `int2unichar' operation should be an integer value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The operand of the `int2unichar' operation should be in range 0..2147483647",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 14;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `oct2bit' operation should be an octetstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `oct2bit' operation should be an octetstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 14;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `oct2char' operation should be an octetstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `oct2char' operation should be an octetstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The operand of the `oct2char' operation shall consist of octets within the range 00.7F",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 14;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `oct2hex' operation should be an octetstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `oct2hex' operation should be an octetstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 14;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `oct2int' operation should be an octetstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `oct2int' operation should be an octetstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 13;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `oct2str' operation should be an octetstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `oct2str' operation should be an octetstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 15;
		for (i = 0; i < 6; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `str2bit' operation should be a charstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 6; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `str2bit' operation should be a charstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The operand of the `str2bit' operation can contain only binary digits",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 57;
		for (i = 0; i < 6; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `str2float' operation should be a charstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 6; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `str2float' operation should be a charstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The argument of function str2float(), which is akarmi, does not represent a valid float value. Invalid character a was found at index 0. ",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 19;
		for (i = 0; i < 6; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `str2hex' operation should be a charstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 6; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `str2hex' operation should be a charstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The operand of the `str2hex' operation can contain only valid hexadecimal digits",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 19;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `str2int' operation should be a charstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The operand of the `str2int' operation should be a string containing a valid integer value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `str2int' operation should be a charstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `str2int' operation should be a charstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The operand of the `str2int' operation should be a string containing a valid integer value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 19;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `str2oct' operation should be a charstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The operand of the `str2oct' operation should contain only valid hexadecimal digits",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `str2oct' operation should be a charstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `str2oct' operation should be a charstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The operand of the `str2oct' operation should contain an even number of characters",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The operand of the `str2oct' operation should contain only valid hexadecimal digits",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 14;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `unichar2str' operation should be a universal charstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The operand of the `unichar2str' operation should be of length 1",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `unichar2str' operation should be a universal charstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 6; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `unichar2str' operation should be a universal charstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `unichar2str' operation should be of length 1", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 13;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `unichar2char' operation should be a universal charstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `unichar2char' operation should be a universal charstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 6; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `unichar2char' operation should be a universal charstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `unichar2char' operation should consist of characters within the range char(0,0,0,0)..char(0,0,0,127)", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 17;
		for (i = 0; i < 5; i++) {
			markersToCheck.add(new MarkerToCheck("The first operand of the `int2bit' operation should be an integer value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("The first operand of the `int2bit' operation should be an integer value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Value 5 does not fit in length 1",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `int2bit' operation should not be negative",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `int2bit' operation should not be negative",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 14;
		for (i = 0; i < 5; i++) {
			markersToCheck.add(new MarkerToCheck("The first operand of the `int2hex' operation should be an integer value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("The first operand of the `int2hex' operation should be an integer value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Value 50 does not fit in length 1",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `int2hex' operation should not be negative",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `int2hex' operation should not be negative",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 14;
		for (i = 0; i < 5; i++) {
			markersToCheck.add(new MarkerToCheck("The first operand of the `int2oct' operation should be an integer value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("The first operand of the `int2oct' operation should be an integer value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Value 500 does not fit in length 1",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `int2oct' operation should not be negative",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `int2oct' operation should not be negative",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("Built-in function `decomp' is not yet supported",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Built-in function `decomp' is not yet supported", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 22;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Cannot determine the type of the operand in the `replace()' operation", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 12;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of operation `replace' should be a string, `record of', or a `set of' value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The fourth operand of operation `replace' should be a string, `record of', or a `set of' value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `bitstring' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `bitstring' and `@expression_tests.myrecof1' are not compatible",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of operation `replace' should not be negative",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The third operand of operation `replace' should not be negative",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The sum of the second operand (6) and the third operand (1) of operation `replace' is greater than the length of the first operand (4)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of operation `replace' (6) is greater than the length of the first operand (4)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The third operand of operation `replace' (6) is greater than the length of the first operand (4)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The sum of the second operand (2) and the third operand (6) of operation `replace' is greater than the length of the first operand (4)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Using a large integer value (99,999,999,999,999,999,999,999) as the second operand of operation `replace' is not allowed",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Using a large integer value (99,999,999,999,999,999,999,999) as the third operand of operation `replace' is not allowed",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The sum of the second operand (6) and the third operand (1) of operation `replace' is greater than the length of the first operand (6)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The sum of the second operand (2) and the third operand (6) of operation `replace' is greater than the length of the first operand (6)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The sum of the second operand (6) and the third operand (1) of operation `replace' is greater than the length of the first operand (1)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The sum of the second operand (2) and the third operand (6) of operation `replace' is greater than the length of the first operand (1)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The sum of the second operand (6) and the third operand (1) of operation `replace' is greater than the length of the first operand (4)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `bitstring' and `@expression_tests.myrecof1' are not compatible",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The sum of the second operand (2) and the third operand (6) of operation `replace' is greater than the length of the first operand (4)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `bitstring' and `@expression_tests.myrecof1' are not compatible",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The sum of the second operand (6) and the third operand (1) of operation `replace' is greater than the length of the first operand (4)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `bitstring' and `@expression_tests.mysetof1' are not compatible",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The sum of the second operand (2) and the third operand (6) of operation `replace' is greater than the length of the first operand (4)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: `bitstring' and `@expression_tests.mysetof1' are not compatible",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 11;
		for (i = 0; i < 9; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `rnd' operation should be a float value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `rnd' operation should be a float value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Infinity can not be used as operand of the `rnd' operation",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("-Infinity can not be used as operand of the `rnd' operation",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 8;
		markersToCheck.add(new MarkerToCheck("Field `f1' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("Reference to a non-existent field `f3' in type `@expression_tests.recordOuter'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a non-existent field `f4' in type `@expression_tests.recordInner'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Field `f1' is missing from template for record type `@expression_tests.recordOuter'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Unexpected field `f2' in record template, expecting `f1'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("Reference to a non-existent field `f3' in type `@expression_tests.recordOuter'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a non-existent field `f4' in type `@expression_tests.recordInner'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 6;
		markersToCheck.add(new MarkerToCheck("It's not allowed to create hole(s) in constant values",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 34;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of operation `lengthof' should be a string, a `record of', a `set of' or an `array' value",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 23;
		markersToCheck.add(new MarkerToCheck("Reference to a value was expected instead of type `@expression_tests.myrec3'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a non-existent field `nonExi' in type `@expression_tests.myrec5'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid field reference `f1': type `integer' does not have fields.",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 22;
		markersToCheck.add(new MarkerToCheck("Reference to a constant value was expected instead of template `t_i'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a constant value was expected instead of template `t_i2'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a value or template was expected instead of type `@expression_tests.myrec3'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type `@expression_tests.myuni' does not have a field named `nonExi'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The operand of operation `ischosen()' should be a record or set value or template, instead of `integer'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 11;
		markersToCheck.add(new MarkerToCheck("Reference to a value or template of type record, record of, set, set of, objid or array was expected",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 56;
		markersToCheck.add(new MarkerToCheck("`sizeof' operation is not applicable for templates containing `*' without length restriction",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("`sizeof' operation is not applicable for templates without exact size",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("`sizeof' operation is not applicable for templates containing `*' without upper boundary in the length restriction",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An array value (with 1 elements) was expected as default duration of timer array",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 6; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to a value or template of type record, record of, set, set of, objid or array was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 5; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to a value or template of type record, record of, set, set of, objid or array was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Reference to a value was expected instead of type `@expression_tests.componentName_CT'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a value or template was expected instead of type `@expression_tests.componentName_CT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a value or template of type record, record of, set, set of, objid or array was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("operation is not applicable to single timer `TL_i'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Operation is not applicable to a timer",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("Reference to a value or template of type record, record of, set, set of, objid or array was expected",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("`sizeof' operation is not applicable to any or omit",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 21;
		markersToCheck.add(new MarkerToCheck("Cannot determine the argument type of `regexp' operation",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 6; i++) {
			markersToCheck.add(new MarkerToCheck("The first operand of the `regexp' operation should be a (universal) charstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The third operand of the `regexp' operation should be an integer value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of the `regexp' operation should be a (universal) charstring value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx1' in module `expression_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Cannot determine the argument type of `regexp' operation",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 6; i++) {
			markersToCheck.add(new MarkerToCheck("The first operand of the `regexp' operation should be a (universal) charstring value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("The third operand of the `regexp' operation should be an integer value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 13;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `expression_tests'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `expression_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 11;
		markersToCheck.add(new MarkerToCheck("Incompatible component types: a component reference of type `@expression_tests.componentName_CT2' was expected, but `mtc' has type `@expression_tests.componentName_CT'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 11;
		markersToCheck.add(new MarkerToCheck("Incompatible component types: a component reference of type `@expression_tests.componentName_CT2' was expected, but `system' has type `@expression_tests.componentName_CT'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 11;
		markersToCheck.add(new MarkerToCheck("Incompatible component types: a component reference of type `@expression_tests.componentName_CT2' was expected, but `self' has type `@expression_tests.componentName_CT'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 11;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of operation `component running': Type mismatch: component reference was expected instead of `integer'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of operation `component running' refers to the component reference of the `mtc'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of operation `component running' refers to the component reference of the `system'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of operation `component running' refers to the `null' component reference",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 11;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of operation `alive': Type mismatch: component reference was expected instead of `integer'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of operation `alive' refers to the component reference of the `mtc'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of operation `alive' refers to the component reference of the `system'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of operation `alive' refers to the `null' component reference",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 6;
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `any component.running'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 6;
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `all component.running'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 6;
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `any component.alive'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 6;
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `all component.alive'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 6;
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `any timer.running'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 19;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `create()'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The first operand of operation `create()' should be a charstring value",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of operation `create()' should be a charstring value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `expression_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Operation `create' should refer to a component type instead of constant `@expression_tests.cg_boolean'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Referencing fields of a component is not allowed",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: reference to a component type was expected in operation `create' instead of `@expression_tests.myrecof1'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible component type: operation `create' should refer to `@expression_tests.componentName_CT2' instaed of `@expression_tests.componentName_CT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("Parameter 1 of altstep `@expression_tests.as_altstepName' refers to variable `vl_parameter', which is a local definition within a statement block and may have shorter lifespan than the activated default. Only references to variables and timers defined in the component type can be passed to activated defaults",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to an altstep was expected in the argument instead of variable `vl_parameter'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The referenced variable `vl_parameter' cannot have actual parameters",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too few parameters: 1 was expected instead of 0",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to a variable or value parameter was expected for an `inout' value parameter", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Too many parameters: 1 was expected instead of 2",  --lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("A definition without `runs on' clause cannot activate altstep `@expression_tests.as_altstepName', which runs on component type `@expression_tests.componentName_CT2'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Parameter 1 of altstep `@expression_tests.as_altstepName' refers to variable `vl_parameter', which is a local definition within a statement block and may have shorter lifespan than the activated default. Only references to variables and timers defined in the component type can be passed to activated defaults",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("A definition without `runs on' clause cannot activate altstep `@expression_tests.as_altstepName', which runs on component type `@expression_tests.componentName_CT2'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a variable or value parameter was expected for an `inout' value parameter",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 6;
		markersToCheck.add(new MarkerToCheck("Parameter 1 of activate(derefers(vl__altstep1)(...)) refers to variable `vl_parameter', which is a local definition within a statement block and may have shorter lifespan than the activated default. Only references to variables and timers defined in the component type can be passed to activated defaults",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A value of type altstep was expected in the argument of `derefers()' instead of `integer'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too few parameters: 1 was expected instead of 0",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to a variable or value parameter was expected for an `inout' value parameter", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Too many parameters: 1 was expected instead of 2",  --lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 6;
		markersToCheck.add(new MarkerToCheck("The second operand of the `execute' operation should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The testcase guard timer has negative value: `-5.0'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a testcase was expected in the argument instead of function `@expression_tests.f_functionName'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too many parameters: 0 was expected instead of 1",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Infinity can not be used as the testcase quard timer duration",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The testcase guard timer has negative value: `-Infinity'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 8;
		markersToCheck.add(new MarkerToCheck("The guard timer operand of the `execute' operation should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The testcase guard timer has negative value: `-5.0'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a value of type testcase was expected in the argument of `derefers()' instead of `@expression_tests.t_function'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too many parameters: 0 was expected instead of 1",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Infinity can not be used as the testcase quard timer duration",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The testcase guard timer has negative value: `-Infinity'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("Too few elements in the default duration of timer array: 3 was expected instead of 2",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `timer running'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `tem' in module `expression_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `timer running'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The operand of operation `timer running': Reference to a single timer `TL_temp' cannot have field or array sub-references",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `timer running'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a timer array without array index",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `timer running'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too many indices in a reference to a timer array: the reference has 1 array indices, but the array has only 2 dimension",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `timer running'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Array index underflow: the index value must be at least 1 instead of 0",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `timer running'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Array index oveflow: the index value must be at most 3 instead of 5",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `timer running'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The operand of operation `timer running': Reference to a single timer `pl_par_temp' cannot have field or array sub-references",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `timer running'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The operand of operation `timer running': Reference to a single timer `pl_par_temp' cannot have field or array sub-references",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("Too few elements in the default duration of timer array: 3 was expected instead of 2",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `timer read'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A non-negative float value was expected as timer duration instead of -5",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `expression_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `timer read'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The operand of operation `timer read': Reference to a single timer `TL_temp' cannot have field or array sub-references",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `timer read'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a timer array without array index",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `timer read'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too many indices in a reference to a timer array: the reference has 1 array indices, but the array has only 2 dimension",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `timer read'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Array index underflow: the index value must be at least 1 instead of 0",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `timer read'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Array index oveflow: the index value must be at most 3 instead of 5",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `timer read'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The operand of operation `timer read': Reference to a single timer `pl_par_temp' cannot have field or array sub-references",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 9;
		markersToCheck.add(new MarkerToCheck("Reference to `constant' cannot be used as the first operand of the `decvalue' operation",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `decvalue_i2' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to `template' cannot be used as the first operand of the `decvalue' operation",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `decvalue_ti2' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 23;
		markersToCheck.add(new MarkerToCheck("Reference to `constant' cannot be used as the first operand of the `decvalue' operation",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("Reference to `constant' cannot be used as the first operand of the `decvalue' operation",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("Reference to `constant' cannot be used as the first operand of the `decvalue' operation",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Reference to `template' cannot be used as the first operand of the `decvalue' operation",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Cannot determine the argument type of `encvalue' operation",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("No coding rule specified for type `verdicttype'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The operand of the `encvalue' operation cannot be encoded",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to `function' cannot be used as the first operand of the `decvalue operation",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to parameterized definition `f_encvalueTests' without actual parameter list",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to `constant' cannot be used as the first operand of the `decvalue' operation",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to `template' cannot be used as the first operand of the `decvalue' operation",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("No coding rule specified for type `@expression_tests.t_function'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to `template' cannot be used as the first operand of the `decvalue' operation",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `decvalue' operation is unable to hold a decoded value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `encdecres1' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `vl_i' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("No coding rule specified for type `@expression_tests.componentName_CT'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The second operand of the `decvalue' operation is unable to hold a decoded value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t_encdecvar3' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("A static value was expected instead of operation `rnd()'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A static value was expected instead of operation `getverdict'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `verdittype' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 10;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `functionVar2' in module `expression_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `expression_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a value was expected instead of type `@expression_tests.t_function'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `variable' in module `expression_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A definition without `runs on' clause cannot call a value of function type `@expression_tests.t_function3', which runs on component type `@expression_tests.componentName_CT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable value was expected instead of operation `apply()''",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 8;
		markersToCheck.add(new MarkerToCheck("Runs on clause mismatch: A definition that runs on component type `@expression_tests.componentName_CT2' cannot call a value of function type `@expression_tests.t_function3', which runs on `@expression_tests.componentName_CT'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 134;
		markersToCheck.add(new MarkerToCheck("Operation `getverdict' is not allowed in the control part",  lineNum, IMarker.SEVERITY_ERROR));

		return markersToCheck;
	}
	
	private ArrayList<MarkerToCheck> negativeTesting_ttcn_initializer() {
		//negativeTesting.ttcn
		ArrayList<MarkerToCheck> markersToCheck = new ArrayList<MarkerToCheck>(73);
		int lineNum = 27;
		markersToCheck.add(new MarkerToCheck("Field `b' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `r' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("At least one qualifier must be specified for the `erroneous' attribute",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a non-existent field `x' in type `@negativeTesting.MYREC'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("Field `b' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `r' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Keyword `all' is expected after `omit' when omitting all fields after the specified field",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `b' is missing from record value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `r' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Keyword `all' is expected after `omit' when omitting all fields before the specified field",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `b' is missing from record value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `r' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Unexpected `all' keyword after `omit' when omitting one field",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `b' is missing from record value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `r' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Unexpected `all' keyword after the in-line template",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the in-line template",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `b' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `r' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the in-line template",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `b' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `r' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonexi' in module `negativeTesting'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An in-line template of type `integer' cannot be used as a `raw' erroneous value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `b' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `r' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `b' is missing from record value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `r' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("record of value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A specific value without matching symbols was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `b' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `r' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Field `b' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `r' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("Field `r' cannot be referenced because all fields after field `b' have been omitted",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Field `b' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `r' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Field `b' cannot be referenced because all fields before field `r' have been omitted",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Indicator `after' cannot be used with reference `b' which points to a field of a union type",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Field `b' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `r' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is nothing to omit after the last field (r) of a record/set type",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is nothing to omit before the first field (i)",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Field `b' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `r' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate reference to field `b' with indicator `value'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate reference to field `b' with indicator `after'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate reference to field `b' with indicator `before'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Field `b' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `r' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Reference to field `r' with indicator `value' would invalidate previously specified erroneous data",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Field `b' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `r' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Duplicate rule for omitting all fields before the specified field. Used on field `r' but previously already used on field `b'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Field `b' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `r' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Omitting fields before field `r' would invalidate previously specified erroneous data",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Field `b' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `r' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Duplicate rule for omitting all fields after the specified field. Used on field `i' but previously already used on field `b'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Field `b' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `r' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Omitting fields after field `b' would invalidate previously specified erroneous data",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Field `b' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `r' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Field `r.i' is embedded into a field which was previously overwritten or omitted",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Field `b' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `r' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `b' is missing from record value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `r' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		int i = 0;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("The `erroneous' attribute can be used only on template and constant definitions", lineNum++, IMarker.SEVERITY_ERROR));
		}

		return markersToCheck;
	}

	private ArrayList<MarkerToCheck> specificValue_template_tests_ttcn_initializer() {
		//specificValue_template_tests.ttcn
		ArrayList<MarkerToCheck> markersToCheck = new ArrayList<MarkerToCheck>(4634);
		int lineNum = 19;
		markersToCheck.add(new MarkerToCheck("Value 1 is already assigned to `item1'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate enumeration identifier `item2' was first declared here",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate numeric value 1 for enumeration `item2'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate enumeration identifier `item2' was declared here again",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 46;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `guard2' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `timerName' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 18;
		markersToCheck.add(new MarkerToCheck("The function has a return type, but it does not have any return statement",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 6;
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 20;
		markersToCheck.add(new MarkerToCheck("integer value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `integer'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		int i = 0;
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("integer value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `integer'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("integer value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t_i' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 69; i++) {
			markersToCheck.add(new MarkerToCheck("integer value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `integer' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("integer value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `integer' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("integer value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 16;
		markersToCheck.add(new MarkerToCheck("float value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `float'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("float value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `float'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("float value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t_i' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 6; i++) {
			markersToCheck.add(new MarkerToCheck("float value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `float'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 74; i++) {
			markersToCheck.add(new MarkerToCheck("float value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `float' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("float value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 26;
		markersToCheck.add(new MarkerToCheck("boolean value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `boolean'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("boolean value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `boolean'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("boolean value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t_i' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("boolean value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `boolean'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 64; i++) {
			markersToCheck.add(new MarkerToCheck("boolean value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `boolean' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("boolean value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 6; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `boolean' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("boolean value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 18;
		markersToCheck.add(new MarkerToCheck("bitstring value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `bitstring'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("bitstring value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `bitstring'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("bitstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t_i' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 6; i++) {
			markersToCheck.add(new MarkerToCheck("bitstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `bitstring'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 60; i++) {
			markersToCheck.add(new MarkerToCheck("bitstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `bitstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("bitstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `bitstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("bitstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 19;
		markersToCheck.add(new MarkerToCheck("hexstring value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `hexstring'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("hexstring value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `hexstring'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("hexstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t_i' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 6; i++) {
			markersToCheck.add(new MarkerToCheck("hexstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `hexstring'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 59; i++) {
			markersToCheck.add(new MarkerToCheck("hexstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `hexstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("hexstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `hexstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("hexstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 20;
		markersToCheck.add(new MarkerToCheck("octetstring value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `octetstring'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("octetstring value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `octetstring'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("octetstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t_i' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 6; i++) {
			markersToCheck.add(new MarkerToCheck("octetstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `octetstring'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 58; i++) {
			markersToCheck.add(new MarkerToCheck("octetstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `octetstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("octetstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `octetstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("octetstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 9;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Verdict value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `verdict'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 9; i++) {
			markersToCheck.add(new MarkerToCheck("Verdict value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `verdict'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Verdict value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t_i' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 6; i++) {
			markersToCheck.add(new MarkerToCheck("Verdict value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `verdict'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 63; i++) {
			markersToCheck.add(new MarkerToCheck("Verdict value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `verdicttype' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Verdict value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `verdicttype' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Verdict value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 10;
		markersToCheck.add(new MarkerToCheck("Enumerated value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for enumerated type",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 9; i++) {
			markersToCheck.add(new MarkerToCheck("Enumerated value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for enumerated type",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Enumerated value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t_i' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 6; i++) {
			markersToCheck.add(new MarkerToCheck("Enumerated value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for enumerated type",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 63; i++) {
			markersToCheck.add(new MarkerToCheck("Enumerated value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@specific_template_tests.myenum1' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Enumerated value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@specific_template_tests.myenum1' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Enumerated value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `default'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("Default value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `default'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Default value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t_i' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 6; i++) {
			markersToCheck.add(new MarkerToCheck("Default value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `default'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 63; i++) {
			markersToCheck.add(new MarkerToCheck("Default value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `default' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Default value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `default' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Default value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 17;
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `charstring'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `charstring'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t_i' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `charstring'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 53; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `charstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `charstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 17;
		markersToCheck.add(new MarkerToCheck("Universal character string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `universal charstring'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("Universal character string value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `universal charstring'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Universal character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t_i' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Universal character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `universal charstring'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 50; i++) {
			markersToCheck.add(new MarkerToCheck("Universal character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Universal character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `universal charstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Universal character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `universal charstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Universal character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 10;
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `@specific_template_tests.mycomponent'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("Component value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `@specific_template_tests.mycomponent'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Component value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t_i' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 6; i++) {
			markersToCheck.add(new MarkerToCheck("Component value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `@specific_template_tests.mycomponent'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 63; i++) {
			markersToCheck.add(new MarkerToCheck("Component value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@specific_template_tests.mycomponent' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Component value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 10; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@specific_template_tests.mycomponent' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Component value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 7;
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("integer value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 9; i++) {
			markersToCheck.add(new MarkerToCheck("record of value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for recordof type `@specific_template_tests.myrecordofType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("record of value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("record of value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t_i' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 69; i++) {
			markersToCheck.add(new MarkerToCheck("record of value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@specific_template_tests.myrecordofType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("record of value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@specific_template_tests.myrecordofType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("record of value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("A non-negative integer value was expected for indexing type `@specific_template_tests.myrecordofType' instead of `-1'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An integer value less than `2,147,483,647' was expected for indexing type `@specific_template_tests.myrecordofType' instead of `99,999,999,999,999,999'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate index value `1' for component `4' and `2'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 12;
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("integer value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 9; i++) {
			markersToCheck.add(new MarkerToCheck("set of value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for setof type `@specific_template_tests.mysetofType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("set of value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("set of value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t_i' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 69; i++) {
			markersToCheck.add(new MarkerToCheck("set of value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@specific_template_tests.mysetofType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("set of value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@specific_template_tests.mysetofType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("set of value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("A non-negative integer value was expected for indexing type `@specific_template_tests.mysetofType' instead of `-1'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An integer value less than `2,147,483,647' was expected for indexing type `@specific_template_tests.mysetofType' instead of `99,999,999,999,999,999'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate index value `1' for component `4' and `2'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Field `field1' is missing from template for set type `@specific_template_tests.ASNSetType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from template for set type `@specific_template_tests.ASNSetType'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to non-existing field `field3' in set template for type `@specific_template_tests.ASNSetType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate field `field1' in template",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field1' is already given here",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from template for set type `@specific_template_tests.ASNSetType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("integer value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Value list notation is not allowed for set type `@specific_template_tests.ASNSetType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 9; i++) {
			markersToCheck.add(new MarkerToCheck("set value was expected for type `@specific_template_tests.ASNSetType'", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("integer value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("set value was expected for type `@specific_template_tests.ASNSetType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("set value was expected for type `@specific_template_tests.ASNSetType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t_i' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 69; i++) {
			markersToCheck.add(new MarkerToCheck("set value was expected for type `@specific_template_tests.ASNSetType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@specific_template_tests.ASNSetType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("set value was expected for type `@specific_template_tests.ASNSetType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@specific_template_tests.ASNSetType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("set value was expected for type `@specific_template_tests.ASNSetType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("Field `field1' is missing from template for record type `@specific_template_tests.ASNSequenceType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from template for record type `@specific_template_tests.ASNSequenceType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field3' is missing from template for record type `@specific_template_tests.ASNSequenceType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too many elements in value list notation for type `@specific_template_tests.ASNSequenceType': 3 was expected instead of 5",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 9; i++) {
			markersToCheck.add(new MarkerToCheck("sequence value was expected for type `@specific_template_tests.ASNSequenceType'", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field1' is missing from template for record type `@specific_template_tests.ASNSequenceType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field3' is missing from template for record type `@specific_template_tests.ASNSequenceType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Unexpected field `field2' in record template, expecting `field1'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field1' is missing from template for record type `@specific_template_tests.ASNSequenceType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from template for record type `@specific_template_tests.ASNSequenceType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field3' is missing from template for record type `@specific_template_tests.ASNSequenceType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to non-existing field `field4' in record template for type `@specific_template_tests.ASNSequenceType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate field `field1' in template",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field1' is already given here",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from template for record type `@specific_template_tests.ASNSequenceType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field3' is missing from template for record type `@specific_template_tests.ASNSequenceType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("integer value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Unexpected field `field1' in record template, expecting `field2'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context", lineNum, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Field `field3' is missing from template for record type `@specific_template_tests.ASNSequenceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Unexpected field `field2' in record template, expecting `field1'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from template for record type `@specific_template_tests.ASNSequenceType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field3' is missing from template for record type `@specific_template_tests.ASNSequenceType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field1' is missing from template for record type `@specific_template_tests.ASNSequenceType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from template for record type `@specific_template_tests.ASNSequenceType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field3' is missing from template for record type `@specific_template_tests.ASNSequenceType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field3' is missing from template for record type `@specific_template_tests.ASNSequenceType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("integer value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("sequence value was expected for type `@specific_template_tests.ASNSequenceType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("sequence value was expected for type `@specific_template_tests.ASNSequenceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t_i' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 69; i++) {
			markersToCheck.add(new MarkerToCheck("sequence value was expected for type `@specific_template_tests.ASNSequenceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@specific_template_tests.ASNSequenceType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("sequence value was expected for type `@specific_template_tests.ASNSequenceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@specific_template_tests.ASNSequenceType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("sequence value was expected for type `@specific_template_tests.ASNSequenceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 10;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("value list notation cannot be used for union type `@specific_template_tests.ASNChoiceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 9; i++) {
			markersToCheck.add(new MarkerToCheck("Union value was expected for type `@specific_template_tests.ASNChoiceType'", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to non-existent field `field4' in union template for type `@specific_template_tests.ASNChoiceType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A template for union type must contain exactly one selected field",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("integer value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context", lineNum, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("A template for union type must contain exactly one selected field", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("value list notation cannot be used for union type `@specific_template_tests.ASNChoiceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("A template for union type must contain exactly one selected field",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("integer value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Union value was expected for type `@specific_template_tests.ASNChoiceType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Union value was expected for type `@specific_template_tests.ASNChoiceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t_i' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 69; i++) {
			markersToCheck.add(new MarkerToCheck("Union value was expected for type `@specific_template_tests.ASNChoiceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@specific_template_tests.ASNChoiceType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Union value was expected for type `@specific_template_tests.ASNChoiceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@specific_template_tests.ASNChoiceType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Union value was expected for type `@specific_template_tests.ASNChoiceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("Too few elements in the array template: 3 was expected instead of 2",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too many elements in the array template: 3 was expected instead of 4",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("integer value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Too many elements in the array template: 3 was expected instead of 10",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 9; i++) {
			markersToCheck.add(new MarkerToCheck("Array value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `integer[3]'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Array value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Array value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t_i' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 69; i++) {
			markersToCheck.add(new MarkerToCheck("Array value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `integer[3]' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Array value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `integer[3]' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Array value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 8;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `@specific_template_tests.t_function'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to a function or external function was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 5; i++) {
			markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `@specific_template_tests.t_function'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `@specific_template_tests.t_function'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `@specific_template_tests.t_function'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to a function or external function was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t_i' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 69; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to a function or external function was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@specific_template_tests.t_function' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to a function or external function was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@specific_template_tests.t_function' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to a function or external function was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Type `@specific_template_tests.t_function' does not have a `runs on' clause, but function runs on `@specific_template_tests.mycomponent'.",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 7;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `@specific_template_tests.t_altstep'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to an altstep was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 5; i++) {
			markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `@specific_template_tests.t_altstep'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `@specific_template_tests.t_altstep'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `@specific_template_tests.t_altstep'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to an altstep was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t_i' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 69; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to an altstep was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@specific_template_tests.t_altstep' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to an altstep was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@specific_template_tests.t_altstep' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to an altstep was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Type `@specific_template_tests.t_altstep2' does not have a `runs on' clause, but altstep runs on `@specific_template_tests.mycomponent'.",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 7;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `@specific_template_tests.t_testcase'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to a testcase was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 5; i++) {
			markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `@specific_template_tests.t_testcase'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `@specific_template_tests.t_testcase'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `@specific_template_tests.t_testcase'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to a testcase was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t_i' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 69; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to a testcase was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@specific_template_tests.t_testcase' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to a testcase was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@specific_template_tests.t_testcase' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to a testcase was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 24;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Too many elements in value list notation for type `@specific_template_tests.mySignature': 3 was expected instead of 4", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Unexpected parameter `Par2' in signature template", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Duplicate parameter `Par3' in template for signature `@specific_template_tests.mySignature'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Parameter `Par3' is already given here",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Unexpected field `Par3' in signature value, expecting `Par1'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Unexpected field `Par3' in signature value, expecting `Par2'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate parameter `Par3' in template for signature `@specific_template_tests.mySignature'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Parameter `Par3' is already given here",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Unexpected field `Par3' in signature value, expecting `Par2'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("integer value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too many elements in value list notation for type `@specific_template_tests.mySignature': 3 was expected instead of 5",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 9; i++) {
			markersToCheck.add(new MarkerToCheck("sequence value was expected for type `@specific_template_tests.mySignature'", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Reference to non-existent parameter `field2' in template for signature `@specific_template_tests.mySignature'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to non-existent parameter `field4' in template for signature `@specific_template_tests.mySignature'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to non-existent parameter `field1' in template for signature `@specific_template_tests.mySignature'", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Reference to non-existent parameter `field1' in template for signature `@specific_template_tests.mySignature'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to non-existent parameter `field2' in template for signature `@specific_template_tests.mySignature'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to non-existent parameter `field1' in template for signature `@specific_template_tests.mySignature'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to non-existent parameter `field2' in template for signature `@specific_template_tests.mySignature'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to non-existent parameter `field1' in template for signature `@specific_template_tests.mySignature'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to non-existent parameter `field2' in template for signature `@specific_template_tests.mySignature'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("sequence value was expected for type `@specific_template_tests.mySignature'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("sequence value was expected for type `@specific_template_tests.mySignature'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t_i' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 69; i++) {
			markersToCheck.add(new MarkerToCheck("sequence value was expected for type `@specific_template_tests.mySignature'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@specific_template_tests.mySignature' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("sequence value was expected for type `@specific_template_tests.mySignature'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@specific_template_tests.mySignature' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("sequence value was expected for type `@specific_template_tests.mySignature'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 6;
		for (i = 0; i < 11; i++) {
			markersToCheck.add(new MarkerToCheck("NULL value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Incompatible value: `NULL' was expected",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("NULL value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `NULL'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `NULL'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("NULL value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t_i' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("NULL value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `NULL'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 54; i++) {
			markersToCheck.add(new MarkerToCheck("NULL value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `NULL' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("NULL value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `NULL' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("NULL value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 20;
		markersToCheck.add(new MarkerToCheck("BMP string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `BMPString'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `BMPString'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("BMP string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t_i' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("BMP string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `BMPString'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 50; i++) {
			markersToCheck.add(new MarkerToCheck("BMP string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("BMP string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `BMPString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("BMP string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `BMPString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("BMP string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 20;
		markersToCheck.add(new MarkerToCheck("General string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `GeneralString'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `GeneralString'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("General string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t_i' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("General string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `GeneralString'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 50; i++) {
			markersToCheck.add(new MarkerToCheck("General string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("General string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `GeneralString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("General string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `GeneralString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("General string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 20;
		markersToCheck.add(new MarkerToCheck("Graphicl string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `GraphicString'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `GraphicString'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Graphicl string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t_i' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Graphicl string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `GraphicString'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 50; i++) {
			markersToCheck.add(new MarkerToCheck("Graphicl string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Graphicl string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `GraphicString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Graphicl string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `GraphicString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Graphicl string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 20;
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `IA5String'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `IA5String'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t_i' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `IA5String'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 50; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `IA5String' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `IA5String' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 20;
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `NumericString'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `NumericString'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t_i' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `NumericString'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 50; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `NumericString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `NumericString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 23;
		markersToCheck.add(new MarkerToCheck("octetstring value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `octetstring'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `octetstring'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("octetstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t_i' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 6; i++) {
			markersToCheck.add(new MarkerToCheck("octetstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `octetstring'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 58; i++) {
			markersToCheck.add(new MarkerToCheck("octetstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `octetstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("octetstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `octetstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("octetstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 20;
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `VisibleString'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `VisibleString'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t_i' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `VisibleString'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 50; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `VisibleString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `VisibleString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 20;
		markersToCheck.add(new MarkerToCheck("Teletex string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `TeletexString'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `TeletexString'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Teletex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t_i' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Teletex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `TeletexString'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 50; i++) {
			markersToCheck.add(new MarkerToCheck("Teletex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Teletex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `TeletexString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Teletex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `TeletexString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Teletex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 20;
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `PrintableString'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `PrintableString'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t_i' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `PrintableString'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 50; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `PrintableString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `PrintableString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 20;
		markersToCheck.add(new MarkerToCheck("Teletex string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `TeletexString'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `TeletexString'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Teletex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t_i' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Teletex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `TeletexString'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 50; i++) {
			markersToCheck.add(new MarkerToCheck("Teletex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Teletex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `TeletexString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Teletex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `TeletexString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Teletex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 20;
		markersToCheck.add(new MarkerToCheck("Universal string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `UniversalString'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `UniversalString'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Universal string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t_i' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Universal string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `UniversalString'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 50; i++) {
			markersToCheck.add(new MarkerToCheck("Universal string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Universal string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `UniversalString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Universal string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `UniversalString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Universal string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 20;
		markersToCheck.add(new MarkerToCheck("UTF8 string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `UTF8String'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `UTF8String'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("UTF8 string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t_i' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("UTF8 string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `UTF8String'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 50; i++) {
			markersToCheck.add(new MarkerToCheck("UTF8 string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("UTF8 string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `UTF8String' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("UTF8 string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `UTF8String' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("UTF8 string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 20;
		markersToCheck.add(new MarkerToCheck("Videotex string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `VideotexString'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `VideotexString'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Videotex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t_i' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Videotex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `VideotexString'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 50; i++) {
			markersToCheck.add(new MarkerToCheck("Videotex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Videotex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `VideotexString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Videotex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `VideotexString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Videotex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 20;
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `VisibleString'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `VisibleString'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t_i' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `VisibleString'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 50; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `VisibleString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `VisibleString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 20;
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `GeneralizedTime'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `GeneralizedTime'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t_i' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `GeneralizedTime'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 50; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `GeneralizedTime' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `GeneralizedTime' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 20;
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `UTCTime'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `UTCTime'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t_i' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `UTCTime'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 50; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `UTCTime' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `UTCTime' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Field `field1' is missing from template for set type `@specific_template_tests.ASNSetType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from template for set type `@specific_template_tests.ASNSetType'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to non-existing field `field3' in set template for type `@specific_template_tests.ASNSetType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate field `field1' in template",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field1' is already given here",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from template for set type `@specific_template_tests.ASNSetType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("integer value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Value list notation is not allowed for set type `@specific_template_tests.ASNSetType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 9; i++) {
			markersToCheck.add(new MarkerToCheck("set value was expected for type `@specific_template_tests.ASNSetType'", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("integer value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("set value was expected for type `@specific_template_tests.ASNSetType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("set value was expected for type `@specific_template_tests.ASNSetType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t_i' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 69; i++) {
			markersToCheck.add(new MarkerToCheck("set value was expected for type `@specific_template_tests.ASNSetType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@specific_template_tests.ASNSetType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("set value was expected for type `@specific_template_tests.ASNSetType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@specific_template_tests.ASNSetType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("set value was expected for type `@specific_template_tests.ASNSetType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("Field `field1' is missing from template for record type `@specific_template_tests.ASNSequenceType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from template for record type `@specific_template_tests.ASNSequenceType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field3' is missing from template for record type `@specific_template_tests.ASNSequenceType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too many elements in value list notation for type `@specific_template_tests.ASNSequenceType': 3 was expected instead of 5",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 9; i++) {
			markersToCheck.add(new MarkerToCheck("sequence value was expected for type `@specific_template_tests.ASNSequenceType'", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field1' is missing from template for record type `@specific_template_tests.ASNSequenceType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field3' is missing from template for record type `@specific_template_tests.ASNSequenceType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Unexpected field `field2' in record template, expecting `field1'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field1' is missing from template for record type `@specific_template_tests.ASNSequenceType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from template for record type `@specific_template_tests.ASNSequenceType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field3' is missing from template for record type `@specific_template_tests.ASNSequenceType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to non-existing field `field4' in record template for type `@specific_template_tests.ASNSequenceType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate field `field1' in template",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field1' is already given here",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from template for record type `@specific_template_tests.ASNSequenceType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field3' is missing from template for record type `@specific_template_tests.ASNSequenceType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("integer value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Unexpected field `field1' in record template, expecting `field2'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context", lineNum, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Field `field3' is missing from template for record type `@specific_template_tests.ASNSequenceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Unexpected field `field2' in record template, expecting `field1'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from template for record type `@specific_template_tests.ASNSequenceType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field3' is missing from template for record type `@specific_template_tests.ASNSequenceType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field1' is missing from template for record type `@specific_template_tests.ASNSequenceType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from template for record type `@specific_template_tests.ASNSequenceType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field3' is missing from template for record type `@specific_template_tests.ASNSequenceType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field3' is missing from template for record type `@specific_template_tests.ASNSequenceType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("integer value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("sequence value was expected for type `@specific_template_tests.ASNSequenceType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("sequence value was expected for type `@specific_template_tests.ASNSequenceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t_i' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 69; i++) {
			markersToCheck.add(new MarkerToCheck("sequence value was expected for type `@specific_template_tests.ASNSequenceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@specific_template_tests.ASNSequenceType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("sequence value was expected for type `@specific_template_tests.ASNSequenceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@specific_template_tests.ASNSequenceType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("sequence value was expected for type `@specific_template_tests.ASNSequenceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 10;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("value list notation cannot be used for union type `@specific_template_tests.ASNChoiceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 9; i++) {
			markersToCheck.add(new MarkerToCheck("Union value was expected for type `@specific_template_tests.ASNChoiceType'", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to non-existent field `field4' in union template for type `@specific_template_tests.ASNChoiceType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A template for union type must contain exactly one selected field",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("integer value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context", lineNum, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("A template for union type must contain exactly one selected field", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("value list notation cannot be used for union type `@specific_template_tests.ASNChoiceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("A template for union type must contain exactly one selected field",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("integer value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Union value was expected for type `@specific_template_tests.ASNChoiceType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Union value was expected for type `@specific_template_tests.ASNChoiceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t_i' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 69; i++) {
			markersToCheck.add(new MarkerToCheck("Union value was expected for type `@specific_template_tests.ASNChoiceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@specific_template_tests.ASNChoiceType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Union value was expected for type `@specific_template_tests.ASNChoiceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@specific_template_tests.ASNChoiceType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `specific_template_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Union value was expected for type `@specific_template_tests.ASNChoiceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}

		return markersToCheck;
	}

	private ArrayList<MarkerToCheck> statement_tests_ttcn_initializer() {
		//statement_tests.ttcn
		ArrayList<MarkerToCheck> markersToCheck = new ArrayList<MarkerToCheck>(1004);
		int lineNum = 41;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `compTimer' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 6;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `guard2' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `timerName' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 6;
		markersToCheck.add(new MarkerToCheck("Port type `@statement_tests.testPortName_PT' cannot be a parameter or embedded in a parameter of a function used in a start operation. Function `@statement_tests.f_startTests4' cannot be start on a parallel test component",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Port type `@statement_tests.testPortName_PT' cannot be a parameter or embedded in a parameter of a function used in a start operation. Functions of type `@statement_tests.t_functionstartTests4' cannot be start on a parallel test component",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Port type `@statement_tests.testPortName_PT' cannot be the return type or embedded in the return type of function `@statement_tests.f_startTests4' if it is started on a parallel test component",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Port type `@statement_tests.testPortName_PT' cannot be the return type or embedded in the return type of function type `@statement_tests.t_functionstartTests4' if it is started on parallel test component",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		int i = 0;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Duplicate incoming message type `integer'", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Signature `@statement_tests.S_ProvedureSignatureID' cannot be used on a message based port",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate outgoing message type `integer'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `@statement_tests.S_ProvedureSignatureID' cannot be used on a message based port",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Duplicate incoming message type `integer'", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Duplicate incoming signature `@statement_tests.S_ProvedureSignatureID'",  lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Duplicate outgoing message type `integer'", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Duplicate outgoing signature `@statement_tests.S_ProvedureSignatureID'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `@statement_tests.S_ProvedureSignatureID' cannot be used on a message based port",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("Data type `integer' cannot be received on procedure based port",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate incoming signature `@statement_tests.S_ProvedureSignatureID'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Data type `integer' cannot be sent on procedure based port",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate outgoing signature `@statement_tests.S_ProvedureSignatureID'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Data type `integer' cannot be sent or received on procedure based port",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate incoming message type `integer'",  lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Duplicate incoming signature `@statement_tests.S_ProvedureSignatureID'", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Duplicate outgoing message type `integer'",  lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Duplicate outgoing signature `@statement_tests.S_ProvedureSignatureID'", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 59;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `timerName' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("The function has a return type, but it does not have any return statement",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 12;
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the operands",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `vl_i1' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `vl_i2' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `vl_i3' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `vl_i4' in module `statement_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("integer value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `vl_i2' in module `statement_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the operands",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `vl_i1' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `vl_i2' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `vl_i3' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `vl_i4' in module `statement_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("integer value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 13;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("There is no visible definition with name `vl_i' in module `statement_tests'", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 9;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("There is no visible definition with name `vl_i' in module `statement_tests'", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 9;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("There is no visible definition with name `vl_i' in module `statement_tests'", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 9;
		markersToCheck.add(new MarkerToCheck("Error verdict cannot be set by the setverdict operation",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `setverdict' operation should be a verdict value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `statement_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 76; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `setverdict' operation should be a verdict value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `c_integer' in module `statement_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `setverdict' operation should be a verdict value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t' in module `statement_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `setverdict' operation should be a verdict value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `statement_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The operand of the `setverdict' operation should be a verdict value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The operand of the `setverdict' operation should be a verdict value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `f_functiontypeValueTest' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("The operand of the `setverdict' operation should be a verdict value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 11;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `fakeOperation' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to an altstep was expected instead of function",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 14;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A value or expression of type boolean was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A value of type altstep was expected instead of `@statement_tests.t_function'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too few parameters: 1 was expected instead of 0",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a variable or value parameter was expected for an `inout' value parameter",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too many parameters: 1 was expected instead of 2",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 30;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `barmi' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 6;
		markersToCheck.add(new MarkerToCheck("integer value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 13;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Cannot determine the type of the argument", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 7;
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the argument",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 69;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `c_integer' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Cannot determine the type of the argument", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 7;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `statement_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the argument",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `f_functiontypeValueTest' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Cannot determine the type of the argument", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 10;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Cannot determine the type of the argument", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Cannot determine the type of the argument", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the argument",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 6;
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the argument",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `statement_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 69;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `c_integer' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Cannot determine the type of the argument", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 7;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `statement_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the argument",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `f_functiontypeValueTest' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Cannot determine the type of the argument", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Circular reference chain: `@statement_tests.cg_c -> expression: @statement_tests.cg_c -> @statement_tests.cg_c'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Circular reference chain: `expression: @statement_tests.cg_c -> @statement_tests.cg_c -> expression: @statement_tests.cg_c'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 10;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Cannot determine the type of the argument", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `j' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 7;
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the argument",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 69;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `c_integer' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Cannot determine the type of the argument", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 7;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `statement_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the argument",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `f_functiontypeValueTest' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Cannot determine the type of the argument", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("Previous definition of label `akarmi' is here",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicated label `akarmi'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Label `akarmi' is defined, but not used",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Label `akarmi2' is defined, but not used",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("Jump to label `akarmi3' crosses a local definition",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Label `akarmi4' is used, but not defined",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("The Definition crossed by label `akarmi3' is here",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("The function has a return type, but it does not have any return statement",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 11;
		markersToCheck.add(new MarkerToCheck("Component type `@statement_tests.componentName_CT' does not have a port with name `portname1_PT'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `portname1_PT' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Definition `v_variable' in component type `@statement_tests.componentName_CT' is a variable and not a port", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `comp1' in module `statement_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Both endpoints of the mapping are test component ports", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Both endpoints of the mapping are system ports",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The mapping between port types `@statement_tests.testPortName_PT' and `@statement_tests.testPortonlyOut' is not consistent",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The mapping between port types `@statement_tests.testPortonlyOut' and `@statement_tests.testPortName_PT' is not consistent",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 7;
		markersToCheck.add(new MarkerToCheck("Component type `@statement_tests.componentName_CT' does not have a port with name `portname1_PT'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `portname1_PT' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Definition `v_variable' in component type `@statement_tests.componentName_CT' is a variable and not a port", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `comp1' in module `statement_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Both endpoints of the mapping are test component ports", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Both endpoints of the mapping are system ports",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The mapping between port types `@statement_tests.testPortName_PT' and `@statement_tests.testPortonlyOut' is not consistent",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The mapping between port types `@statement_tests.testPortonlyOut' and `@statement_tests.testPortName_PT' is not consistent",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 7;
		markersToCheck.add(new MarkerToCheck("Component type `@statement_tests.componentName_CT' does not have a port with name `portname1_PT'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `portname1_PT' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Definition `v_variable' in component type `@statement_tests.componentName_CT' is a variable and not a port", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `comp1' in module `statement_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("The `system' component reference shall not be used in a connect operation", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Outgoing message type `integer' of port type `@statement_tests.testPortName_PT' is not present on the incoming list of port type `@statement_tests.testPortonlyOut'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Outgoing signature type `@statement_tests.S_ProvedureSignatureID' of port type `@statement_tests.testPortName_PT' is not present on the incoming list of port type `@statement_tests.testPortonlyOut'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The connection between port types `@statement_tests.testPortName_PT' and `@statement_tests.testPortonlyOut' is not consistent",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Outgoing message type `integer' of port type `@statement_tests.testPortName_PT' is not present on the incoming list of port type `@statement_tests.testPortonlyOut'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Outgoing signature type `@statement_tests.S_ProvedureSignatureID' of port type `@statement_tests.testPortName_PT' is not present on the incoming list of port type `@statement_tests.testPortonlyOut'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The connection between port types `@statement_tests.testPortonlyOut' and `@statement_tests.testPortName_PT' is not consistent",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 7;
		markersToCheck.add(new MarkerToCheck("Component type `@statement_tests.componentName_CT' does not have a port with name `portname1_PT'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `portname1_PT' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Definition `v_variable' in component type `@statement_tests.componentName_CT' is a variable and not a port", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `comp1' in module `statement_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("The `system' component reference shall not be used in a disconnect operation", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Outgoing message type `integer' of port type `@statement_tests.testPortName_PT' is not present on the incoming list of port type `@statement_tests.testPortonlyOut'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Outgoing signature type `@statement_tests.S_ProvedureSignatureID' of port type `@statement_tests.testPortName_PT' is not present on the incoming list of port type `@statement_tests.testPortonlyOut'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The connection between port types `@statement_tests.testPortName_PT' and `@statement_tests.testPortonlyOut' is not consistent",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Outgoing message type `integer' of port type `@statement_tests.testPortName_PT' is not present on the incoming list of port type `@statement_tests.testPortonlyOut'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Outgoing signature type `@statement_tests.S_ProvedureSignatureID' of port type `@statement_tests.testPortName_PT' is not present on the incoming list of port type `@statement_tests.testPortonlyOut'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The connection between port types `@statement_tests.testPortonlyOut' and `@statement_tests.testPortName_PT' is not consistent",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 9;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `akarmi' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a port or port parameter was expected instead of variable",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 9;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `akarmi' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a port or port parameter was expected instead of variable",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("Functions can not return ports",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Port type can not be used as value parameter",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The function has a return type, but it does not have any return statement",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("Functions can not return ports",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Port type can not be used as value parameter",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 13;
		markersToCheck.add(new MarkerToCheck("Function `@statement_tests.f_startTests' cannot be started on a parallel test component because it has port parameter `pl_port_par'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Function `@statement_tests.f_startTests2' cannot be started on parallel test component because it does not have a `runs on' clause",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 9;
		markersToCheck.add(new MarkerToCheck("Missing duration: timer `TL_timervar2' does not have default duration",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Missing duration: timer `TL_timervar3' does not have default duration",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The timer duration is negative: `-5.0'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("float operand was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Component type mismatch: The component reference is of type `@statement_tests.componentName_CT', but function `@statement_tests.f_runsonothercomponent' runs on `@statement_tests.componentName_CT2'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The argument of start operation is missing, although it cannot be a start timer or start port operation",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Port, timer or component reference was expected as the operand of start operation instead of function `@statement_tests.f_startTests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to parameterized definition `f_startTests' without actual parameter list",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Port, timer or component reference was expected as the operand of start operation instead of function `@statement_tests.f_startTests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to parameterized definition `f_startTests' without actual parameter list",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 10;
		markersToCheck.add(new MarkerToCheck("Functions of type `@statement_tests.t_functionstartTests2' cannot be started on a parallel test component because the type does not have `runs on' clause",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("A value of a function type was expected in the argument instead of a `refers' operation, which does not specify any function type.",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A value of a function type was expected in the argument instead of a `null' value, which does not specify any function type.",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A value of type function was expected in the argument of `integer'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Functions of type `@statement_tests.t_functionstartTests2' cannot be started on a parallel test component because the type does not have `runs on' clause",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `functionOther' in module `statement_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 15;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `akarmi' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Port, timer or component reference was expected as the operand of stop operation instead of `function `@statement_tests.f_stopTests''",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to parameterized definition `f_stopTests' without actual parameter list",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 14;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `akarmi' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a value was expected instead of a call of function `@statement_tests.f_killedTests', which does not have a return type",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to parameterized definition `f_killedTests' without actual parameter list",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 11;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `akarmi' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a value was expected instead of a call of function `@statement_tests.f_killTests', which does not have a return type",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to parameterized definition `f_killTests' without actual parameter list",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 26;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `akarmi' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a timer or timer parameter was expected instead of function `@statement_tests.f_timeoutTests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to parameterized definition `f_timeoutTests' without actual parameter list",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 7;
		markersToCheck.add(new MarkerToCheck("'*' cannot be used as a matching template for a `trigger' operation",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("Massage-based operation `trigger' is not applicable to a procedure-based port of type `@statement_tests.testPortName2_PT'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Port type `@statement_tests.testPortonlyOut' does not have any incoming message types",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'*' cannot be used as a matching template for a `trigger' operation",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Message type `charstring' is not present on the incoming list of port of type `@statement_tests.testPortName_PT'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `myVar' in module `statement_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Value redirect cannot be used without receive parameter",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `myPeer' in module `statement_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `myVar' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Value redirect cannot be used without receive parameter",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Operation `any port.trigger' cannot have parameter",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Operation `any port.trigger' cannot have value redirect",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `myVar' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `templateInstance' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 10;
		markersToCheck.add(new MarkerToCheck("'*' cannot be used as a matching template for a `receive' operation",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the incoming message",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Massage-based operation `receive' is not applicable to a procedure-based port of type `@statement_tests.testPortName2_PT'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Port type `@statement_tests.testPortonlyOut' does not have any incoming message types",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'*' cannot be used as a matching template for a `receive' operation",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Message type `charstring' is not present on the incoming list of port of type `@statement_tests.testPortName_PT'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Cannot determine the type of the incoming message", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `myVar' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Value redirect cannot be used without receive parameter",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `myPeer' in module `statement_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `myVar' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Value redirect cannot be used without receive parameter",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Operation `any port.receive' cannot have parameter",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Operation `any port.receive' cannot have value redirect",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `myVar' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `templateInstance' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 7;
		markersToCheck.add(new MarkerToCheck("'*' cannot be used as a matching template for a `check-receive' operation",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("Massage-based operation `check-receive' is not applicable to a procedure-based port of type `@statement_tests.testPortName2_PT'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Port type `@statement_tests.testPortonlyOut' does not have any incoming message types",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'*' cannot be used as a matching template for a `check-receive' operation",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Message type `charstring' is not present on the incoming list of port of type `@statement_tests.testPortName_PT'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Operation `any port.check-receive' cannot have parameter",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `templateInstance' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 19;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `c_integer' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A specific value was expected instead of omit value",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("Message-based operation `send' is not applicable to a procedure-based port of type `@statement_tests.testPortName2_PT'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Port type `@statement_tests.testPortonlyIn' does not have any outgoing message types",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("integer value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 6; i++) {
			markersToCheck.add(new MarkerToCheck("integer value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `integer'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `integer'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("integer value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 5; i++) {
			markersToCheck.add(new MarkerToCheck("integer value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `integer'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("integer value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `portname_PT_PT' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 47; i++) {
			markersToCheck.add(new MarkerToCheck("integer value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `integer' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("integer value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 12; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `integer' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `integer' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `statement_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `statement_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("integer value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("A specific value was expected instead of any value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Cannot determine the type of the signature", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the signature",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Procedure-based operation `reply' is not applicable to a message-based port of type `@statement_tests.testPortName_PT'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Port type `@statement_tests.testPortonlyOut2' does not have any incoming signatures",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Signature `integer' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `integer', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `integer' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `integer', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `integer' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `integer', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `integer' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `integer', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `integer' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `integer', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `integer' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `integer', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `integer' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `integer', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `integer' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `integer', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `integer' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `integer', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `integer' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `integer', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `integer' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `integer', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `integer' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `integer', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `integer' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `integer', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `integer' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `integer', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `integer' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `integer', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `integer' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `integer', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `c_integer' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `verdicttype' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `verdicttype', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `verdicttype' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `verdicttype', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `verdicttype' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `verdicttype', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `verdicttype' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `verdicttype', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `verdicttype' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `verdicttype', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Cannot determine the type of the signature", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Signature `boolean' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `boolean', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `boolean' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `boolean', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `boolean' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `boolean', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the signature",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `float' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `float', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `charstring' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `charstring', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `universal charstring' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `universal charstring', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `hexstring' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `hexstring', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `bitstring' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `bitstring', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the signature",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `boolean' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `boolean', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `boolean' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `boolean', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `hexstring' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `hexstring', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `bitstring' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `bitstring', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `bitstring' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `bitstring', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `hexstring' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `hexstring', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `bitstring' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `bitstring', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `hexstring' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `hexstring', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `bitstring' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `bitstring', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `hexstring' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `hexstring', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `bitstring' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `bitstring', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `hexstring' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `hexstring', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `bitstring' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `bitstring', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `hexstring' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `hexstring', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `bitstring' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `bitstring', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `hexstring' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `hexstring', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `bitstring' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `bitstring', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `hexstring' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `hexstring', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `bitstring' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `bitstring', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `hexstring' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `hexstring', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `charstring' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `charstring', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `boolean' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `boolean', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `boolean' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `boolean', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `boolean' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `boolean', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `boolean' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `boolean', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `boolean' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `boolean', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `boolean' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `boolean', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `hexstring' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `hexstring', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `octetstring' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `octetstring', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `charstring' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `charstring', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `octetstring' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `octetstring', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `charstring' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `charstring', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `octetstring' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `octetstring', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `charstring' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `charstring', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `charstring' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `charstring', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `float' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `float', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `charstring' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `charstring', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `universal charstring' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `universal charstring', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `bitstring' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `bitstring', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `charstring' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `charstring', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `hexstring' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `hexstring', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `charstring' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `charstring', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `bitstring' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `bitstring', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `float' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `float', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `hexstring' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `hexstring', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `octetstring' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `octetstring', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `charstring' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `charstring', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `bitstring' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `bitstring', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `hexstring' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `hexstring', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `octetstring' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `octetstring', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `float' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `float', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `float' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `float', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `boolean' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `boolean', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `boolean' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `boolean', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `charstring' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `charstring', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `boolean' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `boolean', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Cannot determine the type of the signature", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Signature `@statement_tests.componentName_CT' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `@statement_tests.componentName_CT', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `boolean' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `boolean', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `boolean' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `boolean', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `boolean' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `boolean', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `boolean' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `boolean', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `boolean' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `boolean', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `boolean' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `boolean', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `boolean' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `boolean', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `float' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `float', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `t' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `@statement_tests.mycomponent' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `@statement_tests.mycomponent', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `default' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `default', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `default' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `default', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Cannot determine the type of the signature", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Operation `reply' is not applicable to non-blocking signature `@statement_tests.S_ProvedureSignatureID3'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Unexpected return value. Signature `@statement_tests.S_ProvedureSignatureID' does not have return type",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Missing return value. Signature `@statement_tests.S_ProvedureSignatureID4' returns type `integer'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("integer value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `integer' is not present on the incoming list of port type `@statement_tests.testPortName3_PT'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `integer', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Unexpected return value. Signature `@statement_tests.S_ProvedureSignatureID' does not have return type",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 7;
		markersToCheck.add(new MarkerToCheck("Procedure-based operation `raise' is not applicable to a message-based port of type `@statement_tests.testPortName_PT'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Port type `@statement_tests.testPortonlyOut2' does not have any incoming signatures",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `@statement_tests.S_ProvedureSignatureID2' does not have exceptions",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `@statement_tests.S_ProvedureSignatureID2' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 14;
		markersToCheck.add(new MarkerToCheck("Parameter redirect cannot be used without signature template",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `akarmi' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("operation `any port.getcall' cannot have parameter",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Operation `any port.getcall' cannot have parameter redirect",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("operation `any port.getcall' cannot have parameter",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Procedure-based operation `getcall' is not applicable to a massage-based port of type `@statement_tests.testPortName_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Port type `@statement_tests.testPortonlyOut2' does not have any incoming signatures",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Procedure-based operation `getcall' is not applicable to a massage-based port of type `@statement_tests.testPortName_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Port type `@statement_tests.testPortonlyOut2' does not have any incoming signatures",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `@statement_tests.S_ProvedureSignatureID2' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `charstring' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `charstring', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the template",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Parameter redirect cannot be used without signature template",  lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `statement_tests'", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Too many variable entries compared to the number of in/inout parameters in signature `@statement_tests.S_ProvedureSignatureID': 1 was expected instead of 2",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch in parameter redirect: A variable of type `integer' was expected instead of `@statement_tests.componentName_CT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Parameter redirect cannot be used because signature `@statement_tests.S_ProvedureSignatureID5' does not have parameters",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too many elements in value list notation for type `@statement_tests.S_ProvedureSignatureID5': 0 was expected instead of 1",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `@statement_tests.S_ProvedureSignatureID' does not have parameter named `par2'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate redirect for parameter `par1'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Parameter `par1' of signature `@statement_tests.S_ProvedureSignatureID6' has `out' direction",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch in parameter redirect: A variable of type `integer' was expected instead of `@statement_tests.componentName_CT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Parameter redirect cannot be used because signature `@statement_tests.S_ProvedureSignatureID5' does not have parameters",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too many elements in value list notation for type `@statement_tests.S_ProvedureSignatureID5': 0 was expected instead of 1",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the template",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("operation `any port.getcall' cannot have parameter",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `myVar' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `templateInstance' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 7;
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the template",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `akarmi' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `myPeer' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `myVar' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Procedure-based operation `check-getcall' is not applicable to a massage-based port of type `@statement_tests.testPortName_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Parameter redirect cannot be used without signature template",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `akarmi' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("operation `any port.check-getcall' cannot have parameter",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Procedure-based operation `check-getcall' is not applicable to a massage-based port of type `@statement_tests.testPortName_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Port type `@statement_tests.testPortonlyOut2' does not have any incoming signatures",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Procedure-based operation `check-getcall' is not applicable to a massage-based port of type `@statement_tests.testPortName_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Port type `@statement_tests.testPortonlyOut2' does not have any incoming signatures",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `@statement_tests.S_ProvedureSignatureID2' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `charstring' is not present on the incoming list of port type `@statement_tests.testPortName2_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is `charstring', which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the template",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Parameter redirect cannot be used without signature template",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `akarmi' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `myPeer' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `myVar' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the template",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("operation `any port.check-getcall' cannot have parameter",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `myVar' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `templateInstance' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 14;
		markersToCheck.add(new MarkerToCheck("Parameter redirect cannot be used without signature template",  lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("There is no visible definition with name `akarmi' in module `statement_tests'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Value redirect cannot be used without signature template",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Operation `any port.getreply' cannot have parameter",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible explicit type specification: `integer' was expected instead of @statement_tests.S_ProvedureSignatureID4",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Operation `any port.getreply' cannot have parameter",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Operation `any port.getreply' cannot have value match",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Procedure-based operation `getreply' is not applicable to a message-based port of type `@statement_tests.testPortName_PT'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Port type `@statement_tests.reply_PT' does not have any outgoing signatures that support reply", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The type of parameter is `charstring', which is not a signature",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the template",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Parameter redirect cannot be used without signature template",  lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `statement_tests'", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Too many variable entries compared to the number of out/inout parameters in signature `@statement_tests.S_ProvedureSignatureID': 0 was expected instead of 2",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too many variable entries compared to the number of out/inout parameters in signature `@statement_tests.S_ProvedureSignatureID': 0 was expected instead of 1",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Parameter redirect cannot be used because signature `@statement_tests.S_ProvedureSignatureID5' does not have parameters",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too many elements in value list notation for type `@statement_tests.S_ProvedureSignatureID5': 0 was expected instead of 1",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Parameter `par1' of signature `@statement_tests.S_ProvedureSignatureID' has `in' direction",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `@statement_tests.S_ProvedureSignatureID' does not have parameter named `par2'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `@statement_tests.S_ProvedureSignatureID6' does not have parameter named `par2'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate redirect for parameter `par1'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch in parameter redirect: A variable of type `integer' was expected instead of `@statement_tests.componentName_CT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Parameter redirect cannot be used because signature `@statement_tests.S_ProvedureSignatureID5' does not have parameters",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too many elements in value list notation for type `@statement_tests.S_ProvedureSignatureID5': 0 was expected instead of 1",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the template",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Operation `any port.getreply' cannot have parameter",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `myVar' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `templateInstance' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 6;
		markersToCheck.add(new MarkerToCheck("Port type `@statement_tests.reply_PT' does not have any outgoing signatures that support reply",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the template",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Operation `check-getreply' is not applicable to non-blocking signature `@statement_tests.S_ProvedureSignatureID3'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Port type `@statement_tests.reply_PT' does not have any outgoing signatures that support reply",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `akarmi' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `myPeer' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `myVar' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too many variable entries compared to the number of out/inout parameters in signature `@statement_tests.S_ProvedureSignatureID3': 0 was expected instead of 1",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Port type `@statement_tests.reply_PT' does not have any outgoing signatures that support reply",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Parameter redirect cannot be used without signature template",  lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("There is no visible definition with name `akarmi' in module `statement_tests'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Value redirect cannot be used without signature template",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Operation `any port.check-getreply' cannot have parameter",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible explicit type specification: `integer' was expected instead of @statement_tests.S_ProvedureSignatureID4",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Operation `any port.check-getreply' cannot have parameter",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Operation `any port.check-getreply' cannot have value match",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Procedure-based operation `check-getreply' is not applicable to a message-based port of type `@statement_tests.testPortName_PT'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Port type `@statement_tests.reply_PT' does not have any outgoing signatures that support reply", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The type of parameter is `charstring', which is not a signature",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the template",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Parameter redirect cannot be used without signature template",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Port type `@statement_tests.reply_PT' does not have any outgoing signatures that support reply",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `akarmi' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `myPeer' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `myVar' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the template",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Operation `any port.check-getreply' cannot have parameter",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `myVar' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `templateInstance' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 7;
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the template",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `myPeer' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `myVar' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("Port type `@statement_tests.testPortonlyOut' does not have incoming queue because it has neither incoming messages nor incoming or outgoing signatues",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 7;
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the template",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `myPeer' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `myVar' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'*' cannot be used as a matching template for a `catch' operation",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the template",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `akarmi' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `myPeer' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `myVar' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'*' cannot be used as a matching template for a `catch' operation",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("Catching of `timeout' exception is not allowed in this context. It is permitted only in the response and exception handling part of `call' operations",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Timeout exception cannot be cought on `any port''",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Catching of `timeout' exception is not allowed in this context. It is permitted only in the response and exception handling part of `call' operations",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Timeout exception cannot be cought on a message-based port of type `@statement_tests.testPortName_PT'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Catching of `timeout' exception is not allowed in this context. It is permitted only in the response and exception handling part of `call' operations",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Timeout exception cannot be cought on a port of type `@statement_tests.testPortonlyIn2', which does not have any outgoing signatures that allow blocking calls",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the template",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Catching of `timeout' exception is not allowed in this context. It is permitted only in the response and exception handling part of `call' operations",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("operation `catch(timeout)'' cannot have a from caluse",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("operation `catch(timeout)'' cannot have a sender redirect",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `akarmi' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `myPeer' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `myVar' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Timeout exception cannot be cought on a port of type `@statement_tests.reply_PT', which does not have any outgoing signatures that allow blocking calls",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Value redirect cannot be used without signature and parameter",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the template",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `akarmi' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `myPeer' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `myVar' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Value redirect cannot be used without signature and parameter",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'*' cannot be used as a matching template for a `catch' operation",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the template",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("operation `any port.catch' cannot have value redirect",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("operation`any port.catch' cannot have parameter",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `akarmi' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `myPeer' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `myVar' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Procedure-based operation `catch' is not applicable to a message-based port of type `@statement_tests.testPortName_PT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Port type `@statement_tests.testPortonlyIn2' does not have any outgoing signatures that support exceptions",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'*' cannot be used as a matching template for a `catch' operation",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Procedure-based operation `catch' is not applicable to a message-based port of type `@statement_tests.testPortName_PT'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'*' cannot be used as a matching template for a `catch' operation",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Port type `@statement_tests.testPortonlyIn2' does not have any outgoing signatures that support exceptions",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'*' cannot be used as a matching template for a `catch' operation",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `@statement_tests.S_ProvedureSignatureID2' does not have exceptions",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `@statement_tests.S_ProvedureSignatureID2' is not present on the outgoing list of port type `@statement_tests.testPortName2_PT'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Port type `@statement_tests.testPortonlyOut3' does not have any outgoing signatures that support exceptions",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'*' cannot be used as a matching template for a `catch' operation",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Port type `@statement_tests.testPortonlyOut3' does not have any outgoing signatures that support exceptions",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `@statement_tests.S_ProvedureSignatureID2' does not have exceptions",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'*' cannot be used as a matching template for a `catch' operation",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type `boolean' is not present on the exception list of signature `@statement_tests.S_ProvedureSignatureID3'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'*' cannot be used as a matching template for a `catch' operation",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Generic wildcard `*' cannot be used for signature `@statement_tests.S_ProvedureSignatureID3'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of catch parameter is signature `@statement_tests.S_ProvedureSignatureID3', which cannot be an exception type",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type `@statement_tests.S_ProvedureSignatureID3' is not present on the exception list of signature `@statement_tests.S_ProvedureSignatureID3'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'*' cannot be used as a matching template for a `catch' operation",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of catch parameter is port type `@statement_tests.reply_PT', which cannot be an exception type",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type `@statement_tests.reply_PT' is not present on the exception list of signature `@statement_tests.S_ProvedureSignatureID3'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'*' cannot be used as a matching template for a `catch' operation",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of catch parameter is the `default'' type, which cannot be an exception type",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type `default' is not present on the exception list of signature `@statement_tests.S_ProvedureSignatureID3'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the template",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `akarmi' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `myPeer' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `myVar' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Value redirect cannot be used without signature and parameter",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 54;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Procedure-based operation `call' is not applicable to a message-based port of type `@statement_tests.callTest_MessagePort1'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Cannot determine the type of the signature",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature type `@statement_tests.s_callTest_extra' is not present on the outgoing list of port type `@statement_tests.callTest_ProcPort1'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature type `integer' is not present on the outgoing list of port type `@statement_tests.callTest_ProcPort1'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of call parameter is `integer' type, which is not a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Port type `@statement_tests.callTest_ProcPort2' does not have any outgoing signature types",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `statement_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A call of a non-blocking signature `@statement_tests.s_callTest_nonblocking' cannot have a call timer",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A call of a non-blocking signature `@statement_tests.s_callTest_nonblocking' cannot use the `nowait' keyword",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A call of a non-blocking signature `@statement_tests.s_callTest_nonblocking' cannot have response and exception handling part",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Catching of `timeout' exception is not allowed because the previous `call' operation does not have timer",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("A call with `nowait' keyword cannot have response and exception handling part",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The `getreply' operation refers to a different port than the previous `call' statement: `Port0_PT' was expected instead of `Port0'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `Port0' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Response and exception handling part is missing from blocking call operation",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The timer operand of the `call' operation should be a float value",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("The call timer has negative duration: `-5'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: The type of the operand should be a component type instead of `boolean'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("Port type `@statement_tests.callTest_ProcPort2' does not have any outgoing signatures that support reply",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The `getreply' operation refers to a different port than the previous `call' statement: `Port0_PT' was expected instead of `Port2_PT'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Operation `any port.getreply' cannot have parameter",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The `getreply' operation must refer to the same port as the previous `call' statement: `Port0_PT' was expected instead of `any port'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The `getreply' operation refers to a different signature than the previous `call' statement: `@statement_tests.callTest_MyProc' was expected instead of `@statement_tests.s_t_callTest_StopPTC'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Port type `@statement_tests.callTest_ProcPort2' does not have any outgoing signatures that support exceptions",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The `catch' operation refers to a different port than the previous `call' statement: `Port0_PT' was expected instead of `Port2_PT'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("operation`any port.catch' cannot have parameter",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The `catch' operation must refer to the same port as the previous `call' statement: `Port0_PT' was expected instead of `any port'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature `@statement_tests.s_t_callTest_StopPTC' does not have exceptions",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The `catch' operation refers to a different signature than the previous `call' statement: `@statement_tests.callTest_MyProc' was expected instead of `@statement_tests.s_t_callTest_StopPTC'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 8;
		markersToCheck.add(new MarkerToCheck("A definition that has `runs on' clause cannot execute testcases",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 11;
		markersToCheck.add(new MarkerToCheck("A definition that has `runs on' clause cannot execute testcases",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An altstep cannot return a value",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 12;
		markersToCheck.add(new MarkerToCheck("The testcase quard timer has negative duration: `-5.0'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("float value expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `tc_testcaseName2' in module `statement_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a testcase was expected in the argument instead of @statement_tests.f_catchPortTests",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too few parameters: 1 was expected instead of 0",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Infinity can not be used as the testcase quard timer duration",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The testcase quard timer has negative duration: `-Infinity'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Unexpected return value. The function does not have return type",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 7;
		markersToCheck.add(new MarkerToCheck("Too many parameters: 0 was expected instead of 1",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("The testcase quard timer has negative duration: `-5.0'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too many parameters: 0 was expected instead of 1",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("float value expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too many parameters: 0 was expected instead of 1",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `akarmi3' in module `statement_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A value of type testcase was expected in the argument of `derefers()' instead of `@statement_tests.t_altstep'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Infinity can not be used as the testcase quard timer duration",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too many parameters: 0 was expected instead of 1",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The testcase quard timer has negative duration: `-Infinity'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too many parameters: 0 was expected instead of 1",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 8;
		markersToCheck.add(new MarkerToCheck("Missing return value. The function should return a value of type `integer'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A specific value without matching symbols was expected as return value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("integer value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 9;
		markersToCheck.add(new MarkerToCheck("Missing return template. The function should return a template of type `integer'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("integer value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 9;
		markersToCheck.add(new MarkerToCheck("A definition without `runs on' clause cannot call altstep `@statement_tests.as_altstepName', which runs on component type `@statement_tests.componentName_CT'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 9;
		markersToCheck.add(new MarkerToCheck("Reference to a function or altstep was expected instead of @statement_tests.f_function_altstep_instanceTests.<statement_block>.statement_8.def, which cannot be invoked",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The referenced timer `TL_timerName' cannot have actual parameters",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("Runs on clause mismatch: A definition that runs on component type `@statement_tests.componentName_CT2' cannot activate altstep `@statement_tests.as_altstepName', which runs on `@statement_tests.componentName_CT'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too many parameters: 0 was expected instead of 1",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to an altstep was expected in the argument instead of variable `vl_parameter'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The referenced variable `vl_parameter' cannot have actual parameters",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Runs on clause mismatch: A definition that runs on component type `@statement_tests.componentName_CT2' cannot activate altstep `@statement_tests.as_altstepName', which runs on `@statement_tests.componentName_CT'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Too many parameters: 0 was expected instead of 1",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Runs on clause mismatch: A definition that runs on component type `@statement_tests.componentName_CT2' cannot activate altstep `@statement_tests.as_altstepName', which runs on `@statement_tests.componentName_CT'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too many parameters: 0 was expected instead of 2",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 6;
		markersToCheck.add(new MarkerToCheck("A definition without `runs on' clause cannot activate altstep `@statement_tests.as_altstepName', which runs on component type `@statement_tests.componentName_CT'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too many parameters: 0 was expected instead of 1",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 7;
		markersToCheck.add(new MarkerToCheck("Parameter 1 of @statement_tests.f_activate_referredTests.<statement_block>.statement_4 refers to variable `vl_parameter', which is a local definition within a statement block and may have shorter lifespan than the activated default. Only references to variables and timers defined in the component type can be passed to activated defaults",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `parameter' in module `statement_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too few parameters: 1 was expected instead of 0",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to a variable or value parameter was expected for an `inout' value parameter", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Too many parameters: 1 was expected instead of 2",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("the argument of `derefers()' cannot be an altstep reference with 'runs on self' clause",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 15;
		markersToCheck.add(new MarkerToCheck("A definition without `runs on' clause cannot call a value of altstep type `@statement_tests.t_altstep', which runs on component type `@statement_tests.mycomponent'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 11;
		markersToCheck.add(new MarkerToCheck("Label statement is not allowed within an interleave statment",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Repeat statement cannot be used outside alt statements, altsteps or response and exception handling part of call operations",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Repeat statement is not allowed within an interleave statement",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Continue statement cannot be used outside loops",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Return statement is not allowed within an interleave statement",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Goto statement is not allowed within an interleave statement",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invocation of an altstep is not allowed within an interleave statement",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 7;
		markersToCheck.add(new MarkerToCheck("integer value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("The function has return type, but control might leave it without reaching a return statement",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 18;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `vl_ar1' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 42;
		markersToCheck.add(new MarkerToCheck("The function has a return type, but it does not have any return statement",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 9;
		markersToCheck.add(new MarkerToCheck("The function has return type, but control might leave it without reaching a return statement",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 9;
		markersToCheck.add(new MarkerToCheck("The function has return type, but control might leave it without reaching a return statement",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 9;
		markersToCheck.add(new MarkerToCheck("The function has return type, but control might leave it without reaching a return statement",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 9;
		markersToCheck.add(new MarkerToCheck("The function has return type, but control might leave it without reaching a return statement",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 9;
		markersToCheck.add(new MarkerToCheck("The function has return type, but control might leave it without reaching a return statement",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 9;
		markersToCheck.add(new MarkerToCheck("The function has return type, but control might leave it without reaching a return statement",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 21;
		markersToCheck.add(new MarkerToCheck("Setverdict statement is not allowed in the control part",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Component operation is not allowed in the control part",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("There is no visible definition with name `akarmi' in module `statement_tests'", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Component operation is not allowed in the control part",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("There is no visible definition with name `akarmi' in module `statement_tests'", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Component operation is not allowed in the control part",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("There is no visible definition with name `akarmi' in module `statement_tests'", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Component operation is not allowed in the control part",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("There is no visible definition with name `akarmi' in module `statement_tests'", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Port operation is not allowed in the control part", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `akarmi' in module `statement_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Port operation is not allowed in the control part",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `akarmi' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Port operation is not allowed in the control part",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `akarmi' in module `statement_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("The testcase quard timer has negative duration: `-5.0'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `tc_testcaseName2' in module `statement_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a testcase was expected in the argument instead of @statement_tests.f_catchPortTests",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too few parameters: 1 was expected instead of 0",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Return statement cannot be used in the control part. It is alowed only in functions and altsteps", lineNum++, IMarker.SEVERITY_ERROR));
		}

		return markersToCheck;
	}

	private ArrayList<MarkerToCheck> subtype_tests_ttcn_initializer() {
		//subtype_tests.ttcn
		ArrayList<MarkerToCheck> markersToCheck = new ArrayList<MarkerToCheck>(754);
		int lineNum = 24;
		markersToCheck.add(new MarkerToCheck("Range subtyping is not allowed for type `boolean'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		int i = 0;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Range subtyping is not allowed for type `boolean'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Reference to a constant value was expected instead of the return value of function `@subtype_tests.f_booleanFunction'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Length subtyping is not allowed for type `boolean'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Length subtyping is not allowed for type `boolean'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The upper boundary of the length restriction (2) cannot be smaller than the lower boundary 3",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Length subtyping is not allowed for type `boolean'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The lower boundary of the length restriction must be a non-negative integer value instead of -4",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The upper boundary of the length restriction must be a non-negative integer value instead of -3",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The lower boundary should be less than `2,147,483,647' instead of `4,444,444,444,444,444,444'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Range subtyping is not allowed for type `boolean'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("boolean value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 5;
		for (i = 0; i < 11; i++) {
			markersToCheck.add(new MarkerToCheck("false is not a valid value for type `boolean' which has subtype (true)", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		for (i = 0; i < 11; i++) {
			markersToCheck.add(new MarkerToCheck("false is not a valid value for type `boolean' which has subtype (true)", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 10;
		markersToCheck.add(new MarkerToCheck("lower boundary is bigger than upper boundary in integer subtype range",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `rnd()'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("lower boundary is bigger than upper boundary in integer subtype range",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Length subtyping is not allowed for type `integer'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The upper boundary of the length restriction (4) cannot be smaller than the lower boundary 8",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Length subtyping is not allowed for type `integer'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The lower boundary of the length restriction must be a non-negative integer value instead of -4",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The upper boundary of the length restriction must be a non-negative integer value instead of -3",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The lower boundary should be less than `2,147,483,647' instead of `4,444,444,444,444,444,444'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("integer value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("10 is not a valid value for type `integer' which has subtype (-4..4)",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("1 is not a valid value for type `integer' which has subtype (4)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("-1 is not a valid value for type `integer' which has subtype (4)",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("1 is not a valid value for type `integer' which has subtype (4)", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("0 is not a valid value for type `integer' which has subtype (4)",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("1 is not a valid value for type `integer' which has subtype (4)",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("0 is not a valid value for type `integer' which has subtype (4)", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("48 is not a valid value for type `integer' which has subtype (4)",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("1 is not a valid value for type `integer' which has subtype (4)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("0 is not a valid value for type `integer' which has subtype (4)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("1 is not a valid value for type `integer' which has subtype (4)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("0 is not a valid value for type `integer' which has subtype (4)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("40 is not a valid value for type `integer' which has subtype (4)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("16777256 is not a valid value for type `integer' which has subtype (4)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("111 is not a valid value for type `integer' which has subtype (4)",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("10 is not a valid value for type `integer' which has subtype (-4..4)",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("1 is not a valid value for type `integer' which has subtype (4)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("-1 is not a valid value for type `integer' which has subtype (4)",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("1 is not a valid value for type `integer' which has subtype (4)", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("0 is not a valid value for type `integer' which has subtype (4)",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("1 is not a valid value for type `integer' which has subtype (4)",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("0 is not a valid value for type `integer' which has subtype (4)", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("48 is not a valid value for type `integer' which has subtype (4)",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("1 is not a valid value for type `integer' which has subtype (4)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("0 is not a valid value for type `integer' which has subtype (4)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("1 is not a valid value for type `integer' which has subtype (4)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("0 is not a valid value for type `integer' which has subtype (4)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("40 is not a valid value for type `integer' which has subtype (4)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("16777256 is not a valid value for type `integer' which has subtype (4)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("131 is not a valid value for type `integer' which has subtype (4)",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 9;
		markersToCheck.add(new MarkerToCheck("lower boundary is bigger than upper boundary in float subtype range",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `rnd()'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("lower boundary is bigger than upper boundary in float subtype range",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Length subtyping is not allowed for type `float'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Length subtyping is not allowed for type `float'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The upper boundary of the length restriction (4) cannot be smaller than the lower boundary 8",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Length subtyping is not allowed for type `float'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The lower boundary of the length restriction must be a non-negative integer value instead of -4",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The upper boundary of the length restriction must be a non-negative integer value instead of -3",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The lower boundary should be less than `2,147,483,647' instead of `4,444,444,444,444,444,444'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("float value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("10.0 is not a valid value for type `float' which has subtype (-4.0, -3.0, -2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0)",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("1.0 is not a valid value for type `float' which has subtype (4.0)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("-1.0 is not a valid value for type `float' which has subtype (4.0)",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("1.0 is not a valid value for type `float' which has subtype (4.0)", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("0.0 is not a valid value for type `float' which has subtype (4.0)",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("1.0 is not a valid value for type `float' which has subtype (4.0)", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("0.0 is not a valid value for type `float' which has subtype (4.0)",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("10.0 is not a valid value for type `float' which has subtype (-4.0, -3.0, -2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0)",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("1.0 is not a valid value for type `float' which has subtype (4.0)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("-1.0 is not a valid value for type `float' which has subtype (4.0)",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("1.0 is not a valid value for type `float' which has subtype (4.0)", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("0.0 is not a valid value for type `float' which has subtype (4.0)",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("1.0 is not a valid value for type `float' which has subtype (4.0)", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("0.0 is not a valid value for type `float' which has subtype (4.0)",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 16;
		markersToCheck.add(new MarkerToCheck("Range subtyping is not allowed for type `bitstring'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a constant value was expected instead of the return value of function `@subtype_tests.f_bitstringFunction'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Range subtyping is not allowed for type `bitstring'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The upper boundary of the length restriction (4) cannot be smaller than the lower boundary 8",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The lower boundary of the length restriction must be a non-negative integer value instead of -4",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The upper boundary of the length restriction must be a non-negative integer value instead of -3",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The lower boundary should be less than `2,147,483,647' instead of `4,444,444,444,444,444,444'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("bitstring value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("'111'B is not a valid value for type `bitstring' which has subtype length(2)",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'111'B is not a valid value for type `bitstring' which has subtype length(10)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'111'B is not a valid value for type `bitstring' which has subtype length(2)",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("'000'B is not a valid value for type `bitstring' which has subtype length(2)", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("'00000'B is not a valid value for type `bitstring' which has subtype length(2)", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("'0'B is not a valid value for type `bitstring' which has subtype length(2)",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'000000'B is not a valid value for type `bitstring' which has subtype length(2)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'00000000000000000000'B is not a valid value for type `bitstring' which has subtype length(2)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'000000000000000000000000'B is not a valid value for type `bitstring' which has subtype length(2)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'000000'B is not a valid value for type `bitstring' which has subtype length(2)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'0'B is not a valid value for type `bitstring' which has subtype length(2)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'000000'B is not a valid value for type `bitstring' which has subtype length(2)",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("'111'B is not a valid value for type `bitstring' which has subtype length(2)",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'111'B is not a valid value for type `bitstring' which has subtype length(10)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'111'B is not a valid value for type `bitstring' which has subtype length(2)",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("'000'B is not a valid value for type `bitstring' which has subtype length(2)", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("'00000'B is not a valid value for type `bitstring' which has subtype length(2)", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("'0'B is not a valid value for type `bitstring' which has subtype length(2)",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'000000'B is not a valid value for type `bitstring' which has subtype length(2)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'00000000000000000000'B is not a valid value for type `bitstring' which has subtype length(2)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'000000000000000000000000'B is not a valid value for type `bitstring' which has subtype length(2)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'000000'B is not a valid value for type `bitstring' which has subtype length(2)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'0'B is not a valid value for type `bitstring' which has subtype length(2)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'000000'B is not a valid value for type `bitstring' which has subtype length(2)",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 16;
		markersToCheck.add(new MarkerToCheck("Range subtyping is not allowed for type `hexstring'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a constant value was expected instead of the return value of function `@subtype_tests.f_hexstringFunction'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Range subtyping is not allowed for type `hexstring'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The upper boundary of the length restriction (4) cannot be smaller than the lower boundary 8",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The lower boundary of the length restriction must be a non-negative integer value instead of -4",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The upper boundary of the length restriction must be a non-negative integer value instead of -3",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The lower boundary should be less than `2,147,483,647' instead of `4,444,444,444,444,444,444'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("hexstring value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("'111'H is not a valid value for type `hexstring' which has subtype ('00'H, '01'H, '10'H, '11'H)",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'111'H is not a valid value for type `hexstring' which has subtype length(10)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'FFF'H is not a valid value for type `hexstring' which has subtype ('00'H, '01'H, '10'H, '11'H)",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("'000'H is not a valid value for type `hexstring' which has subtype ('00'H, '01'H, '10'H, '11'H)", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("'00000'H is not a valid value for type `hexstring' which has subtype ('00'H, '01'H, '10'H, '11'H)", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("'0'H is not a valid value for type `hexstring' which has subtype ('00'H, '01'H, '10'H, '11'H)",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'000000'H is not a valid value for type `hexstring' which has subtype ('00'H, '01'H, '10'H, '11'H)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'0'H is not a valid value for type `hexstring' which has subtype ('00'H, '01'H, '10'H, '11'H)",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("'000000'H is not a valid value for type `hexstring' which has subtype ('00'H, '01'H, '10'H, '11'H)", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("'0'H is not a valid value for type `hexstring' which has subtype ('00'H, '01'H, '10'H, '11'H)",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'000000'H is not a valid value for type `hexstring' which has subtype ('00'H, '01'H, '10'H, '11'H)",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("'111'H is not a valid value for type `hexstring' which has subtype ('00'H, '01'H, '10'H, '11'H)",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'111'H is not a valid value for type `hexstring' which has subtype length(10)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'FFF'H is not a valid value for type `hexstring' which has subtype ('00'H, '01'H, '10'H, '11'H)",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("'000'H is not a valid value for type `hexstring' which has subtype ('00'H, '01'H, '10'H, '11'H)", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("'00000'H is not a valid value for type `hexstring' which has subtype ('00'H, '01'H, '10'H, '11'H)", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("'0'H is not a valid value for type `hexstring' which has subtype ('00'H, '01'H, '10'H, '11'H)",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'000000'H is not a valid value for type `hexstring' which has subtype ('00'H, '01'H, '10'H, '11'H)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'0'H is not a valid value for type `hexstring' which has subtype ('00'H, '01'H, '10'H, '11'H)",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("'000000'H is not a valid value for type `hexstring' which has subtype ('00'H, '01'H, '10'H, '11'H)", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("'0'H is not a valid value for type `hexstring' which has subtype ('00'H, '01'H, '10'H, '11'H)",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'000000'H is not a valid value for type `hexstring' which has subtype ('00'H, '01'H, '10'H, '11'H)",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 15;
		markersToCheck.add(new MarkerToCheck("Range subtyping is not allowed for type `octetstring'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Reference to a constant value was expected instead of the return value of function `@subtype_tests.f_octetstringFunction'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Range subtyping is not allowed for type `octetstring'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The upper boundary of the length restriction (4) cannot be smaller than the lower boundary 8",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The lower boundary of the length restriction must be a non-negative integer value instead of -4",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The upper boundary of the length restriction must be a non-negative integer value instead of -3",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The lower boundary should be less than `2,147,483,647' instead of `4,444,444,444,444,444,444'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("octetstring value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("'1111'O is not a valid value for type `octetstring' which has subtype ('00'O, '01'O, '10'O, '11'O)",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'1111'O is not a valid value for type `octetstring' which has subtype length(10)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'FFFF'O is not a valid value for type `octetstring' which has subtype ('00'O, '01'O, '10'O, '11'O)",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("'0000'O is not a valid value for type `octetstring' which has subtype ('00'O, '01'O, '10'O, '11'O)", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("'000000'O is not a valid value for type `octetstring' which has subtype ('00'O, '01'O, '10'O, '11'O)", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("'0000'O is not a valid value for type `octetstring' which has subtype ('00'O, '01'O, '10'O, '11'O)",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'00000000'O is not a valid value for type `octetstring' which has subtype ('00'O, '01'O, '10'O, '11'O)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("''O is not a valid value for type `octetstring' which has subtype ('00'O, '01'O, '10'O, '11'O)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'30'O is not a valid value for type `octetstring' which has subtype ('00'O, '01'O, '10'O, '11'O)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("''O is not a valid value for type `octetstring' which has subtype ('00'O, '01'O, '10'O, '11'O)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'000000'O is not a valid value for type `octetstring' which has subtype ('00'O, '01'O, '10'O, '11'O)",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("'000100'O is not a valid value for type `octetstring' which has subtype ('00'O, '01'O, '10'O, '11'O)",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("'1111'O is not a valid value for type `octetstring' which has subtype ('00'O, '01'O, '10'O, '11'O)",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'1111'O is not a valid value for type `octetstring' which has subtype length(10)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'FFFF'O is not a valid value for type `octetstring' which has subtype ('00'O, '01'O, '10'O, '11'O)",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("'0000'O is not a valid value for type `octetstring' which has subtype ('00'O, '01'O, '10'O, '11'O)", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("'000000'O is not a valid value for type `octetstring' which has subtype ('00'O, '01'O, '10'O, '11'O)", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("'0000'O is not a valid value for type `octetstring' which has subtype ('00'O, '01'O, '10'O, '11'O)",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'00000000'O is not a valid value for type `octetstring' which has subtype ('00'O, '01'O, '10'O, '11'O)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("''O is not a valid value for type `octetstring' which has subtype ('00'O, '01'O, '10'O, '11'O)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'30'O is not a valid value for type `octetstring' which has subtype ('00'O, '01'O, '10'O, '11'O)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("''O is not a valid value for type `octetstring' which has subtype ('00'O, '01'O, '10'O, '11'O)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("'000000'O is not a valid value for type `octetstring' which has subtype ('00'O, '01'O, '10'O, '11'O)",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("'000100'O is not a valid value for type `octetstring' which has subtype ('00'O, '01'O, '10'O, '11'O)",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 13;
		markersToCheck.add(new MarkerToCheck("lower boundary of charstring subtype range must be a single element string",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 7;
		markersToCheck.add(new MarkerToCheck("lower boundary is bigger than upper boundary in charstring subtype range",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Reference to a constant value was expected instead of the return value of function `@subtype_tests.f_charstringFunction'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The upper boundary of the length restriction (4) cannot be smaller than the lower boundary 8",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The lower boundary of the length restriction must be a non-negative integer value instead of -4",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The upper boundary of the length restriction must be a non-negative integer value instead of -3",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The lower boundary should be less than `2,147,483,647' instead of `4,444,444,444,444,444,444'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("This string value cannot contain multiple-byte characters, but it has quadruple char(50,0,0,0) at index 0",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("\"error\" is not a valid value for type `charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"something\")",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"z\" is not a valid value for type `charstring' which has subtype (a..k)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"kar\" is not a valid value for type `charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"something\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"abc\" is not a valid value for type `charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"something\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"\" is not a valid value for type `charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"something\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"5.500000\" is not a valid value for type `charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"something\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"\" is not a valid value for type `charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"something\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"01\" is not a valid value for type `charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"something\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"\" is not a valid value for type `charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"something\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"\" is not a valid value for type `charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"something\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"5\" is not a valid value for type `charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"something\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"acbearmi\" is not a valid value for type `charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"something\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"(\" is not a valid value for type `charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"something\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"subtype_tests\" is not a valid value for type `charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"something\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("\"subtype_tests.ttcn\" is not a valid value for type `charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"something\")", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("\"405\" is not a valid value for type `charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"something\")",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"subtype_tests\" is not a valid value for type `charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"something\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("\"f_charstringconstsubFunction\" is not a valid value for type `charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"something\")",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("\"error\" is not a valid value for type `charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"something\")",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"z\" is not a valid value for type `charstring' which has subtype (a..k)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"kar\" is not a valid value for type `charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"something\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"abc\" is not a valid value for type `charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"something\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"\" is not a valid value for type `charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"something\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"5.500000\" is not a valid value for type `charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"something\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"\" is not a valid value for type `charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"something\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"01\" is not a valid value for type `charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"something\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"\" is not a valid value for type `charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"something\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"\" is not a valid value for type `charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"something\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"5\" is not a valid value for type `charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"something\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"acbearmi\" is not a valid value for type `charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"something\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"(\" is not a valid value for type `charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"something\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"subtype_tests\" is not a valid value for type `charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"something\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("\"subtype_tests.ttcn\" is not a valid value for type `charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"something\")", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("\"431\" is not a valid value for type `charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"something\")",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"t_charstring28\" is not a valid value for type `charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"something\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 22;
		markersToCheck.add(new MarkerToCheck("lower boundary is bigger than upper boundary in universal charstring subtype range",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("lower boundary of universal charstring subtype range must be a single element string",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate definition with name `FaultyUniversalCharstring4' was first declared here",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("lower boundary is bigger than upper boundary in universal charstring subtype range",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate definition with name `FaultyUniversalCharstring5' was first declared here",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("lower boundary is bigger than upper boundary in universal charstring subtype range",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate definition with name `FaultyUniversalCharstring6' was first declared here",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("lower boundary is bigger than upper boundary in universal charstring subtype range",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate definition with name `FaultyUniversalCharstring7' was first declared here",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("lower boundary is bigger than upper boundary in universal charstring subtype range",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate definition with name `FaultyUniversalCharstring7' was declared here again",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("lower boundary of universal charstring subtype range must be a single element string",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate definition with name `FaultyUniversalCharstring7' was declared here again",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("upper boundary of universal charstring subtype range must be a single element string",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate definition with name `FaultyUniversalCharstring4' was declared here again",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("lower boundary of universal charstring subtype range must be a single element string",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate definition with name `FaultyUniversalCharstring5' was declared here again",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("lower boundary of universal charstring subtype range must be a single element string",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate definition with name `FaultyUniversalCharstring6' was declared here again",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("lower boundary of universal charstring subtype range must be a single element string",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate definition with name `FaultyUniversalCharstring7' was declared here again",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("lower boundary of universal charstring subtype range must be a single element string",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("Reference to a constant value was expected instead of the return value of function `@subtype_tests.f_universalcharstringFunction'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Universal character string value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The upper boundary of the length restriction (4) cannot be smaller than the lower boundary 8",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The lower boundary of the length restriction must be a non-negative integer value instead of -4",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The upper boundary of the length restriction must be a non-negative integer value instead of -3",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The lower boundary should be less than `2,147,483,647' instead of `4,444,444,444,444,444,444'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("Universal character string value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("\"error\" is not a valid value for type `universal charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"n\", \"something\")",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"z\" is not a valid value for type `universal charstring' which has subtype (\"a\"..\"k\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"kar\" is not a valid value for type `universal charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"n\", \"something\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"abc\" is not a valid value for type `universal charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"n\", \"something\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"\" is not a valid value for type `universal charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"n\", \"something\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"5.500000\" is not a valid value for type `universal charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"n\", \"something\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"\" is not a valid value for type `universal charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"n\", \"something\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"01\" is not a valid value for type `universal charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"n\", \"something\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"\" is not a valid value for type `universal charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"n\", \"something\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("\"\" is not a valid value for type `universal charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"n\", \"something\")", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("\"5\" is not a valid value for type `universal charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"n\", \"something\")",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"acbearmi\" is not a valid value for type `universal charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"n\", \"something\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"(\" is not a valid value for type `universal charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"n\", \"something\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"subtype_tests\" is not a valid value for type `universal charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"n\", \"something\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("\"subtype_tests.ttcn\" is not a valid value for type `universal charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"n\", \"something\")", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("\"494\" is not a valid value for type `universal charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"n\", \"something\")",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"subtype_tests\" is not a valid value for type `universal charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"n\", \"something\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("\"f_universalcharstringconstsubFunction\" is not a valid value for type `universal charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"n\", \"something\")",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("\"error\" is not a valid value for type `universal charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"n\", \"something\")",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"z\" is not a valid value for type `universal charstring' which has subtype (\"a\"..\"k\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"kar\" is not a valid value for type `universal charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"n\", \"something\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"abc\" is not a valid value for type `universal charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"n\", \"something\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"\" is not a valid value for type `universal charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"n\", \"something\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"5.500000\" is not a valid value for type `universal charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"n\", \"something\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"\" is not a valid value for type `universal charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"n\", \"something\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"01\" is not a valid value for type `universal charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"n\", \"something\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"\" is not a valid value for type `universal charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"n\", \"something\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("\"\" is not a valid value for type `universal charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"n\", \"something\")", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("\"5\" is not a valid value for type `universal charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"n\", \"something\")",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"acbearmi\" is not a valid value for type `universal charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"n\", \"something\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"(\" is not a valid value for type `universal charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"n\", \"something\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"subtype_tests\" is not a valid value for type `universal charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"n\", \"something\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("\"subtype_tests.ttcn\" is not a valid value for type `universal charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"n\", \"something\")", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("\"520\" is not a valid value for type `universal charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"n\", \"something\")",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("\"t_universalcharstring28\" is not a valid value for type `universal charstring' which has subtype (\"a\", \"b\", \"c\", \"d\", \"n\", \"something\")",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 19;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Range subtyping is not allowed for type `@subtype_tests.recordType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Reference to a constant value was expected instead of the return value of function `@subtype_tests.f_recordFunction'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Range subtyping is not allowed for type `@subtype_tests.recordType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Length subtyping is not allowed for type `@subtype_tests.recordType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Length subtyping is not allowed for type `@subtype_tests.recordType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The upper boundary of the length restriction (4) cannot be smaller than the lower boundary 8",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Length subtyping is not allowed for type `@subtype_tests.recordType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The lower boundary of the length restriction must be a non-negative integer value instead of -4",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The upper boundary of the length restriction must be a non-negative integer value instead of -3",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The lower boundary should be less than `2,147,483,647' instead of `4,444,444,444,444,444,444'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 9; i++) {
			markersToCheck.add(new MarkerToCheck("sequence value was expected for type `@subtype_tests.recordType'", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("{field1 := 1, field2 := 3} is not a valid value for type `@subtype_tests.recordType' which has subtype ({field1 := 1, field2 := 1}, {field1 := 1, field2 := 2}, {field1 := 2, field2 := 1}, {field1 := 2, field2 := 2})",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 23;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Range subtyping is not allowed for type `@subtype_tests.setType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Reference to a constant value was expected instead of the return value of function `@subtype_tests.f_setFunction'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Range subtyping is not allowed for type `@subtype_tests.setType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Length subtyping is not allowed for type `@subtype_tests.setType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Length subtyping is not allowed for type `@subtype_tests.setType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The upper boundary of the length restriction (4) cannot be smaller than the lower boundary 8",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Length subtyping is not allowed for type `@subtype_tests.setType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The lower boundary of the length restriction must be a non-negative integer value instead of -4",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The upper boundary of the length restriction must be a non-negative integer value instead of -3",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The lower boundary should be less than `2,147,483,647' instead of `4,444,444,444,444,444,444'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 9; i++) {
			markersToCheck.add(new MarkerToCheck("set value was expected for type `@subtype_tests.setType'", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("{field1 := 1, field2 := 3} is not a valid value for type `@subtype_tests.setType' which has subtype ({field1 := 1, field2 := 1}, {field1 := 1, field2 := 2}, {field1 := 2, field2 := 1}, {field1 := 2, field2 := 2})",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 22;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Range subtyping is not allowed for type `@subtype_tests.unionType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Reference to a constant value was expected instead of the return value of function `@subtype_tests.f_unionFunction'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Range subtyping is not allowed for type `@subtype_tests.unionType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Length subtyping is not allowed for type `@subtype_tests.unionType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Length subtyping is not allowed for type `@subtype_tests.unionType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The upper boundary of the length restriction (4) cannot be smaller than the lower boundary 8",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Length subtyping is not allowed for type `@subtype_tests.unionType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The lower boundary of the length restriction must be a non-negative integer value instead of -4",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The upper boundary of the length restriction must be a non-negative integer value instead of -3",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The lower boundary should be less than `2,147,483,647' instead of `4,444,444,444,444,444,444'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 9; i++) {
			markersToCheck.add(new MarkerToCheck("Union value was expected for type `@subtype_tests.unionType'", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("{field1 := 10} is not a valid value for type `@subtype_tests.unionType' which has subtype ({field1 := 1}, {field1 := 2}, {field1 := 3}, {field1 := 4})",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 22;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Range subtyping is not allowed for type `@subtype_tests.recordofType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Reference to a constant value was expected instead of the return value of function `@subtype_tests.f_recordofFunction'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Range subtyping is not allowed for type `@subtype_tests.recordofType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The upper boundary of the length restriction (4) cannot be smaller than the lower boundary 8",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The lower boundary of the length restriction must be a non-negative integer value instead of -4",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The upper boundary of the length restriction must be a non-negative integer value instead of -3",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The lower boundary should be less than `2,147,483,647' instead of `4,444,444,444,444,444,444'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 9; i++) {
			markersToCheck.add(new MarkerToCheck("record of value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("{1, 10} is not a valid value for type `@subtype_tests.recordofType' which has subtype ({1, 1}, {1, 2}, {1, 3}, {1, 4}, {1, 5})",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("{1, 1} is not a valid value for type `@subtype_tests.recordofType' which has subtype length(4..8)",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("At least 4 elements must be present in the list",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 19;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Range subtyping is not allowed for type `@subtype_tests.setofType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Reference to a constant value was expected instead of the return value of function `@subtype_tests.f_setofFunction'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Range subtyping is not allowed for type `@subtype_tests.setofType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The upper boundary of the length restriction (4) cannot be smaller than the lower boundary 8",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The lower boundary of the length restriction must be a non-negative integer value instead of -4",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The upper boundary of the length restriction must be a non-negative integer value instead of -3",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The lower boundary should be less than `2,147,483,647' instead of `4,444,444,444,444,444,444'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 9; i++) {
			markersToCheck.add(new MarkerToCheck("set of value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("{1, 10} is not a valid value for type `@subtype_tests.setofType' which has subtype ({1, 1}, {1, 2}, {1, 3}, {1, 4}, {1, 5})",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("{1, 1} is not a valid value for type `@subtype_tests.setofType' which has subtype length(4..8)",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("At least 4 elements must be present in the list",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 14;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Range subtyping is not allowed for type `verdicttype'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Reference to a constant value was expected instead of the return value of function `@subtype_tests.f_verdictFunction'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Range subtyping is not allowed for type `verdicttype'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Length subtyping is not allowed for type `verdicttype'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Length subtyping is not allowed for type `verdicttype'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The upper boundary of the length restriction (4) cannot be smaller than the lower boundary 8",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Length subtyping is not allowed for type `verdicttype'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The lower boundary of the length restriction must be a non-negative integer value instead of -4",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The upper boundary of the length restriction must be a non-negative integer value instead of -3",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The lower boundary should be less than `2,147,483,647' instead of `4,444,444,444,444,444,444'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 9; i++) {
			markersToCheck.add(new MarkerToCheck("Verdict value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("none is not a valid value for type `verdicttype' which has subtype (pass, fail, error)",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("pass is not a valid value for type `verdicttype' which has subtype (none)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("ERROR is not a valid value for type `verdicttype' which has subtype (none)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("fail is not a valid value for type `verdicttype' which has subtype (none)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("inconc is not a valid value for type `verdicttype' which has subtype (none)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `getverdict'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("none is not a valid value for type `verdicttype' which has subtype (pass, fail, error)",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("pass is not a valid value for type `verdicttype' which has subtype (none)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("ERROR is not a valid value for type `verdicttype' which has subtype (none)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("fail is not a valid value for type `verdicttype' which has subtype (none)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("inconc is not a valid value for type `verdicttype' which has subtype (none)",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 21;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Range subtyping is not allowed for type `@subtype_tests.enumerationType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Reference to a constant value was expected instead of the return value of function `@subtype_tests.f_enumFunction'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Range subtyping is not allowed for type `@subtype_tests.enumerationType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Length subtyping is not allowed for type `@subtype_tests.enumerationType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Length subtyping is not allowed for type `@subtype_tests.enumerationType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The upper boundary of the length restriction (4) cannot be smaller than the lower boundary 8",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Length subtyping is not allowed for type `@subtype_tests.enumerationType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The lower boundary of the length restriction must be a non-negative integer value instead of -4",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The upper boundary of the length restriction must be a non-negative integer value instead of -3",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The lower boundary should be less than `2,147,483,647' instead of `4,444,444,444,444,444,444'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 9; i++) {
			markersToCheck.add(new MarkerToCheck("Enumerated value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `item10' in module `subtype_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("item4 is not a valid value for type `@subtype_tests.enumerationType' which has subtype (item1, item2, item3)",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `item10' in module `subtype_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("item4 is not a valid value for type `@subtype_tests.enumerationType' which has subtype (item1, item2, item3)",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 19;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Range subtyping is not allowed for type `@subtype_tests.functionType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Reference to a constant value was expected instead of the return value of function `@subtype_tests.f_functionTypeFunction'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Range subtyping is not allowed for type `@subtype_tests.functionType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Length subtyping is not allowed for type `@subtype_tests.functionType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Length subtyping is not allowed for type `@subtype_tests.functionType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The upper boundary of the length restriction (4) cannot be smaller than the lower boundary 8",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Length subtyping is not allowed for type `@subtype_tests.functionType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The lower boundary of the length restriction must be a non-negative integer value instead of -4",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The upper boundary of the length restriction must be a non-negative integer value instead of -3",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The lower boundary should be less than `2,147,483,647' instead of `4,444,444,444,444,444,444'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to a function or external function was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("refers(function) is not a valid value for type `@subtype_tests.functionType' which has subtype (refers(function), refers(function), refers(function))",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("refers(function) is not a valid value for type `@subtype_tests.functionType' which has subtype (refers(function), refers(function), refers(function))",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 20;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Range subtyping is not allowed for type `@subtype_tests.altstepType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Reference to a constant value was expected instead of the return value of function `@subtype_tests.f_altstepTypeFunction'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Range subtyping is not allowed for type `@subtype_tests.altstepType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Length subtyping is not allowed for type `@subtype_tests.altstepType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Length subtyping is not allowed for type `@subtype_tests.altstepType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The upper boundary of the length restriction (4) cannot be smaller than the lower boundary 8",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Length subtyping is not allowed for type `@subtype_tests.altstepType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The lower boundary of the length restriction must be a non-negative integer value instead of -4",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The upper boundary of the length restriction must be a non-negative integer value instead of -3",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The lower boundary should be less than `2,147,483,647' instead of `4,444,444,444,444,444,444'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to an altstep was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("refers(altstep) is not a valid value for type `@subtype_tests.altstepType' which has subtype (refers(altstep), refers(altstep), refers(altstep))",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("refers(altstep) is not a valid value for type `@subtype_tests.altstepType' which has subtype (refers(altstep), refers(altstep), refers(altstep))",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 22;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Range subtyping is not allowed for type `@subtype_tests.testcaseType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Reference to a constant value was expected instead of the return value of function `@subtype_tests.f_testcaseTypeFunction'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Range subtyping is not allowed for type `@subtype_tests.testcaseType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Length subtyping is not allowed for type `@subtype_tests.testcaseType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Length subtyping is not allowed for type `@subtype_tests.testcaseType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The upper boundary of the length restriction (4) cannot be smaller than the lower boundary 8",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Length subtyping is not allowed for type `@subtype_tests.testcaseType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The lower boundary of the length restriction must be a non-negative integer value instead of -4",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The upper boundary of the length restriction must be a non-negative integer value instead of -3",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The lower boundary should be less than `2,147,483,647' instead of `4,444,444,444,444,444,444'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to a testcase was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("refers(testcase) is not a valid value for type `@subtype_tests.testcaseType' which has subtype (refers(testcase), refers(testcase), refers(testcase))",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("refers(testcase) is not a valid value for type `@subtype_tests.testcaseType' which has subtype (refers(testcase), refers(testcase), refers(testcase))",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 10;
		markersToCheck.add(new MarkerToCheck("Default type `default' cannot be the type of a signature parameter",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Port type `@subtype_tests.testPortName_PT' cannot be the type of a signature parameter",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature type `@subtype_tests.S_signature_good' cannot be the type of a signature parameter",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Port type `@subtype_tests.testPortName_PT' cannot be the return type of a signature",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Default type `default' cannot be on the exception list of a signature",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Port type `@subtype_tests.testPortName_PT' cannot be on the exception list of a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature type `@subtype_tests.S_signature_good' cannot be on the exception list of a signature",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Default type `default' cannot be the type of a signature parameter",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Port type `@subtype_tests.testPortName_PT' cannot be the type of a signature parameter",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature type `@subtype_tests.S_signature_good' cannot be the type of a signature parameter",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature type `@subtype_tests.S_signature_good' cannot be the return type of a signature",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Default type `default' cannot be on the exception list of a signature",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Port type `@subtype_tests.testPortName_PT' cannot be on the exception list of a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature type `@subtype_tests.S_signature_good' cannot be on the exception list of a signature",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Default type `default' cannot be the type of a signature parameter",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Port type `@subtype_tests.testPortName_PT' cannot be the type of a signature parameter",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature type `@subtype_tests.S_signature_good' cannot be the type of a signature parameter",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Default type `default' cannot be on the exception list of a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Port type `@subtype_tests.testPortName_PT' cannot be on the exception list of a signature",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature type `@subtype_tests.S_signature_good' cannot be on the exception list of a signature",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("Port type `@subtype_tests.testPortName_PT' cannot be embedded into another type",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature type `@subtype_tests.S_signature_good' cannot be embedded into another type",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 15;
		markersToCheck.add(new MarkerToCheck("Length subtyping is not allowed for type `objid'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Length subtyping is not allowed for type `objid'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Range subtyping is not allowed for type `objid'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Reference to a constant value was expected instead of the return value of function `@subtype_tests.f_objidFunction'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Range subtyping is not allowed for type `objid'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Length subtyping is not allowed for type `objid'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The upper boundary of the length restriction (4) cannot be smaller than the lower boundary 8",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Length subtyping is not allowed for type `objid'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The lower boundary of the length restriction must be a non-negative integer value instead of -4",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The upper boundary of the length restriction must be a non-negative integer value instead of -3",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The lower boundary should be less than `2,147,483,647' instead of `4,444,444,444,444,444,444'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 9; i++) {
			markersToCheck.add(new MarkerToCheck("objid value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 10;
		markersToCheck.add(new MarkerToCheck("integer value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 8;
		markersToCheck.add(new MarkerToCheck("{f1 := 1} is not a valid value for type `@subtype_tests.myu1' which has subtype ({f1 := 0}, {f2 := \"\"})",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("Reference to a constant value was expected instead of the return value of function `@subtype_tests.f_f1'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("TTCN-3 subtype constraints are not applicable to type `integer[3 .. 5]'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("Reference `mycomp2' must refer to a type which has the same root type as this type",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 12;
		markersToCheck.add(new MarkerToCheck("The subtype restriction is not a subset of the restriction on the parent type. Subtype length(0..2) is not subset of subtype ('1111111111111'B) union length(1..2)",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("''B is not a valid value for type `bitstring' which has subtype ('1111111111111'B) union length(1..2)",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("The subtype restriction is not a subset of the restriction on the parent type. Subtype (11..22) is not subset of subtype (1..20, 25..26, 30..40)",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 23;
		markersToCheck.add(new MarkerToCheck("11 is not a valid value for type `integer' which has subtype (0..8)",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 8;
		markersToCheck.add(new MarkerToCheck("\"huhu\" is not a valid value for type `charstring' which has subtype ((((\"abc\", \"efg\") union length(5..6)) union (\"haha\", \"xy\", \"zw\")) union length(8))",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("Reference to a non-existent field `bread' in type `@subtype_tests.RRR'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("'ABCD'H is not a valid value for type `hexstring' which has subtype length(0..1) except ('A'H, 'F'H)",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 6;
		markersToCheck.add(new MarkerToCheck("'10101010101'B is not a valid value for type `bitstring' which has subtype length(0..3) except ('11'B, '111'B)",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("Circular reference chain: `type reference: @subtype_tests.II1 -> type reference: @subtype_tests.II2 -> type reference: @subtype_tests.II1'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Circular reference chain: `type reference: @subtype_tests.II2 -> type reference: @subtype_tests.II1 -> type reference: @subtype_tests.II2'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 21;
		markersToCheck.add(new MarkerToCheck("'ABCD'O is not a valid value for type `octetstring' which has subtype length(0..1) except ('12'O, '36'O)",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 12;
		markersToCheck.add(new MarkerToCheck("Subtype mismatch: subtype (1..3) has no common value with subtype (10..11)",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 14;
		markersToCheck.add(new MarkerToCheck("NaN is not a valid value for type `float' which has subtype (-Infinity..Infinity)",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("1.0 is not a valid value for type `float' which has subtype (NaN)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Subtype mismatch: subtype (NaN) has no common value with subtype (-Infinity..Infinity)",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("invalid lower boundary, -infinity cannot be excluded from an integer subtype range",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("invalid upper boundary, infinity cannot be excluded from an integer subtype range",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("lower boundary is bigger than upper boundary in integer subtype range",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("10 is not a valid value for type `integer' which has subtype (2..9, 11..19)",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The subtype restriction is not a subset of the restriction on the parent type. Subtype (2..19) is not subset of subtype (2..9, 11..19)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type referenced by `MyInt4' does not have a subtype",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("lower boundary is bigger than upper boundary in charstring subtype range", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("\"c\" is not a valid value for type `charstring' which has subtype (b, d..y)",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("\"0\" is not a valid value for type `charstring' which has subtype (1..9, b..y)",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("!-infinity is not a valid upper boundary",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("!infinity is not a valid lower boundary",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("lower boundary cannot be not_a_number in float subtype range",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("-Infinity is not a valid value for type `float' which has subtype (!-Infinity..!Infinity)",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Infinity is not a valid value for type `float' which has subtype (!-Infinity..!Infinity)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("NaN is not a valid value for type `float' which has subtype (!-Infinity..!Infinity)",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("0.0 is not a valid value for type `float' which has subtype (-Infinity..!0.0, !0.0..Infinity)",  lineNum, IMarker.SEVERITY_ERROR));

		return markersToCheck;
	}

	private ArrayList<MarkerToCheck> template_assignment_tests_ttcn_initializer() {
		//template_assignment_tests.ttcn
		ArrayList<MarkerToCheck> markersToCheck = new ArrayList<MarkerToCheck>(4674);
		int lineNum = 19;
		markersToCheck.add(new MarkerToCheck("Value 1 is already assigned to `item1'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate enumeration identifier `item2' was first declared here",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate numeric value 1 for enumeration `item2'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate enumeration identifier `item2' was declared here again",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 47;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `guard2' in module `template_assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `timerName' in module `template_assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 18;
		markersToCheck.add(new MarkerToCheck("The function has a return type, but it does not have any return statement",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 27;
		markersToCheck.add(new MarkerToCheck("integer value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `integer'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		int i = 0;
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("integer value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `integer'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 73; i++) {
			markersToCheck.add(new MarkerToCheck("integer value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `integer' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("integer value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `integer' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("integer value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Length restriction cannot be used in template of type `integer'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 22;
		markersToCheck.add(new MarkerToCheck("float value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `float'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("float value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `float'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 10; i++) {
			markersToCheck.add(new MarkerToCheck("float value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `float'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 74; i++) {
			markersToCheck.add(new MarkerToCheck("float value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `float' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("float value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Length restriction cannot be used in template of type `float'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `float' does not have fields",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `float' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to field `nonExi' of omit value `@template_assignment_tests.f_floatValueTests.<statement_block>.statement_127.block.statement_1.def'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Accessing an element with index of omit value `@template_assignment_tests.f_floatValueTests.<statement_block>.statement_127.block.statement_1.def'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid array element reference: type `float' cannot be indexed",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type `float' can not be indexed",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `float' does not have fields.",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to field `nonExi' of omit value `@template_assignment_tests.f_floatValueTests.<statement_block>.statement_127.block.statement_1.def'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 32;
		markersToCheck.add(new MarkerToCheck("boolean value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `boolean'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("boolean value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `boolean'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("boolean value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `boolean'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 64; i++) {
			markersToCheck.add(new MarkerToCheck("boolean value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `boolean' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("boolean value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 6; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `boolean' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("boolean value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Length restriction cannot be used in template of type `boolean'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 25;
		markersToCheck.add(new MarkerToCheck("bitstring value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `bitstring'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("bitstring value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `bitstring'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 10; i++) {
			markersToCheck.add(new MarkerToCheck("bitstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `bitstring'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 60; i++) {
			markersToCheck.add(new MarkerToCheck("bitstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `bitstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("bitstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `bitstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("bitstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There are fewer (1) elements than it is allowed by the length restriction (at least 2)",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There are more ( 6) elements than it is allowed by the length restriction (5)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to template variable `vt_i' can not be indexed",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 26;
		markersToCheck.add(new MarkerToCheck("hexstring value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `hexstring'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("hexstring value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `hexstring'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 10; i++) {
			markersToCheck.add(new MarkerToCheck("hexstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `hexstring'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 59; i++) {
			markersToCheck.add(new MarkerToCheck("hexstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `hexstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("hexstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `hexstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("hexstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There are fewer (1) elements than it is allowed by the length restriction (at least 2)",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There are more ( 6) elements than it is allowed by the length restriction (5)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to template variable `vt_i' can not be indexed",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 27;
		markersToCheck.add(new MarkerToCheck("octetstring value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `octetstring'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("octetstring value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `octetstring'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 10; i++) {
			markersToCheck.add(new MarkerToCheck("octetstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `octetstring'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 58; i++) {
			markersToCheck.add(new MarkerToCheck("octetstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `octetstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("octetstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `octetstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("octetstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There are fewer (1) elements than it is allowed by the length restriction (at least 2)",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There are more ( 6) elements than it is allowed by the length restriction (5)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to template variable `vt_i' can not be indexed",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 15;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Verdict value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `verdict'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 9; i++) {
			markersToCheck.add(new MarkerToCheck("Verdict value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `verdict'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 9; i++) {
			markersToCheck.add(new MarkerToCheck("Verdict value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `verdict'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 63; i++) {
			markersToCheck.add(new MarkerToCheck("Verdict value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `verdicttype' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Verdict value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `verdicttype' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Verdict value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Length restriction cannot be used in template of type `verdicttype'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 14;
		markersToCheck.add(new MarkerToCheck("Enumerated value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for enumerated type",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 9; i++) {
			markersToCheck.add(new MarkerToCheck("Enumerated value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for enumerated type",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 9; i++) {
			markersToCheck.add(new MarkerToCheck("Enumerated value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for enumerated type",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 63; i++) {
			markersToCheck.add(new MarkerToCheck("Enumerated value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@template_assignment_tests.myenum1' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Enumerated value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@template_assignment_tests.myenum1' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Enumerated value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Length restriction cannot be used in template of type `@template_assignment_tests.myenum1'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 10;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `default'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("Default value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `default'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 9; i++) {
			markersToCheck.add(new MarkerToCheck("Default value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `default'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 63; i++) {
			markersToCheck.add(new MarkerToCheck("Default value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `default' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Default value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `default' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Default value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Length restriction cannot be used in template of type `default'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 24;
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `charstring'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `charstring'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `charstring'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 53; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `charstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `charstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There are fewer (1) elements than it is allowed by the length restriction (at least 2)",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There are more ( 6) elements than it is allowed by the length restriction (5)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to template variable `vt_i' can not be indexed",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 24;
		markersToCheck.add(new MarkerToCheck("Universal character string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `universal charstring'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("Universal character string value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `universal charstring'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("Universal character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `universal charstring'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 50; i++) {
			markersToCheck.add(new MarkerToCheck("Universal character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Universal character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `universal charstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Universal character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `universal charstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Universal character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There are fewer (1) elements than it is allowed by the length restriction (at least 2)",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There are more ( 6) elements than it is allowed by the length restriction (5)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to template variable `vt_i' can not be indexed",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 16;
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `@template_assignment_tests.mycomponent'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("Component value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `@template_assignment_tests.mycomponent'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 9; i++) {
			markersToCheck.add(new MarkerToCheck("Component value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `@template_assignment_tests.mycomponent'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 63; i++) {
			markersToCheck.add(new MarkerToCheck("Component value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@template_assignment_tests.mycomponent' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Component value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 10; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@template_assignment_tests.mycomponent' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Component value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Length restriction cannot be used in template of type `@template_assignment_tests.mycomponent'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 14;
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("integer value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 9; i++) {
			markersToCheck.add(new MarkerToCheck("record of value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for recordof type `@template_assignment_tests.myrecordofType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("record of value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 72; i++) {
			markersToCheck.add(new MarkerToCheck("record of value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@template_assignment_tests.myrecordofType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("record of value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@template_assignment_tests.myrecordofType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("record of value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("A non-negative integer value was expected for indexing type `@template_assignment_tests.myrecordofType' instead of `-1'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An integer value less than `2,147,483,647' was expected for indexing type `@template_assignment_tests.myrecordofType' instead of `99,999,999,999,999,999'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate index value `1' for component `4' and `2'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a value was expected instead of timer `TL_t'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There are fewer (1) elements than it is allowed by the length restriction (at least 2)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There are more ( 6) elements than it is allowed by the length restriction (5)",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 23;
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("integer value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 9; i++) {
			markersToCheck.add(new MarkerToCheck("set of value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for setof type `@template_assignment_tests.mysetofType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("set of value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 72; i++) {
			markersToCheck.add(new MarkerToCheck("set of value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@template_assignment_tests.mysetofType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("set of value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@template_assignment_tests.mysetofType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("set of value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("A non-negative integer value was expected for indexing type `@template_assignment_tests.mysetofType' instead of `-1'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An integer value less than `2,147,483,647' was expected for indexing type `@template_assignment_tests.mysetofType' instead of `99,999,999,999,999,999'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate index value `1' for component `4' and `2'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a value was expected instead of timer `TL_t'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("There are fewer (1) elements than it is allowed by the length restriction (at least 2)", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There are more ( 6) elements than it is allowed by the length restriction (5)",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There are more (at least 6) elements than it is allowed by the length restriction (5)",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 11;
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to non-existing field `field3' in set template for type `@template_assignment_tests.mysetType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate field `field1' in template",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field1' is already given here",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("integer value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Value list notation is not allowed for set type `@template_assignment_tests.mysetType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 9; i++) {
			markersToCheck.add(new MarkerToCheck("set value was expected for type `@template_assignment_tests.mysetType'", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("integer value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("set value was expected for type `@template_assignment_tests.mysetType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 72; i++) {
			markersToCheck.add(new MarkerToCheck("set value was expected for type `@template_assignment_tests.mysetType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@template_assignment_tests.mysetType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("set value was expected for type `@template_assignment_tests.mysetType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@template_assignment_tests.mysetType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("set value was expected for type `@template_assignment_tests.mysetType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Length restriction cannot be used in template of type `@template_assignment_tests.mysetType'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 12;
		markersToCheck.add(new MarkerToCheck("Too many elements in value list notation for type `@template_assignment_tests.myrecordType': 3 was expected instead of 5",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 9; i++) {
			markersToCheck.add(new MarkerToCheck("sequence value was expected for type `@template_assignment_tests.myrecordType'", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to non-existing field `field4' in record template for type `@template_assignment_tests.myrecordType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate field `field1' in template",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field1' cannot appear after field `field1' in a template for record type `@template_assignment_tests.myrecordType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field1' is already given here",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("integer value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Field `field1' cannot appear after field `field2' in a template for record type `@template_assignment_tests.myrecordType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("integer value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("sequence value was expected for type `@template_assignment_tests.myrecordType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 72; i++) {
			markersToCheck.add(new MarkerToCheck("sequence value was expected for type `@template_assignment_tests.myrecordType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@template_assignment_tests.myrecordType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("sequence value was expected for type `@template_assignment_tests.myrecordType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@template_assignment_tests.myrecordType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("sequence value was expected for type `@template_assignment_tests.myrecordType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Length restriction cannot be used in template of type `@template_assignment_tests.myrecordType'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 12;
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("value list notation cannot be used for union type `@template_assignment_tests.myunionType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 9; i++) {
			markersToCheck.add(new MarkerToCheck("Union value was expected for type `@template_assignment_tests.myunionType'", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to non-existent field `field4' in union template for type `@template_assignment_tests.myunionType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A template for union type must contain exactly one selected field",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("integer value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context", lineNum, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("A template for union type must contain exactly one selected field", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("value list notation cannot be used for union type `@template_assignment_tests.myunionType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("A template for union type must contain exactly one selected field",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("integer value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Union value was expected for type `@template_assignment_tests.myunionType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 72; i++) {
			markersToCheck.add(new MarkerToCheck("Union value was expected for type `@template_assignment_tests.myunionType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@template_assignment_tests.myunionType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Union value was expected for type `@template_assignment_tests.myunionType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@template_assignment_tests.myunionType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Union value was expected for type `@template_assignment_tests.myunionType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Length restriction cannot be used in template of type `@template_assignment_tests.myunionType'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 13;
		markersToCheck.add(new MarkerToCheck("Too few elements in the array template: 3 was expected instead of 2",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too many elements in the array template: 3 was expected instead of 4",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("integer value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Too many elements in the array template: 3 was expected instead of 10",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 9; i++) {
			markersToCheck.add(new MarkerToCheck("Array value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `integer[3]'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Array value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 72; i++) {
			markersToCheck.add(new MarkerToCheck("Array value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `integer[3]' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Array value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `integer[3]' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Array value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There number of elements allowed by the length restriction (at most 5) contradicts the array size (3)",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 11;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `@template_assignment_tests.t_function'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to a function or external function was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 5; i++) {
			markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `@template_assignment_tests.t_function'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `@template_assignment_tests.t_function'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `@template_assignment_tests.t_function'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to a function or external function was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 69; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to a function or external function was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@template_assignment_tests.t_function' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to a function or external function was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@template_assignment_tests.t_function' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to a function or external function was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Type `@template_assignment_tests.t_function' does not have a `runs on' clause, but function runs on `@template_assignment_tests.mycomponent'.",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Length restriction cannot be used in template of type `@template_assignment_tests.t_function'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 13;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `@template_assignment_tests.t_altstep'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to an altstep was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 5; i++) {
			markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `@template_assignment_tests.t_altstep'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `@template_assignment_tests.t_altstep'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `@template_assignment_tests.t_altstep'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 72; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to an altstep was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@template_assignment_tests.t_altstep' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to an altstep was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@template_assignment_tests.t_altstep' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to an altstep was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Length restriction cannot be used in template of type `@template_assignment_tests.t_altstep'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 13;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `@template_assignment_tests.t_testcase'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to a testcase was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 5; i++) {
			markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `@template_assignment_tests.t_testcase'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `@template_assignment_tests.t_testcase'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `@template_assignment_tests.t_testcase'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 72; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to a testcase was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@template_assignment_tests.t_testcase' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to a testcase was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@template_assignment_tests.t_testcase' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to a testcase was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Length restriction cannot be used in template of type `@template_assignment_tests.t_testcase'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 17;
		markersToCheck.add(new MarkerToCheck("Duplicate parameter `Par3' in template for signature `@template_assignment_tests.mySignature'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Parameter `Par3' is already given here",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to non-existent parameter `nonExi' in template for signature `@template_assignment_tests.mySignature'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `Par2' cannot appear after parameter `Par3' in signature value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("integer value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too many elements in value list notation for type `@template_assignment_tests.mySignature': 3 was expected instead of 5",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature template is incomplete, because the inout parameter `Par3' is missing",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature template is incomplete, because the in parameter `Par1' and the out parameter `Par2' is missing",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature template is incomplete, because the inout parameter `Par3' is missing",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate parameter `Par3' in template for signature `@template_assignment_tests.mySignature'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Parameter `Par3' is already given here",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("integer value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too many elements in value list notation for type `@template_assignment_tests.mySignature': 3 was expected instead of 5",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 9; i++) {
			markersToCheck.add(new MarkerToCheck("sequence value was expected for type `@template_assignment_tests.mySignature'", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Reference to non-existent parameter `field2' in template for signature `@template_assignment_tests.mySignature'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature template is incomplete, because the in parameter `Par1' and the out parameter `Par2' is missing",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature template is incomplete, because the inout parameter `Par3' is missing",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to non-existent parameter `field4' in template for signature `@template_assignment_tests.mySignature'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature template is incomplete, because the in parameter `Par1' and the out parameter `Par2' is missing",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature template is incomplete, because the inout parameter `Par3' is missing",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to non-existent parameter `field1' in template for signature `@template_assignment_tests.mySignature'", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Signature template is incomplete, because the in parameter `Par1' and the out parameter `Par2' is missing",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature template is incomplete, because the inout parameter `Par3' is missing",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to non-existent parameter `field1' in template for signature `@template_assignment_tests.mySignature'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to non-existent parameter `field2' in template for signature `@template_assignment_tests.mySignature'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature template is incomplete, because the in parameter `Par1' and the out parameter `Par2' is missing",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature template is incomplete, because the inout parameter `Par3' is missing",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to non-existent parameter `field1' in template for signature `@template_assignment_tests.mySignature'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to non-existent parameter `field2' in template for signature `@template_assignment_tests.mySignature'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature template is incomplete, because the in parameter `Par1' and the out parameter `Par2' is missing",  lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Signature template is incomplete, because the inout parameter `Par3' is missing", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Signature template is incomplete, because the in parameter `Par1' and the out parameter `Par2' is missing",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature template is incomplete, because the inout parameter `Par3' is missing",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to non-existent parameter `field1' in template for signature `@template_assignment_tests.mySignature'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to non-existent parameter `field2' in template for signature `@template_assignment_tests.mySignature'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature template is incomplete, because the in parameter `Par1' and the out parameter `Par2' is missing",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Signature template is incomplete, because the inout parameter `Par3' is missing",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("sequence value was expected for type `@template_assignment_tests.mySignature'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 72; i++) {
			markersToCheck.add(new MarkerToCheck("sequence value was expected for type `@template_assignment_tests.mySignature'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@template_assignment_tests.mySignature' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("sequence value was expected for type `@template_assignment_tests.mySignature'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@template_assignment_tests.mySignature' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("sequence value was expected for type `@template_assignment_tests.mySignature'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Length restriction cannot be used in template of type `@template_assignment_tests.mySignature'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Length restriction is not allowed in a template for signature `@template_assignment_tests.mySignature'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 8;
		for (i = 0; i < 11; i++) {
			markersToCheck.add(new MarkerToCheck("NULL value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Incompatible value: `NULL' was expected",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("NULL value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `NULL'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `NULL'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("NULL value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("NULL value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `NULL'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 54; i++) {
			markersToCheck.add(new MarkerToCheck("NULL value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `NULL' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("NULL value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `NULL' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("NULL value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Length restriction cannot be used in template of type `NULL'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("NULL value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 22;
		markersToCheck.add(new MarkerToCheck("BMP string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `BMPString'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `BMPString'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("BMP string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("BMP string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `BMPString'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 50; i++) {
			markersToCheck.add(new MarkerToCheck("BMP string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("BMP string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `BMPString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("BMP string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `BMPString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("BMP string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There are more ( 6) elements than it is allowed by the length restriction (5)",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 22;
		markersToCheck.add(new MarkerToCheck("General string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `GeneralString'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `GeneralString'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("General string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("General string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `GeneralString'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 50; i++) {
			markersToCheck.add(new MarkerToCheck("General string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("General string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `GeneralString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("General string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `GeneralString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("General string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 21;
		markersToCheck.add(new MarkerToCheck("Graphicl string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `GraphicString'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `GraphicString'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Graphicl string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Graphicl string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `GraphicString'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 50; i++) {
			markersToCheck.add(new MarkerToCheck("Graphicl string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Graphicl string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `GraphicString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Graphicl string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `GraphicString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Graphicl string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 21;
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `IA5String'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `IA5String'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `IA5String'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 50; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `IA5String' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `IA5String' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 21;
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `NumericString'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `NumericString'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `NumericString'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 50; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `NumericString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `NumericString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 24;
		markersToCheck.add(new MarkerToCheck("octetstring value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `octetstring'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `octetstring'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("octetstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 6; i++) {
			markersToCheck.add(new MarkerToCheck("octetstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `octetstring'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 58; i++) {
			markersToCheck.add(new MarkerToCheck("octetstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `octetstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("octetstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `octetstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("octetstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 21;
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `VisibleString'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `VisibleString'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `VisibleString'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 50; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `VisibleString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `VisibleString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 21;
		markersToCheck.add(new MarkerToCheck("Teletex string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `TeletexString'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `TeletexString'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Teletex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Teletex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `TeletexString'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 50; i++) {
			markersToCheck.add(new MarkerToCheck("Teletex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Teletex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `TeletexString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Teletex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `TeletexString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Teletex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 21;
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `PrintableString'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `PrintableString'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `PrintableString'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 50; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `PrintableString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `PrintableString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 21;
		markersToCheck.add(new MarkerToCheck("Teletex string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `TeletexString'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `TeletexString'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Teletex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Teletex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `TeletexString'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 50; i++) {
			markersToCheck.add(new MarkerToCheck("Teletex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Teletex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `TeletexString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Teletex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `TeletexString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Teletex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 21;
		markersToCheck.add(new MarkerToCheck("Universal string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `UniversalString'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `UniversalString'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Universal string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Universal string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `UniversalString'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 50; i++) {
			markersToCheck.add(new MarkerToCheck("Universal string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Universal string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `UniversalString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Universal string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `UniversalString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Universal string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 21;
		markersToCheck.add(new MarkerToCheck("UTF8 string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `UTF8String'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `UTF8String'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("UTF8 string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("UTF8 string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `UTF8String'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 50; i++) {
			markersToCheck.add(new MarkerToCheck("UTF8 string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("UTF8 string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `UTF8String' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("UTF8 string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `UTF8String' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("UTF8 string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 21;
		markersToCheck.add(new MarkerToCheck("Videotex string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `VideotexString'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `VideotexString'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Videotex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Videotex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `VideotexString'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 50; i++) {
			markersToCheck.add(new MarkerToCheck("Videotex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Videotex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `VideotexString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Videotex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `VideotexString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Videotex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 21;
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `VisibleString'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `VisibleString'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `VisibleString'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 50; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `VisibleString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `VisibleString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 21;
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `GeneralizedTime'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `GeneralizedTime'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `GeneralizedTime'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 50; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `GeneralizedTime' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `GeneralizedTime' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 21;
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `UTCTime'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `UTCTime'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `UTCTime'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 50; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `UTCTime' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `UTCTime' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 8;
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from template for set type `@ASNTypes.ASNSetType'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("A non-empty set template was expected for type `@ASNTypes.ASNSetType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field1' is missing from template for set type `@ASNTypes.ASNSetType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("General string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field1' is missing from template for set type `@ASNTypes.ASNSetType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from template for set type `@ASNTypes.ASNSetType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to non-existing field `field3' in set template for type `@ASNTypes.ASNSetType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate field `field1' in template",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field1' is already given here",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from template for set type `@ASNTypes.ASNSetType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("INTEGER value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Value list notation is not allowed for set type `@ASNTypes.ASNSetType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("General string value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("INTEGER value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("set value was expected for type `@ASNTypes.ASNSetType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("set value was expected for type `@ASNTypes.ASNSetType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 69; i++) {
			markersToCheck.add(new MarkerToCheck("set value was expected for type `@ASNTypes.ASNSetType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@ASNTypes.ASNSetType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("set value was expected for type `@ASNTypes.ASNSetType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@ASNTypes.ASNSetType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("set value was expected for type `@ASNTypes.ASNSetType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 8;
		markersToCheck.add(new MarkerToCheck("Reference to non-existing field `field3' in record template for type `@ASNTypes.ASNSequenceType'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("Too many elements in value list notation for type `@ASNTypes.ASNSequenceType': 2 was expected instead of 5",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("General string value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to non-existing field `field4' in record template for type `@ASNTypes.ASNSequenceType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate field `field1' in template",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field1' is already given here",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("INTEGER value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Field `field1' cannot appear after field `field2' in a template for record type `@ASNTypes.ASNSequenceType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("General string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too many elements in value list notation for type `@ASNTypes.ASNSequenceType': 2 was expected instead of 3",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("General string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("INTEGER value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("SEQUENCE value was expected for type `@ASNTypes.ASNSequenceType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("SEQUENCE value was expected for type `@ASNTypes.ASNSequenceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 69; i++) {
			markersToCheck.add(new MarkerToCheck("SEQUENCE value was expected for type `@ASNTypes.ASNSequenceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@ASNTypes.ASNSequenceType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("SEQUENCE value was expected for type `@ASNTypes.ASNSequenceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@ASNTypes.ASNSequenceType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("SEQUENCE value was expected for type `@ASNTypes.ASNSequenceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 10;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("value list notation cannot be used for union type `@ASNTypes.ASNChoiceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("General string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to non-existent field `field4' in union template for type `@ASNTypes.ASNChoiceType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A template for union type must contain exactly one selected field",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("INTEGER value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context", lineNum, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("A template for union type must contain exactly one selected field", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("value list notation cannot be used for union type `@ASNTypes.ASNChoiceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("A template for union type must contain exactly one selected field",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("General string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("INTEGER value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Union value was expected for type `@ASNTypes.ASNChoiceType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Union value was expected for type `@ASNTypes.ASNChoiceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 69; i++) {
			markersToCheck.add(new MarkerToCheck("Union value was expected for type `@ASNTypes.ASNChoiceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@ASNTypes.ASNChoiceType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Union value was expected for type `@ASNTypes.ASNChoiceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@ASNTypes.ASNChoiceType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Union value was expected for type `@ASNTypes.ASNChoiceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 83;
		markersToCheck.add(new MarkerToCheck("Reference to a value was expected instead of timer `TL_t'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("The value of first OBJECT IDENTIFIER component must be between 0 and 2 instead of 3",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("The value of second OBJECT IDENTIFIER component must be between 0 and 39 instead of 39", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("value list notation cannot be used for type `objid'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("assignment notation cannot be used for type `objid'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("objid value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("objid value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 69; i++) {
			markersToCheck.add(new MarkerToCheck("objid value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `objid' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("objid value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `objid' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `template_assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("objid value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("indexed assignment notation cannot be used for type `objid'", lineNum++, IMarker.SEVERITY_ERROR));
		}

		return markersToCheck;
	}

	private ArrayList<MarkerToCheck> template_formalparlist_tests_ttcn_initializer() {
		//template_formalparlist_tests.ttcn
		ArrayList<MarkerToCheck> markersToCheck = new ArrayList<MarkerToCheck>(22);
		int lineNum = 27;
		markersToCheck.add(new MarkerToCheck("Reference to a template was expected in the `modifies' definition instead of constant `@template_formalparlist_tests.cg_int'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("The kind of parameter is not the same as in base template `@template_formalparlist_tests.t_integer_descriptiveName': value parameter was expected instead of template parameter",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The modified template has fewer formal parameters than base template `@template_formalparlist_tests.t_integer_descriptiveName': at least 3 parameter was expected instead of 1",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The name of parameter is not the same as in base template `@template_formalparlist_tests.t_integer_descriptiveName': `pl_x' was expected instead of `pl_z'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The type of parameter is not the same as in base template `@template_formalparlist_tests.t_integer_descriptiveName': `integer' was expected instead of `boolean'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("Circular chain of base templates: `@template_formalparlist_tests.t_integer_descriptiveName4 -> @template_formalparlist_tests.t_integer_descriptiveName4'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 16;
		markersToCheck.add(new MarkerToCheck("Not used symbol (`-') doesn't have the corresponding default parameter in the base template",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("Not used symbol (`-') doesn't have the corresponding default parameter in the base template",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("Only modified templates are allowed to use the not used symbol (`-') as the default parameter",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 8;
		markersToCheck.add(new MarkerToCheck("Not used symbol (`-') doesn't have the corresponding default parameter in the base template",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("Not used symbol (`-') doesn't have the corresponding default parameter in the base template",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("Only modified templates are allowed to use the not used symbol (`-') as the default parameter",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 9;
		int i = 0;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Using not used symbol (`-') as the default parameter is allowed only for modified templates", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Using not used symbol (`-') as the default parameter is allowed only for modified templates", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `T' in module `template_formalparlist_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Using not used symbol (`-') as the default parameter is allowed only for modified templates",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `T' in module `template_formalparlist_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Using not used symbol (`-') as the default parameter is allowed only for modified templates",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 7;
		markersToCheck.add(new MarkerToCheck("Too few parameters: at least 1 was expected instaed of 0",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to parameterized definition `t_MyTTemp1' without actual parameter list",  ++lineNum, IMarker.SEVERITY_ERROR));

		return markersToCheck;
	}

	private ArrayList<MarkerToCheck> template_specific_test_ttcn_initializer() {
		//template_specific_test.ttcn
		ArrayList<MarkerToCheck> markersToCheck = new ArrayList<MarkerToCheck>(138);
		int lineNum = 49;
		markersToCheck.add(new MarkerToCheck("Circular reference chain: `template reference: @template_specific_test.t_recursiveTemplate1 -> template reference: @template_specific_test.t_recursiveTemplate1'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Circular reference chain: `template reference: @template_specific_test.t_recursiveTemplate2.field1 -> template reference: @template_specific_test.t_recursiveTemplate2.field1'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Circular reference chain: `template reference: @template_specific_test.t_recursiveTemplate3.field1 -> template reference: @template_specific_test.t_recursiveTemplate3.field1'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Circular reference chain: `template reference: @template_specific_test.t_recursiveTemplate4 -> template reference: @template_specific_test.t_recursiveTemplate4'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Circular reference chain: `template reference: @template_specific_test.t_recursiveTemplate5[0] -> template reference: @template_specific_test.t_recursiveTemplate5[0]'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 13;
		int i = 0;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("integer value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("float value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Universal character string value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("The lower boundary is higher than the upper boundary",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The lower boundary cannot be infinity",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The upper boundary cannot be -infinity",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("The lower boundary is higher than the upper boundary", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The lower boundary must be a charstring value containing a single character.",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The upper boundary must be a charstring value containing a single character.",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The lower boundary must be a universalcharstring value containing a single character.",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The upper boundary must be a universalcharstring value containing a single character.",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Universal character string value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("There are fewer (0) elements than it is allowed by the length restriction (at least 4)",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There are more ( 4) elements than it is allowed by the length restriction (2)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There are fewer (0) elements than it is allowed by the length restriction (at least 4)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There are more ( 4) elements than it is allowed by the length restriction (2)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There are fewer (0) elements than it is allowed by the length restriction (at least 4)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There are more ( 3) elements than it is allowed by the length restriction (2)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There are fewer (0) elements than it is allowed by the length restriction (at least 4)",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There are more ( 6) elements than it is allowed by the length restriction (2)",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Length restriction cannot be used in template of type `boolean'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Length restriction cannot be used in template of type `integer'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Length restriction cannot be used in template of type `float'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Length restriction cannot be used in template of type `@template_specific_test.t_function'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Length restriction cannot be used in template of type `@template_specific_test.t_altstep'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Length restriction cannot be used in template of type `@template_specific_test.t_testcase'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Length restriction cannot be used in template of type `@template_specific_test.mycomponent'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Length restriction cannot be used in template of type `default'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Length restriction cannot be used in template of type `objid'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Template can not be defined for port type `@template_specific_test.testPort'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Generic wildcard `*' cannot be used for signature `@template_specific_test.S_ProvedureSignatureID'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Length restriction cannot be used in template of type `@template_specific_test.S_ProvedureSignatureID'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Length restriction cannot be used in template of type `verdicttype'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 13;
		markersToCheck.add(new MarkerToCheck("Invalid array element reference: type `charstring' cannot be indexed",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("An integer value was expected as index",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference with index to an element of subset match `@template_specific_test.f_template_indexing_test.<statement_block>.statement_3.def'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The index should be an integer value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference with index to an element of subset match `@template_specific_test.f_template_indexing_test.<statement_block>.statement_3.def'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A non-negative integer value was expected as index instead of `-1'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A non-negative integer value was expected instead of -1 for indexing a template of `set of' type `@template_specific_test.mysetofType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Index overflow in a template of `set of' type `@template_specific_test.mysetofType': the index is 10, but the template has only 2 elements",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("An integer value was expected as index",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The index should be an integer value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A non-negative integer value was expected as index instead of `-1'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A non-negative integer value was expected instead of -1 for indexing a template of `sequence of' type `@template_specific_test.myrecordofType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Index overflow in a template of `sequence of' type `@template_specific_test.myrecordofType': the index is 10, but the template has only 2 elements",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("An integer value was expected as index",  lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Integer value expected as array index", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 8;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `field1': type `charstring' does not have fields",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid field reference `field1': type `charstring' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("Reference to a non-existent field `field3' in type `@template_specific_test.myrecordType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to non-existent record field `field3' in type `@template_specific_test.myrecordType'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("Reference to a non-existent field `field3' in type `@template_specific_test.mysetType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to non-existent set field `field3' in type `@template_specific_test.mysetType'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("Reference to a non-existent field `field3' in type `@template_specific_test.myunionType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to non-existent union field `field3' in type `@template_specific_test.myunionType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to inactive field `field2' in a template of union type `@template_specific_test.myunionType'. The active field is `field1'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 14;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Parameter `pl_parameter1' of the template cannot be passed further as `out' or `inout' parameter", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Reference to a template variable or template parameter was expected for an `inout' template parameter instead of value parameter `pl_parameter1'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a template variable or template parameter was expected for an `out' template parameter instead of value parameter `pl_parameter1'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Parameter `pl_parameter2' of the template cannot be passed further as `out' or `inout' parameter", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 24;
		markersToCheck.add(new MarkerToCheck("Circular reference chain: `template reference: @template_specific_test.temp_HM93170_1.f1 -> template reference: @template_specific_test.temp_HM93170_2.f1 -> template reference: @template_specific_test.temp_HM93170_2.f4 -> template reference: @template_specific_test.temp_HM93170_1.f5 -> template reference: @template_specific_test.temp_HM93170_1.f1'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Circular reference chain: `template reference: @template_specific_test.temp_HM93170_1.f5 -> template reference: @template_specific_test.temp_HM93170_1.f1 -> template reference: @template_specific_test.temp_HM93170_2.f1 -> template reference: @template_specific_test.temp_HM93170_2.f4 -> template reference: @template_specific_test.temp_HM93170_1.f5'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Circular reference chain: `template reference: @template_specific_test.temp_HM93170_2.f1 -> template reference: @template_specific_test.temp_HM93170_2.f4 -> template reference: @template_specific_test.temp_HM93170_1.f5 -> template reference: @template_specific_test.temp_HM93170_1.f1 -> template reference: @template_specific_test.temp_HM93170_2.f1'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Circular reference chain: `template reference: @template_specific_test.temp_HM93170_2.f4 -> template reference: @template_specific_test.temp_HM93170_1.f5 -> template reference: @template_specific_test.temp_HM93170_1.f1 -> template reference: @template_specific_test.temp_HM93170_2.f1 -> template reference: @template_specific_test.temp_HM93170_2.f4'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 19;
		markersToCheck.add(new MarkerToCheck("A template body with matching symbols cannot be assigned to a variable",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to template variable `vtc' can not be indexed",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A template body with matching symbols cannot be assigned to a variable",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid array element reference: type `charstring' cannot be indexed",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a variable or template variable was expected instead of `template'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("A template body with matching symbols cannot be assigned to a variable", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Reference to template variable `vtc' can not be indexed",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 6;
		markersToCheck.add(new MarkerToCheck("A template body with matching symbols cannot be assigned to a variable",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to template variable `vtb' can not be indexed",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A template body with matching symbols cannot be assigned to a variable",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid array element reference: type `bitstring' cannot be indexed",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a variable or template variable was expected instead of `template'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("A template body with matching symbols cannot be assigned to a variable", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Reference to template variable `vtb' can not be indexed",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 6;
		markersToCheck.add(new MarkerToCheck("A template body with matching symbols cannot be assigned to a variable",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to template variable `vth' can not be indexed",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A template body with matching symbols cannot be assigned to a variable",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid array element reference: type `hexstring' cannot be indexed",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a variable or template variable was expected instead of `template'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("A template body with matching symbols cannot be assigned to a variable", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Reference to template variable `vth' can not be indexed",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 6;
		markersToCheck.add(new MarkerToCheck("A template body with matching symbols cannot be assigned to a variable",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to template variable `vto' can not be indexed",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A template body with matching symbols cannot be assigned to a variable",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid array element reference: type `octetstring' cannot be indexed",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a variable or template variable was expected instead of `template'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("A template body with matching symbols cannot be assigned to a variable", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Reference to template variable `vto' can not be indexed",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 6;
		markersToCheck.add(new MarkerToCheck("A template body with matching symbols cannot be assigned to a variable",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to template variable `vtu' can not be indexed",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A template body with matching symbols cannot be assigned to a variable",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid array element reference: type `universal charstring' cannot be indexed",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a variable or template variable was expected instead of `template'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("A template body with matching symbols cannot be assigned to a variable", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Reference to template variable `vtu' can not be indexed",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 8;
		markersToCheck.add(new MarkerToCheck("Reference to a value was expected instead of template parameter `pl_i1'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a value was expected instead of `out' template parameter `pl_i2'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a value was expected instead of `inout' template parameter `pl_i3'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a value was expected instead of template parameter `pl_i4'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 8;
		markersToCheck.add(new MarkerToCheck("Reference to a value was expected instead of template `@template_specific_test.t_i100'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a value was expected instead of template module parameter `@template_specific_test.tsp_ti'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a value was expected instead of template `tl_i'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a value was expected instead of template variable `vt_i'",  ++lineNum, IMarker.SEVERITY_ERROR));

		return markersToCheck;
	}

	private ArrayList<MarkerToCheck> value_assignment_tests_ttcn_initializer() {
		//value_assignment_tests.ttcn
		ArrayList<MarkerToCheck> markersToCheck = new ArrayList<MarkerToCheck>();
		int lineNum = 19;
		markersToCheck.add(new MarkerToCheck("Value 1 is already assigned to `item1'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate enumeration identifier `item2' was first declared here",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate numeric value 1 for enumeration `item2'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate enumeration identifier `item2' was declared here again",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 46;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `guard2' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `timerName' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 18;
		markersToCheck.add(new MarkerToCheck("The function has a return type, but it does not have any return statement",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 22;
		markersToCheck.add(new MarkerToCheck("Omit value can only be assigned to an optional field of a record or set value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		int i = 0;
		for (i = 0; i < 77; i++) {
			markersToCheck.add(new MarkerToCheck("integer value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `integer' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("integer value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 15; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `integer' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `integer' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `integer' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `integer' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("integer value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 24;
		markersToCheck.add(new MarkerToCheck("Omit value can only be assigned to an optional field of a record or set value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 88; i++) {
			markersToCheck.add(new MarkerToCheck("float value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `float' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `float' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `float' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `float' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("float value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 29;
		markersToCheck.add(new MarkerToCheck("Omit value can only be assigned to an optional field of a record or set value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 76; i++) {
			markersToCheck.add(new MarkerToCheck("boolean value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `boolean' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("boolean value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `boolean' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `boolean' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `boolean' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `boolean' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("boolean value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 21;
		markersToCheck.add(new MarkerToCheck("Omit value can only be assigned to an optional field of a record or set value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 74; i++) {
			markersToCheck.add(new MarkerToCheck("bitstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `bitstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("bitstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 15; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `bitstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `bitstring' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `bitstring' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `bitstring' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("bitstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The length of the string to be assigned to a string element of type `bitstring' should be 1 instead of 2",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A string element cannot be indexed",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 23;
		markersToCheck.add(new MarkerToCheck("Omit value can only be assigned to an optional field of a record or set value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 73; i++) {
			markersToCheck.add(new MarkerToCheck("hexstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `hexstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("hexstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 15; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `hexstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `hexstring' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `hexstring' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `hexstring' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("hexstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The length of the string to be assigned to a string element of type `hexstring' should be 1 instead of 2",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A string element cannot be indexed",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 24;
		markersToCheck.add(new MarkerToCheck("Omit value can only be assigned to an optional field of a record or set value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 72; i++) {
			markersToCheck.add(new MarkerToCheck("octetstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `octetstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("octetstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 15; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `octetstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `octetstring' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `octetstring' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `octetstring' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("octetstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The length of the string to be assigned to a string element of type `octetstring' should be 1 instead of 2",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A string element cannot be indexed",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 13;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Omit value can only be assigned to an optional field of a record or set value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 76; i++) {
			markersToCheck.add(new MarkerToCheck("Verdict value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `verdicttype' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Verdict value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 15; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `verdicttype' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `verdicttype' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Verdict value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 11;
		markersToCheck.add(new MarkerToCheck("Omit value can only be assigned to an optional field of a record or set value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Enumerated value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 73; i++) {
			markersToCheck.add(new MarkerToCheck("Enumerated value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.myenum1' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Enumerated value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 15; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.myenum1' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.myenum1' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.myenum1' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.myenum1' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Enumerated value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 8;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Omit value can only be assigned to an optional field of a record or set value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Default value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 73; i++) {
			markersToCheck.add(new MarkerToCheck("Default value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `default' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Default value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 15; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `default' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `default' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Default value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 24;
		markersToCheck.add(new MarkerToCheck("Omit value can only be assigned to an optional field of a record or set value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 61; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `charstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `charstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `charstring' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `charstring' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `charstring' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The length of the string to be assigned to a string element of type `charstring' should be 1 instead of 2",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A string element cannot be indexed",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 21;
		markersToCheck.add(new MarkerToCheck("Omit value can only be assigned to an optional field of a record or set value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Universal character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 58; i++) {
			markersToCheck.add(new MarkerToCheck("Universal character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Universal character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `universal charstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Universal character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `universal charstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `universal charstring' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `universal charstring' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `universal charstring' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Universal character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("The length of the string to be assigned to a string element of type `universal charstring' should be 1 instead of 2", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("A string element cannot be indexed",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 14;
		markersToCheck.add(new MarkerToCheck("Omit value can only be assigned to an optional field of a record or set value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Component value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 73; i++) {
			markersToCheck.add(new MarkerToCheck("Component value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.mycomponent' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Component value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 11; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.mycomponent' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.mycomponent' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.mycomponent' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.mycomponent' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Component value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 11;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Omit value can only be assigned to an optional field of a record or set value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("integer value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("record of value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 72; i++) {
			markersToCheck.add(new MarkerToCheck("record of value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.myrecordofType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("record of value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 15; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.myrecordofType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.myrecordofType' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.myrecordofType' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.myrecordofType' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("record of value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 11;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Omit value can only be assigned to an optional field of a record or set value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("integer value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("set of value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 72; i++) {
			markersToCheck.add(new MarkerToCheck("set of value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.mysetofType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("set of value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 15; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.mysetofType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.mysetofType' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.mysetofType' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.mysetofType' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("set of value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("A non-empty value was expected for type `@assignment_tests.mysetType'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from set value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("Assignment of `omit' to mandatory field `field1' of type `@assignment_tests.mysetType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("integer value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Field `field1' is missing from set value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from set value",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a non-existent field `field3' in set value for type `@assignment_tests.mysetType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicated set field `field1'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field1' is already given here",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from set value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("integer value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Value list notation cannot be used for set type `@assignment_tests.mysetType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("integer value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("set value was expected for type `@assignment_tests.mysetType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 72; i++) {
			markersToCheck.add(new MarkerToCheck("set value was expected for type `@assignment_tests.mysetType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.mysetType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("set value was expected for type `@assignment_tests.mysetType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 15; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.mysetType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.mysetType' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.mysetType' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.mysetType' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("set value was expected for type `@assignment_tests.mysetType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("Field `field3' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field3' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("Field `field1' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field3' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Assignment of `omit' to mandatory field `field1' of type `@assignment_tests.myrecordType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("integer value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too many elements in value list notation for type `@assignment_tests.myrecordType': 3 was expected instead of 5",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field1' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field3' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field1' is missing from record value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field3' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a non-existent field `field4' in record value for type `@assignment_tests.myrecordType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicated record field `field1'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field1' is already given here",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field3' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("integer value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Field `field3' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field1' cannot appear after field `field2' in record value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field3' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from record value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field3' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field1' is missing from record value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field3' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field3' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("integer value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("sequence value was expected for type `@assignment_tests.myrecordType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 72; i++) {
			markersToCheck.add(new MarkerToCheck("sequence value was expected for type `@assignment_tests.myrecordType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.myrecordType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("sequence value was expected for type `@assignment_tests.myrecordType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 15; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.myrecordType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.myrecordType' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.myrecordType' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.myrecordType' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("sequence value was expected for type `@assignment_tests.myrecordType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 13;
		markersToCheck.add(new MarkerToCheck("Union value was expected for type `@assignment_tests.myunionType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Omit value can only be assigned to an optional field of a record or set value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("integer value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Union value was expected for type `@assignment_tests.myunionType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a non-existent field `field4' in union value for type `@assignment_tests.myunionType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Only one field was expected in union value instead of 2", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Union value was expected for type `@assignment_tests.myunionType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Only one field was expected in union value instead of 2",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Omit value can only be assigned to an optional field of a record or set value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Union value was expected for type `@assignment_tests.myunionType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 72; i++) {
			markersToCheck.add(new MarkerToCheck("Union value was expected for type `@assignment_tests.myunionType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.myunionType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Union value was expected for type `@assignment_tests.myunionType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 15; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.myunionType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.myunionType' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.myunionType' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.myunionType' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Union value was expected for type `@assignment_tests.myunionType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 12;
		for (i = 0; i < 11; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to a function or external function was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Omit value can only be assigned to an optional field of a record or set value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 72; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to a function or external function was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.t_function' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to a function or external function was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 15; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.t_function' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.t_function' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.t_function' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.t_function' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to a function or external function was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Type `@assignment_tests.t_function' does not have a `runs on' clause, but function runs on `@assignment_tests.mycomponent'.",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 12;
		for (i = 0; i < 11; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to an altstep was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Omit value can only be assigned to an optional field of a record or set value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 72; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to an altstep was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.t_altstep' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to an altstep was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 15; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.t_altstep' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.t_altstep' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.t_altstep' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.t_altstep' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to an altstep was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 10;
		for (i = 0; i < 11; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to a testcase was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Omit value can only be assigned to an optional field of a record or set value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 72; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to a testcase was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.t_testcase' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to a testcase was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 15; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.t_testcase' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.t_testcase' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.t_testcase' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `@assignment_tests.t_testcase' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to a testcase was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 7;
		for (i = 0; i < 11; i++) {
			markersToCheck.add(new MarkerToCheck("NULL value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Incompatible value: `NULL' was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Omit value can only be assigned to an optional field of a record or set value",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("NULL value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("NULL value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 59; i++) {
			markersToCheck.add(new MarkerToCheck("NULL value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `NULL' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("NULL value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `NULL' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `NULL' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `NULL' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `NULL' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("NULL value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 20;
		markersToCheck.add(new MarkerToCheck("Omit value can only be assigned to an optional field of a record or set value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("BMP string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("BMP string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 55; i++) {
			markersToCheck.add(new MarkerToCheck("BMP string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("BMP string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `BMPString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("BMP string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `BMPString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `BMPString' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `BMPString' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `BMPString' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("BMP string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 20;
		markersToCheck.add(new MarkerToCheck("Omit value can only be assigned to an optional field of a record or set value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("General string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("General string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 55; i++) {
			markersToCheck.add(new MarkerToCheck("General string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("General string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `GeneralString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("General string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `GeneralString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `GeneralString' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `GeneralString' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `GeneralString' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("General string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 20;
		markersToCheck.add(new MarkerToCheck("Omit value can only be assigned to an optional field of a record or set value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Graphicl string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Graphicl string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 55; i++) {
			markersToCheck.add(new MarkerToCheck("Graphicl string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Graphicl string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `GraphicString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Graphicl string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `GraphicString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `GraphicString' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `GraphicString' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `GraphicString' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Graphicl string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 20;
		markersToCheck.add(new MarkerToCheck("Omit value can only be assigned to an optional field of a record or set value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 55; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `IA5String' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `IA5String' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `IA5String' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `IA5String' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `IA5String' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 20;
		markersToCheck.add(new MarkerToCheck("Omit value can only be assigned to an optional field of a record or set value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 55; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `NumericString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `NumericString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `NumericString' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `NumericString' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `NumericString' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 23;
		markersToCheck.add(new MarkerToCheck("Omit value can only be assigned to an optional field of a record or set value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("octetstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 65; i++) {
			markersToCheck.add(new MarkerToCheck("octetstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `octetstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("octetstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 15; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `octetstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `octetstring' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `octetstring' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `octetstring' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("octetstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 20;
		markersToCheck.add(new MarkerToCheck("Omit value can only be assigned to an optional field of a record or set value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 55; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `VisibleString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `VisibleString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `VisibleString' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `VisibleString' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `VisibleString' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 20;
		markersToCheck.add(new MarkerToCheck("Omit value can only be assigned to an optional field of a record or set value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Teletex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Teletex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 55; i++) {
			markersToCheck.add(new MarkerToCheck("Teletex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Teletex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `TeletexString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Teletex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `TeletexString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `TeletexString' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `TeletexString' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `TeletexString' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Teletex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 20;
		markersToCheck.add(new MarkerToCheck("Omit value can only be assigned to an optional field of a record or set value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 55; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `PrintableString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `PrintableString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `PrintableString' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `PrintableString' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `PrintableString' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 20;
		markersToCheck.add(new MarkerToCheck("Omit value can only be assigned to an optional field of a record or set value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Teletex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Teletex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 55; i++) {
			markersToCheck.add(new MarkerToCheck("Teletex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Teletex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `TeletexString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Teletex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `TeletexString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `TeletexString' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `TeletexString' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `TeletexString' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Teletex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 20;
		markersToCheck.add(new MarkerToCheck("Omit value can only be assigned to an optional field of a record or set value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Universal string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Universal string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 55; i++) {
			markersToCheck.add(new MarkerToCheck("Universal string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Universal string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `UniversalString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Universal string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `UniversalString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `UniversalString' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `UniversalString' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `UniversalString' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Universal string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 20;
		markersToCheck.add(new MarkerToCheck("Omit value can only be assigned to an optional field of a record or set value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("UTF8 string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("UTF8 string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 55; i++) {
			markersToCheck.add(new MarkerToCheck("UTF8 string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("UTF8 string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `UTF8String' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("UTF8 string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `UTF8String' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `UTF8String' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `UTF8String' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `UTF8String' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("UTF8 string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 20;
		markersToCheck.add(new MarkerToCheck("Omit value can only be assigned to an optional field of a record or set value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Videotex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Videotex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 55; i++) {
			markersToCheck.add(new MarkerToCheck("Videotex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Videotex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `VideotexString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Videotex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `VideotexString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `VideotexString' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `VideotexString' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `VideotexString' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Videotex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 20;
		markersToCheck.add(new MarkerToCheck("Omit value can only be assigned to an optional field of a record or set value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 55; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `VisibleString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `VisibleString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `VisibleString' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `VisibleString' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `VisibleString' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 20;
		markersToCheck.add(new MarkerToCheck("Omit value can only be assigned to an optional field of a record or set value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 55; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `GeneralizedTime' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `GeneralizedTime' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `GeneralizedTime' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `GeneralizedTime' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `GeneralizedTime' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 20;
		markersToCheck.add(new MarkerToCheck("Omit value can only be assigned to an optional field of a record or set value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 55; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `UTCTime' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `UTCTime' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `UTCTime' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `UTCTime' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `UTCTime' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 8;
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from set value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("A non-empty value was expected for type `@ASNTypes.ASNSetType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field1' is missing from set value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("General string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field1' is missing from set value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from set value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a non-existent field `field3' in set value for type `@ASNTypes.ASNSetType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicated set field `field1'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field1' is already given here",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from set value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("INTEGER value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Value list notation cannot be used for set type `@ASNTypes.ASNSetType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("General string value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("INTEGER value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("set value was expected for type `@ASNTypes.ASNSetType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("set value was expected for type `@ASNTypes.ASNSetType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 69; i++) {
			markersToCheck.add(new MarkerToCheck("set value was expected for type `@ASNTypes.ASNSetType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@ASNTypes.ASNSetType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("set value was expected for type `@ASNTypes.ASNSetType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 15; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@ASNTypes.ASNSetType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `@ASNTypes.ASNSetType' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `@ASNTypes.ASNSetType' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `@ASNTypes.ASNSetType' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("set value was expected for type `@ASNTypes.ASNSetType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 8;
		markersToCheck.add(new MarkerToCheck("Reference to a non-existent field `field3' in record value for type `@ASNTypes.ASNSequenceType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from record value",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Field `field1' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too many elements in value list notation for type `@ASNTypes.ASNSequenceType': 2 was expected instead of 5",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field1' is missing from record value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("General string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field1' is missing from record value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a non-existent field `field4' in record value for type `@ASNTypes.ASNSequenceType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicated record field `field1'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field1' is already given here",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("INTEGER value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Field `field1' cannot appear after field `field2' in record value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from record value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("General string value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too many elements in value list notation for type `@ASNTypes.ASNSequenceType': 2 was expected instead of 3",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field1' is missing from record value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("General string value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("INTEGER value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("SEQUENCE value was expected for type `@ASNTypes.ASNSequenceType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("SEQUENCE value was expected for type `@ASNTypes.ASNSequenceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 69; i++) {
			markersToCheck.add(new MarkerToCheck("SEQUENCE value was expected for type `@ASNTypes.ASNSequenceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@ASNTypes.ASNSequenceType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("SEQUENCE value was expected for type `@ASNTypes.ASNSequenceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 15; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@ASNTypes.ASNSequenceType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `@ASNTypes.ASNSequenceType' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `@ASNTypes.ASNSequenceType' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `@ASNTypes.ASNSequenceType' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("SEQUENCE value was expected for type `@ASNTypes.ASNSequenceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 10;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Union value was expected for type `@ASNTypes.ASNChoiceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("General string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a non-existent field `field4' in union value for type `@ASNTypes.ASNChoiceType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Only one field was expected in union value instead of 2", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Union value was expected for type `@ASNTypes.ASNChoiceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Only one field was expected in union value instead of 2",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Omit value can only be assigned to an optional field of a record or set value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Union value was expected for type `@ASNTypes.ASNChoiceType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `assignment_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Union value was expected for type `@ASNTypes.ASNChoiceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 69; i++) {
			markersToCheck.add(new MarkerToCheck("Union value was expected for type `@ASNTypes.ASNChoiceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@ASNTypes.ASNChoiceType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Union value was expected for type `@ASNTypes.ASNChoiceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 15; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@ASNTypes.ASNChoiceType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `@ASNTypes.ASNChoiceType' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `@ASNTypes.ASNChoiceType' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `@ASNTypes.ASNChoiceType' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Union value was expected for type `@ASNTypes.ASNChoiceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 79;
		markersToCheck.add(new MarkerToCheck("Reference to a value was expected instead of timer `TL_t'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		markersToCheck.add(new MarkerToCheck("The value of first OBJECT IDENTIFIER component must be between 0 and 2 instead of 3",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("The value of second OBJECT IDENTIFIER component must be between 0 and 39 instead of 39", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Omit value can only be assigned to an optional field of a record or set value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("objid value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("objid value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 69; i++) {
			markersToCheck.add(new MarkerToCheck("objid value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `objid' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("objid value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 15; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `objid' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `objid' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `objid' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Incompatible value: `objid' was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `assignment_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 6; i++) {
			markersToCheck.add(new MarkerToCheck("objid value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}

		return markersToCheck;
	}

	private ArrayList<MarkerToCheck> value_tests_ttcn_initializer() {
		//value_tests.ttcn
		ArrayList<MarkerToCheck> markersToCheck = new ArrayList<MarkerToCheck>(5293);
		int lineNum = 20;
		markersToCheck.add(new MarkerToCheck("Value 1 is already assigned to `item1'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate enumeration identifier `item2' was first declared here",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate numeric value 1 for enumeration `item2'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate enumeration identifier `item2' was declared here again",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("Using a large integer value (9,999,999,999) as an ENUMERATED/enumerated value is not supported",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 48;
		int i = 0;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExistent' in module `value_tests'", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 16;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `guard2' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `timerName' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 18;
		markersToCheck.add(new MarkerToCheck("The function has a return type, but it does not have any return statement",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 29;
		markersToCheck.add(new MarkerToCheck("Module parameter can not be of function reference type `@value_tests.f_function_type6' which has runs on self clause",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 17;
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("integer value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 70; i++) {
			markersToCheck.add(new MarkerToCheck("integer value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `integer' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("integer value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `integer' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("integer value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `integer' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid array element reference: type `integer' can not be indexed",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `integer' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid array element reference: type `integer' can not be indexed",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type `integer' can not be indexed",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `integer' does not have fields.",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 19;
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("float value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 81; i++) {
			markersToCheck.add(new MarkerToCheck("float value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `float' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("float value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `float' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid array element reference: type `float' can not be indexed",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 24;
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("boolean value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 72; i++) {
			markersToCheck.add(new MarkerToCheck("boolean value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `boolean' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("boolean value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 6; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `boolean' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("boolean value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `boolean' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid array element reference: type `boolean' can not be indexed",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 16;
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("bitstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 67; i++) {
			markersToCheck.add(new MarkerToCheck("bitstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `bitstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("bitstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `bitstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("bitstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `bitstring' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A non-negative integer value was expected instead of -1 for indexing a string element",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate definition with name `cl_i2' was first declared here",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate definition with name `cl_i2' was declared here again",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An integer value was expected as index",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate definition with name `cl_i3' was first declared here",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate definition with name `cl_i3' was declared here again",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Index overflow when accessing a string element: the index is 10, but the string has only 2 elements",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 17;
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("hexstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 66; i++) {
			markersToCheck.add(new MarkerToCheck("hexstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `hexstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("hexstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `hexstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("hexstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `hexstring' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("A non-negative integer value was expected instead of -1 for indexing a string element",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Index overflow when accessing a string element: the index is 10, but the string has only 2 elements",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An integer value was expected as index",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 20;
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("octetstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Type mismatch: a value of type `octetstring' was expected instead of `bitstring'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 65; i++) {
			markersToCheck.add(new MarkerToCheck("octetstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `octetstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("octetstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `octetstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("octetstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `octetstring' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A non-negative integer value was expected instead of -1 for indexing a string element",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("An integer value was expected as index",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Index overflow when accessing a string element: the index is 10, but the string has only 1 elements",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 7;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 6; i++) {
			markersToCheck.add(new MarkerToCheck("Verdict value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 70; i++) {
			markersToCheck.add(new MarkerToCheck("Verdict value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `verdicttype' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Verdict value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `verdicttype' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Verdict value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `verdicttype' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid array element reference: type `verdicttype' can not be indexed",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 8;
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Enumerated value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Enumerated value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 70; i++) {
			markersToCheck.add(new MarkerToCheck("Enumerated value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@value_tests.myenum1' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Enumerated value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@value_tests.myenum1' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Enumerated value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `@value_tests.myenum1' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid array element reference: type `@value_tests.myenum1' can not be indexed",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Default value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Default value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 70; i++) {
			markersToCheck.add(new MarkerToCheck("Default value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `default' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Default value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `default' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Default value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `default' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid array element reference: type `default' can not be indexed",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 21;
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 58; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `charstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `charstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `charstring' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A non-negative integer value was expected instead of -1 for indexing a string element",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("An integer value was expected as index",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Index overflow when accessing a string element: the index is 10, but the string has only 1 elements",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `charstring' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A non-negative integer value was expected as index instead of `-1'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A non-negative integer value was expected instead of -1 for indexing a string element",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("An integer value was expected as index",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The index should be an integer value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `charstring' does not have fields.",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 18;
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Universal character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Universal character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 55; i++) {
			markersToCheck.add(new MarkerToCheck("Universal character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Universal character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `universal charstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Universal character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `universal charstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Universal character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `universal charstring' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A non-negative integer value was expected instead of -1 for indexing a string element",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("An integer value was expected as index",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Index overflow when accessing a string element: the index is 10, but the string has only 1 elements",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 8;
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Component value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Component value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 70; i++) {
			markersToCheck.add(new MarkerToCheck("Component value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@value_tests.mycomponent' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Component value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 10; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@value_tests.mycomponent' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Component value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Referencing fields of a component is not allowed",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Type `@value_tests.mycomponent' can not be indexed", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `@value_tests.mycomponent' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Component value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Component value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Component value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 69; i++) {
			markersToCheck.add(new MarkerToCheck("Component value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@value_tests.mycomponent' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Component value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@value_tests.mycomponent' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 3;
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@value_tests.mycomponent' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Component value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("A integer value less than `2,147,483,647' was expected for indexing type `@value_tests.myrecordofType' instead of `99,999,999,999,999,999'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A non-negative integer value was expected for indexing type `@value_tests.myrecordofType' instead of `-1'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate index value `1' for components 3 and 4",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a value was expected instead of timer `TL_t'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("It's not allowed to create hole(s) in constant values",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Reference to a value was expected instead of timer `TL_t'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A non-negative integer value was expected instead of -1 for indexing a value of `record of' type `@value_tests.myrecordofType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no value assigned to index 999,999,999,999,999,999 in the value `@value_tests.f_recordofValueTests.<statement_block>.statement_112.block.statement_1.def'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no value assigned to index 3 in the value `@value_tests.f_recordofValueTests.<statement_block>.statement_112.block.statement_1.def'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `@value_tests.myrecordofType' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("An integer value was expected as index",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Index overflow in a value of `record of' type `@value_tests.myrecordofType': the index is 999,999,999,999,999, but the value has only 1 elements",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `integer' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Invalid array element reference: type `integer' can not be indexed", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `value_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type `integer' can not be indexed",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 6;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += -1;
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("integer value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("set of value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("set of value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 69; i++) {
			markersToCheck.add(new MarkerToCheck("set of value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `rnd()'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("set of value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 5; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@value_tests.mysetofType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `any component.running'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `all component.running'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `any component.alive'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `all component.alive'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `any timer.running'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `component running'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `alive'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `timer read'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `create()'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `activate()'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("set of value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("A integer value less than `2,147,483,647' was expected for indexing type `@value_tests.mysetofType' instead of `99,999,999,999,999,999'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A non-negative integer value was expected for indexing type `@value_tests.mysetofType' instead of `-1'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate index value `1' for components 3 and 4",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a value was expected instead of timer `TL_t'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("It's not allowed to create hole(s) in constant values",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Reference to a value was expected instead of timer `TL_t'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A non-negative integer value was expected instead of -1 for indexing a value of `set of' type `@value_tests.mysetofType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no value assigned to index 999,999,999,999,999,999 in the value `@value_tests.f_setofValueTests.<statement_block>.statement_112.block.statement_1.def'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no value assigned to index 3 in the value `@value_tests.f_setofValueTests.<statement_block>.statement_112.block.statement_1.def'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `@value_tests.mysetofType' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A non-negative integer value was expected instead of -1 for indexing a value of `set of' type `@value_tests.mysetofType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("An integer value was expected as index",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Index overflow in a value of `set of' type `@value_tests.mysetofType': the index is 10, but the value has only 1 elements",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Index overflow in a value of `set of' type `@value_tests.mysetofType': the index is 999,999,999,999,999,999, but the value has only 1 elements",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("A non-empty value was expected for type `@value_tests.mysetType'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from set value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Field `field1' is missing from set value", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from set value",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a non-existent field `field3' in set value for type `@value_tests.mysetType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicated set field `field1'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field1' is already given here",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from set value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("integer value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Value list notation cannot be used for set type `@value_tests.mysetType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("integer value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("set value was expected for type `@value_tests.mysetType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("set value was expected for type `@value_tests.mysetType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 69; i++) {
			markersToCheck.add(new MarkerToCheck("set value was expected for type `@value_tests.mysetType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `rnd()'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("set value was expected for type `@value_tests.mysetType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 5; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@value_tests.mysetType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `any component.running'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `all component.running'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `any component.alive'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `all component.alive'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `any timer.running'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `component running'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `alive'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `timer read'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `create()'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `activate()'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("set value was expected for type `@value_tests.mysetType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from set value",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Reference to non-existent set field `nonExi' in type `@value_tests.mysetType'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Invalid array element reference: type `@value_tests.mysetType' can not be indexed", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `value_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type `@value_tests.mysetType' can not be indexed",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicated set field `field1'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field1' is already given here",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Field `field3' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field3' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Field `field1' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field3' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too many elements in value list notation for type `@value_tests.myrecordType': 3 was expected instead of 5",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field1' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field3' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field1' is missing from record value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field3' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a non-existent field `field4' in record value for type `@value_tests.myrecordType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicated record field `field1'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field1' is already given here",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field3' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("integer value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Field `field3' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field1' cannot appear after field `field2' in record value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field3' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from record value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field3' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field1' is missing from record value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field3' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field3' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("integer value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("sequence value was expected for type `@value_tests.myrecordType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("sequence value was expected for type `@value_tests.myrecordType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 69; i++) {
			markersToCheck.add(new MarkerToCheck("sequence value was expected for type `@value_tests.myrecordType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@value_tests.myrecordType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("sequence value was expected for type `@value_tests.myrecordType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@value_tests.myrecordType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("sequence value was expected for type `@value_tests.myrecordType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("Reference to non-existent record field `nonExi' in type `@value_tests.myrecordType'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Invalid array element reference: type `@value_tests.myrecordType' can not be indexed", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `value_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type `@value_tests.myrecordType' can not be indexed",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to field `nonExi' of omit value `@value_tests.f_recordValueTests.<statement_block>.statement_120.block.statement_1.def.field3'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Accessing an element with index of omit value `@value_tests.f_recordValueTests.<statement_block>.statement_120.block.statement_1.def.field3'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `value_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type `integer' can not be indexed",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicated record field `field1'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field1' is already given here",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 10;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Union value was expected for type `@value_tests.myunionType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Character string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a non-existent field `field4' in union value for type `@value_tests.myunionType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Only one field was expected in union value instead of 2", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Union value was expected for type `@value_tests.myunionType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Only one field was expected in union value instead of 2",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Union value was expected for type `@value_tests.myunionType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Union value was expected for type `@value_tests.myunionType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 69; i++) {
			markersToCheck.add(new MarkerToCheck("Union value was expected for type `@value_tests.myunionType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `rnd()'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Union value was expected for type `@value_tests.myunionType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 5; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@value_tests.myunionType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `any component.running'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `all component.running'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `any component.alive'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `all component.alive'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `any timer.running'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `component running'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `alive'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `timer read'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `create()'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `activate()'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Union value was expected for type `@value_tests.myunionType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Reference to inactive field `field1' in a value of union type `@value_tests.myunionType'. The active field is `field2'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to non-existent union field `nonExi' in type `@value_tests.myunionType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Invalid array element reference: type `@value_tests.myunionType' can not be indexed", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `value_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type `@value_tests.myunionType' can not be indexed",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 9;
		markersToCheck.add(new MarkerToCheck("Too few elements in the default duration of timer array: 3 was expected instead of 2",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A non-negative float value was expected as timer duration instead of -5",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An array value (with 0 elements) was expected as default duration of timer array",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An array value (with 0 elements) was expected as default duration of timer array",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Integer value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too few elements in the default duration of timer array: 2 was expected instead of 1",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too many elements in the default duration of timer array: 2 was expected instead of 3",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An array value (with 0 elements) was expected as default duration of timer array",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An array value (with 0 elements) was expected as default duration of timer array",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An integer value was expected as lower boundary",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An integer value was expected as upper boundary",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An array value was expected as default duration of timer array",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The lower boundary is greater than the upper boundary",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too few elements in the default duration of timer array: 2 was expected instead of 1",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too many elements in the default duration of timer array: 2 was expected instead of 3",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Value is not real", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("The operand of operation `timer running': Reference to a single timer `TL_temp' cannot have field or array sub-references",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a timer array without array index",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Array index underflow: the index value must be at least 1 instead of 0",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Array index oveflow: the index value must be at most 3 instead of 4",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The first operand of operation `component running' should be a component reference instead of `timer `TL_temp''",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 20;
		markersToCheck.add(new MarkerToCheck("A non-empty value was expected for type `@value_tests.mysetType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from set value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field3' is missing from record value",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Runs on clause mismatch: type `@value_tests.t_function2' expects component type `@value_tests.mycomponent', but function runs on `@value_tests.NonEmpty_CT_1'", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 6;
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too many elements in the array value: 1 was expected instead of 2",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too few elements in the array value: 3 was expected instead of 2",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too many elements in the array value: 1 was expected instead of 2",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too few elements in the array value: 5 was expected instead of 2",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The lower boundary is greater than the upper boundary",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Too few elements in the array value: 3 was expected instead of 2", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("integer value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("float value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("boolean value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("bitstring value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("hexstring value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("octetstring value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 9; i++) {
			markersToCheck.add(new MarkerToCheck("Verdict value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 9; i++) {
			markersToCheck.add(new MarkerToCheck("Enumerated value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("Default value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("Universal character string value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("Component value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 9; i++) {
			markersToCheck.add(new MarkerToCheck("record of value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 9; i++) {
			markersToCheck.add(new MarkerToCheck("set of value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Value list notation cannot be used for set type `@value_tests.mysetType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too many elements in value list notation for type `@value_tests.myrecordType': 3 was expected instead of 5",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate index value `1' for components 2 and 3",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too many elements in the array value: 0 was expected instead of 1",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("A positive integer value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Using a large integer value (999,999,999,999,999) as an array dimension is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A positive integer value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Integer value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too many elements in the array value: 0 was expected instead of 1",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too many elements in the array value: 0 was expected instead of 1",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("An integer value was expected as lower boundary",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An integer value was expected as upper boundary",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too many elements in the array value: 0 was expected instead of 1",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Using a large integer value (999,999,999,999,999) as the lower boundary of an array dimension is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Using a large integer value (999,999,999,999,999) as the upper boundary of an array dimension is not supported",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The lower boundary is greater than the upper boundary",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An integer value was expected as lower boundary",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An integer value was expected as upper boundary",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too many elements in the array value: 0 was expected instead of 1",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("An integer value was expected as lower boundary",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An integer value was expected as upper boundary",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too many elements in the array value: 0 was expected instead of 1",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `integer[1]' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Array index underflow: the index value must be at least 0 instead of -1",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("An integer value was expected as index",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Array index oveflow: the index value must be at most 0 instead of 10",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `integer[1]' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Array index underflow: the index value must be at least 0 instead of -1",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no value assigned to index -1 in the value `@value_tests.f_arrayValueTests.<statement_block>.statement_60.block.statement_1.def'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("An integer value was expected as index",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Array index oveflow: the index value must be at most 0 instead of 10",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no value assigned to index 10 in the value `@value_tests.f_arrayValueTests.<statement_block>.statement_60.block.statement_1.def'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("Type `@value_tests.f_function_type6' has a `runs on self' clause and the current scope does not have a `runs on' clause, but function `@value_tests.f_function6' runs on `@value_tests.NonEmpty_CT_2'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Runs on clause mismatch: type `@value_tests.t_function2' expects component type `@value_tests.mycomponent', but function runs on `@value_tests.NonEmpty_CT_1'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 16;
		for (i = 0; i < 11; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to a function or external function was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to a function or external function was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 69; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to a function or external function was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@value_tests.t_function' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to a function or external function was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@value_tests.t_function' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to a function or external function was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Type `@value_tests.f_function_type1' expects a function or external function without return type, but function `@value_tests.f_function2' returns a value of type `integer'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type `@value_tests.f_function_type1' expects a function or external function without return type, but external function `@value_tests.ef_f_ext_function2' returns a value of type `integer'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type `@value_tests.f_function_type1' expects a function or external function without return type, but function `@value_tests.f_function3' returns a template of type `integer'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type `@value_tests.f_function_type1' expects a function or external function without return type, but external function `@value_tests.ef_f_ext_function3' returns a template of type `integer'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type `@value_tests.f_function_type1' expects a function or external function that returns a template with no restriction, but function `@value_tests.f_function4' returns a template with value restriction",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type `@value_tests.f_function_type1' expects a function or external function without return type, but function `@value_tests.f_function4' returns a template of type `integer'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type `@value_tests.f_function_type1' expects a function or external function that returns a template with no restriction, but external function `@value_tests.ef_f_ext_function4' returns a template with value restriction",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type `@value_tests.f_function_type1' expects a function or external function without return type, but external function `@value_tests.ef_f_ext_function4' returns a template of type `integer'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type `@value_tests.f_function_type2' expects a function or external function that returns a value of type `integer', but function `@value_tests.f_function1' does not have a return type",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type `@value_tests.f_function_type2' expects a function or external function that returns a value of type `integer', but external function `@value_tests.ef_f_ext_function1' does not have a return type",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type `@value_tests.f_function_type2' expects a function or external function that returns a value of type `integer', but function `@value_tests.f_function3' returns a template",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type `@value_tests.f_function_type2' expects a function or external function that returns a value of type `integer', but external function `@value_tests.ef_f_ext_function3' returns a template",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type `@value_tests.f_function_type2' expects a function or external function that returns a template with no restriction, but function `@value_tests.f_function4' returns a template with value restriction",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type `@value_tests.f_function_type2' expects a function or external function that returns a value of type `integer', but function `@value_tests.f_function4' returns a template",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type `@value_tests.f_function_type2' expects a function or external function that returns a template with no restriction, but external function `@value_tests.ef_f_ext_function4' returns a template with value restriction",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type `@value_tests.f_function_type2' expects a function or external function that returns a value of type `integer', but external function `@value_tests.ef_f_ext_function4' returns a template",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type `@value_tests.f_function_type3' expects a function or external function that returns a template of type `integer', but function `@value_tests.f_function1' does not have a return type",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type `@value_tests.f_function_type3' expects a function or external function that returns a template of type `integer', but external function `@value_tests.ef_f_ext_function1' does not have a return type",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type `@value_tests.f_function_type3' expects a function or external function that returns a template of type `integer', but function `@value_tests.f_function2' returns a value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type `@value_tests.f_function_type3' expects a function or external function that returns a template of type `integer', but external function `@value_tests.ef_f_ext_function2' returns a value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type `@value_tests.f_function_type3' expects a function or external function that returns a template with no restriction, but function `@value_tests.f_function4' returns a template with value restriction",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type `@value_tests.f_function_type3' expects a function or external function that returns a template with no restriction, but external function `@value_tests.ef_f_ext_function4' returns a template with value restriction",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type `@value_tests.f_function_type4' expects a function or external function that returns a template of type `integer', but function `@value_tests.f_function1' does not have a return type",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type `@value_tests.f_function_type4' expects a function or external function that returns a template of type `integer', but external function `@value_tests.ef_f_ext_function1' does not have a return type",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type `@value_tests.f_function_type4' expects a function or external function that returns a template of type `integer', but function `@value_tests.f_function2' returns a value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type `@value_tests.f_function_type4' expects a function or external function that returns a template of type `integer', but external function `@value_tests.ef_f_ext_function2' returns a value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type `@value_tests.f_function_type4' expects a function or external function that returns a template with value restriction, but function `@value_tests.f_function3' returns a template with no restriction",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type `@value_tests.f_function_type4' expects a function or external function that returns a template with value restriction, but external function `@value_tests.ef_f_ext_function3' returns a template with no restriction",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Runs on clause mismatch: type `@value_tests.f_function_type6' has a `runs on self' clause and the current scope expects component type `@value_tests.NonEmpty_CT_1', but function `@value_tests.f_function6' runs on `@value_tests.NonEmpty_CT_2'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `@value_tests.t_function' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid array element reference: type `@value_tests.t_function' can not be indexed",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type `@value_tests.t_function' does not have a `runs on' clause, but function runs on `@value_tests.NonEmpty_CT_1'.",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `@value_tests.t_function' does not have fields.",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type `@value_tests.t_function' can not be indexed",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `@value_tests.t_function' does not have fields.",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		for (i = 0; i < 11; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to an altstep was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to an altstep was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 69; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to an altstep was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@value_tests.t_altstep' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to an altstep was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@value_tests.t_altstep' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to an altstep was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Type `@value_tests.t_altstep2' does not have a `runs on' clause, but altstep runs on `@value_tests.mycomponent'.",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `@value_tests.t_altstep' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid array element reference: type `@value_tests.t_altstep' can not be indexed",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `@value_tests.t_altstep' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid array element reference: type `@value_tests.t_altstep' can not be indexed",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		for (i = 0; i < 11; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to a testcase was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to a testcase was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 69; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to a testcase was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@value_tests.t_testcase' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to a testcase was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@value_tests.t_testcase' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Reference to a testcase was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `@value_tests.t_testcase' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid array element reference: type `@value_tests.t_testcase' can not be indexed",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `@value_tests.t_testcase' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid array element reference: type `@value_tests.t_testcase' can not be indexed",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 7;
		for (i = 0; i < 11; i++) {
			markersToCheck.add(new MarkerToCheck("NULL value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Incompatible value: `NULL' was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("NULL value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("NULL value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 59; i++) {
			markersToCheck.add(new MarkerToCheck("NULL value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `NULL' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("NULL value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `NULL' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("NULL value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("NULL value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 7;
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 18;
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("bitstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 67; i++) {
			markersToCheck.add(new MarkerToCheck("bitstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `bitstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("bitstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `bitstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("bitstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `bitstring' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A non-negative integer value was expected instead of -1 for indexing a string element",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate definition with name `cl_i2' was first declared here",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate definition with name `cl_i2' was declared here again",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An integer value was expected as index",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate definition with name `cl_i3' was first declared here",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate definition with name `cl_i3' was declared here again",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Index overflow when accessing a string element: the index is 10, but the string has only 2 elements",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 23;
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("BMP string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("BMP string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 58; i++) {
			markersToCheck.add(new MarkerToCheck("BMP string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `BMPString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("BMP string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `BMPString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("BMP string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `BMPString' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Index overflow when accessing a string element: the index is 1, but the string has only 0 elements",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An integer value was expected as index",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 21;
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("General string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("General string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 58; i++) {
			markersToCheck.add(new MarkerToCheck("General string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `GeneralString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("General string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `GeneralString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("General string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `GeneralString' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Index overflow when accessing a string element: the index is 1, but the string has only 0 elements",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An integer value was expected as index",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 21;
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Graphicl string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Graphicl string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 58; i++) {
			markersToCheck.add(new MarkerToCheck("Graphicl string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `GraphicString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Graphicl string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `GraphicString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Graphicl string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `GraphicString' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Index overflow when accessing a string element: the index is 1, but the string has only 0 elements",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An integer value was expected as index",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 21;
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 58; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `IA5String' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `IA5String' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `IA5String' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Index overflow when accessing a string element: the index is 1, but the string has only 0 elements",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An integer value was expected as index",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 21;
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 58; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `NumericString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `NumericString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `NumericString' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Index overflow when accessing a string element: the index is 1, but the string has only 0 elements",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An integer value was expected as index",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 23;
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("octetstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 65; i++) {
			markersToCheck.add(new MarkerToCheck("octetstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `octetstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("octetstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `octetstring' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("octetstring value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `octetstring' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Index overflow when accessing a string element: the index is 1, but the string has only 1 elements",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An integer value was expected as index",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 21;
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 58; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `VisibleString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `VisibleString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `VisibleString' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Index overflow when accessing a string element: the index is 1, but the string has only 0 elements",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An integer value was expected as index",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 21;
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Teletex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Teletex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 58; i++) {
			markersToCheck.add(new MarkerToCheck("Teletex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `TeletexString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Teletex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `TeletexString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Teletex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `TeletexString' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Index overflow when accessing a string element: the index is 1, but the string has only 0 elements",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An integer value was expected as index",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 21;
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 58; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `PrintableString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `PrintableString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `PrintableString' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Index overflow when accessing a string element: the index is 1, but the string has only 0 elements",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An integer value was expected as index",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 21;
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Teletex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Teletex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 58; i++) {
			markersToCheck.add(new MarkerToCheck("Teletex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `TeletexString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Teletex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `TeletexString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Teletex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `TeletexString' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Index overflow when accessing a string element: the index is 1, but the string has only 0 elements",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An integer value was expected as index",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 21;
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Universal string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Universal string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 58; i++) {
			markersToCheck.add(new MarkerToCheck("Universal string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `UniversalString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Universal string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `UniversalString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Universal string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `UniversalString' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Index overflow when accessing a string element: the index is 1, but the string has only 0 elements",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An integer value was expected as index",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 21;
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("UTF8 string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("UTF8 string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 58; i++) {
			markersToCheck.add(new MarkerToCheck("UTF8 string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `UTF8String' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("UTF8 string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `UTF8String' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("UTF8 string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `UTF8String' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Index overflow when accessing a string element: the index is 1, but the string has only 0 elements",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An integer value was expected as index",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 21;
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Videotex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Videotex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 58; i++) {
			markersToCheck.add(new MarkerToCheck("Videotex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `VideotexString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Videotex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `VideotexString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Videotex string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `VideotexString' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Index overflow when accessing a string element: the index is 1, but the string has only 0 elements",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An integer value was expected as index",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 21;
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 58; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `VisibleString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `VisibleString' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `VisibleString' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Index overflow when accessing a string element: the index is 1, but the string has only 0 elements",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An integer value was expected as index",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 21;
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 58; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `GeneralizedTime' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `GeneralizedTime' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `GeneralizedTime' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Index overflow when accessing a string element: the index is 1, but the string has only 0 elements",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An integer value was expected as index",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 21;
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 58; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `UTCTime' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `UTCTime' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Character string value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `UTCTime' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Index overflow when accessing a string element: the index is 1, but the string has only 0 elements",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An integer value was expected as index",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 21;
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Objectdescriptor value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Objectdescriptor value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 58; i++) {
			markersToCheck.add(new MarkerToCheck("Objectdescriptor value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `ObjectDescriptor' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Objectdescriptor value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 13; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `ObjectDescriptor' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Objectdescriptor value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `ObjectDescriptor' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Index overflow when accessing a string element: the index is 1, but the string has only 0 elements",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An integer value was expected as index",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 8;
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from set value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("A non-empty value was expected for type `@ASNTypes.ASNSetType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field1' is missing from set value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("General string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field1' is missing from set value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from set value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a non-existent field `field3' in set value for type `@ASNTypes.ASNSetType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicated set field `field1'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field1' is already given here",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from set value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("INTEGER value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Value list notation cannot be used for set type `@ASNTypes.ASNSetType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("General string value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("INTEGER value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("set value was expected for type `@ASNTypes.ASNSetType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("set value was expected for type `@ASNTypes.ASNSetType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 69; i++) {
			markersToCheck.add(new MarkerToCheck("set value was expected for type `@ASNTypes.ASNSetType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@ASNTypes.ASNSetType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("set value was expected for type `@ASNTypes.ASNSetType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@ASNTypes.ASNSetType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("set value was expected for type `@ASNTypes.ASNSetType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from set value",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Reference to non-existent set field `nonExi' in type `@ASNTypes.ASNSetType'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Invalid array element reference: type `@ASNTypes.ASNSetType' can not be indexed", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `value_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type `@ASNTypes.ASNSetType' can not be indexed",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 8;
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Field `field1' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too many elements in value list notation for type `@ASNTypes.ASNSequenceType': 2 was expected instead of 5",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field1' is missing from record value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("General string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field1' is missing from record value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a non-existent field `field4' in record value for type `@ASNTypes.ASNSequenceType'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicated record field `field1'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field1' is already given here",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("INTEGER value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Field `field1' cannot appear after field `field2' in record value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from record value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("General string value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Too many elements in value list notation for type `@ASNTypes.ASNSequenceType': 2 was expected instead of 3",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field1' is missing from record value",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("General string value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("INTEGER value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("SEQUENCE value was expected for type `@ASNTypes.ASNSequenceType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("SEQUENCE value was expected for type `@ASNTypes.ASNSequenceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 69; i++) {
			markersToCheck.add(new MarkerToCheck("SEQUENCE value was expected for type `@ASNTypes.ASNSequenceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@ASNTypes.ASNSequenceType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("SEQUENCE value was expected for type `@ASNTypes.ASNSequenceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@ASNTypes.ASNSequenceType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("SEQUENCE value was expected for type `@ASNTypes.ASNSequenceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("Reference to non-existent record field `nonExi' in type `@ASNTypes.ASNSequenceType'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Invalid array element reference: type `@ASNTypes.ASNSequenceType' can not be indexed", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `value_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type `@ASNTypes.ASNSequenceType' can not be indexed",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 10;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Union value was expected for type `@ASNTypes.ASNChoiceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("General string value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a non-existent field `field4' in union value for type `@ASNTypes.ASNChoiceType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Only one field was expected in union value instead of 2", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Union value was expected for type `@ASNTypes.ASNChoiceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("Only one field was expected in union value instead of 2",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Union value was expected for type `@ASNTypes.ASNChoiceType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Union value was expected for type `@ASNTypes.ASNChoiceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 69; i++) {
			markersToCheck.add(new MarkerToCheck("Union value was expected for type `@ASNTypes.ASNChoiceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@ASNTypes.ASNChoiceType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Union value was expected for type `@ASNTypes.ASNChoiceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@ASNTypes.ASNChoiceType' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Union value was expected for type `@ASNTypes.ASNChoiceType'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Reference to inactive field `field1' in a value of union type `@ASNTypes.ASNChoiceType'. The active field is `field2'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to non-existent union field `nonExi' in type `@ASNTypes.ASNChoiceType'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Invalid array element reference: type `@ASNTypes.ASNChoiceType' can not be indexed", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `value_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type `@ASNTypes.ASNChoiceType' can not be indexed",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 7;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += -1;
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("INTEGER value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("record of value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("record of value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 69; i++) {
			markersToCheck.add(new MarkerToCheck("record of value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@ASNTypes.ASNSequenceOf' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("record of value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@ASNTypes.ASNSequenceOf' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("record of value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("A integer value less than `2,147,483,647' was expected for indexing type `@ASNTypes.ASNSequenceOf' instead of `99,999,999,999,999,999'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A non-negative integer value was expected for indexing type `@ASNTypes.ASNSequenceOf' instead of `-1'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate index value `1' for components 3 and 4",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a value was expected instead of timer `TL_t'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("It's not allowed to create hole(s) in constant values",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Reference to a value was expected instead of timer `TL_t'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A non-negative integer value was expected instead of -1 for indexing a value of `record of' type `@ASNTypes.ASNSequenceOf'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no value assigned to index 999,999,999,999,999,999 in the value `@value_tests.f_ASNSequenceofValueTests.<statement_block>.statement_113.block.statement_1.def'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no value assigned to index 3 in the value `@value_tests.f_ASNSequenceofValueTests.<statement_block>.statement_113.block.statement_1.def'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `@ASNTypes.ASNSequenceOf' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("An integer value was expected as index",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Index overflow in a value of `record of' type `@ASNTypes.ASNSequenceOf': the index is 999,999,999,999,999, but the value has only 1 elements",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `integer' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("Invalid array element reference: type `integer' can not be indexed", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `value_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type `integer' can not be indexed",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 7;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += -1;
		for (i = 0; i < 8; i++) {
			markersToCheck.add(new MarkerToCheck("INTEGER value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("set of value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("set of value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 69; i++) {
			markersToCheck.add(new MarkerToCheck("set of value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `rnd()'", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("set of value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 5; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `@ASNTypes.ASNSetOf' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `any component.running'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `all component.running'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `any component.alive'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `all component.alive'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `any timer.running'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `component running'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `alive'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `timer read'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `create()'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("An evaluatable constant value was expected instead of operation `activate()'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("set of value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("A integer value less than `2,147,483,647' was expected for indexing type `@ASNTypes.ASNSetOf' instead of `99,999,999,999,999,999'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A non-negative integer value was expected for indexing type `@ASNTypes.ASNSetOf' instead of `-1'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Duplicate index value `1' for components 3 and 4",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Reference to a value was expected instead of timer `TL_t'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("It's not allowed to create hole(s) in constant values",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Reference to a value was expected instead of timer `TL_t'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A non-negative integer value was expected instead of -1 for indexing a value of `set of' type `@ASNTypes.ASNSetOf'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no value assigned to index 999,999,999,999,999,999 in the value `@value_tests.f_ASNSetofValueTests.<statement_block>.statement_113.block.statement_1.def'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no value assigned to index 3 in the value `@value_tests.f_ASNSetofValueTests.<statement_block>.statement_113.block.statement_1.def'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `@ASNTypes.ASNSetOf' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("A non-negative integer value was expected instead of -1 for indexing a value of `set of' type `@ASNTypes.ASNSetOf'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("An integer value was expected as index",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Index overflow in a value of `set of' type `@ASNTypes.ASNSetOf': the index is 10, but the value has only 1 elements",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Index overflow in a value of `set of' type `@ASNTypes.ASNSetOf': the index is 999,999,999,999,999,999, but the value has only 1 elements",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("The default timer duration should be a float value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 73;
		markersToCheck.add(new MarkerToCheck("The value of second OBJECT IDENTIFIER component must be between 0 and 39 instead of 39",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 10;
		markersToCheck.add(new MarkerToCheck("Reference to a value was expected instead of timer `TL_t'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("The value of first OBJECT IDENTIFIER component must be between 0 and 2 instead of 3",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("The value of second OBJECT IDENTIFIER component must be between 0 and 39 instead of 39", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("objid value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `xx4' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("objid value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `i' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 69; i++) {
			markersToCheck.add(new MarkerToCheck("objid value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `objid' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 4; i++) {
			markersToCheck.add(new MarkerToCheck("objid value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		for (i = 0; i < 14; i++) {
			markersToCheck.add(new MarkerToCheck("Incompatible value: `objid' was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `temp_altstep_pointer' in module `value_tests'",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 6; i++) {
			markersToCheck.add(new MarkerToCheck("objid value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("Invalid field reference `field1': type `objid' does not have fields.",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid field reference `nonExi': type `objid' does not have fields.",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("Invalid array element reference: type `objid' can not be indexed", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("There is no visible definition with name `nonExi' in module `value_tests'",  --lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type `objid' can not be indexed",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Invalid reference: internal parameterisation is not supported",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("INTEGER or OBJECT IDENTIFIER value was expected for the first component",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("INTEGER or RELATIVE-OID value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 33;
		markersToCheck.add(new MarkerToCheck("The kind of the 0th parameter is not the same: value parameter was expected instead of `out' value parameter",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("1 formal parameters was expected instead of 2",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The kind of the 0th parameter is not the same: `inout' value parameter was expected instead of value parameter",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The kind of the 1th parameter is not the same: value parameter was expected instead of `out' value parameter",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("The kind of the 1th parameter is not the same: value parameter was expected instead of `inout' value parameter",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("2 formal parameters was expected instead of 1",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The kind of the 0th parameter is not the same: value parameter was expected instead of `out' template parameter",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("The kind of the 0th parameter is not the same: value parameter was expected instead of `out' template parameter",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("1 formal parameters was expected instead of 2",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The kind of the 0th parameter is not the same: `inout' value parameter was expected instead of template parameter",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The kind of the 0th parameter is not the same: value parameter was expected instead of template parameter",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The kind of the 1th parameter is not the same: value parameter was expected instead of `out' template parameter",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The kind of the 0th parameter is not the same: value parameter was expected instead of template parameter",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The kind of the 1th parameter is not the same: value parameter was expected instead of template parameter",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The kind of the 0th parameter is not the same: value parameter was expected instead of template parameter",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The kind of the 1th parameter is not the same: value parameter was expected instead of `inout' template parameter",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The kind of the 0th parameter is not the same: value parameter was expected instead of template parameter",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The kind of the 1th parameter is not the same: value parameter was expected instead of template parameter",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("2 formal parameters was expected instead of 1",  ++lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("The kind of the 0th parameter is not the same: value parameter was expected instead of `out' template parameter",  lineNum, IMarker.SEVERITY_ERROR));

		return markersToCheck;
	}

	private ArrayList<MarkerToCheck> value_tests2_ttcn_initializer() {
		//value_tests2.ttcn
		ArrayList<MarkerToCheck> markersToCheck = new ArrayList<MarkerToCheck>(44);
		int lineNum = 5;
		markersToCheck.add(new MarkerToCheck("INTEGER value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		int i = 0;
		for (i = 0; i < 5; i++) {
			markersToCheck.add(new MarkerToCheck("INTEGER value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		lineNum += 1;
		for (i = 0; i < 2; i++) {
			markersToCheck.add(new MarkerToCheck("INTEGER value was expected", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("INTEGER value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 10;
		markersToCheck.add(new MarkerToCheck("Reference to a value was expected instead of template `@value_tests2.t_f'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: a value of type `integer' was expected instead of `float'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("The lower boundary cannot be infinity",  lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("The upper boundary cannot be -infinity", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The lower boundary is higher than the upper boundary",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 7;
		markersToCheck.add(new MarkerToCheck("Reference to a value was expected instead of template `@value_tests2.t_f'",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("Type mismatch: a value of type `integer' was expected instead of `float'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 2;
		markersToCheck.add(new MarkerToCheck("The lower boundary cannot be infinity",  lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 3; i++) {
			markersToCheck.add(new MarkerToCheck("The upper boundary cannot be -infinity", lineNum++, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("The lower boundary is higher than the upper boundary",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 6;
		markersToCheck.add(new MarkerToCheck("INTEGER value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("INTEGER value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("INTEGER value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("integer value was expected",  lineNum, IMarker.SEVERITY_ERROR));
		markersToCheck.add(new MarkerToCheck("`omit' value is not allowed in this context",  ++lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 1;
		for (i = 0; i < 7; i++) {
			markersToCheck.add(new MarkerToCheck("integer value was expected", lineNum, IMarker.SEVERITY_ERROR));
		}
		markersToCheck.add(new MarkerToCheck("integer value was expected",  ++lineNum, IMarker.SEVERITY_ERROR));

		return markersToCheck;
	}

	private ArrayList<MarkerToCheck> ttcnpp_marker_test_with_syntax_errors_ttcnpp_initializer() {
		//ttcnpp_marker_test_with_syntax_errors.ttcnpp
		// !! Only syntax errors !!
		ArrayList<MarkerToCheck> markersToCheck = new ArrayList<MarkerToCheck>();
		int lineNum = 22;
		markersToCheck.add(new MarkerToCheck(" this test is ready -already",  lineNum, IMarker.SEVERITY_WARNING));
		lineNum += 4;
		//semantic: markersToCheck.add(new MarkerToCheck(" this is a wrong line  that will be signed by a marker",  lineNum, IMarker.SEVERITY_WARNING)); //26
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("Preprocessor directive #line is ignored",  lineNum, IMarker.SEVERITY_WARNING));
		markersToCheck.add(new MarkerToCheck("Preprocessor directive #pragma is ignored",  ++lineNum, IMarker.SEVERITY_WARNING));
		lineNum += 23;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		//semantic: markersToCheck.add(new MarkerToCheck("Invalid integer value: For input string: \"214748364888888888888\"",  lineNum, IMarker.SEVERITY_ERROR));//64
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'xxx;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 7;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'x1;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 11;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'x2;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 12;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'xxx;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'xxxx;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 7;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'xxxy;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'xxxz;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("Preprocessor directive #line is ignored",  lineNum, IMarker.SEVERITY_WARNING));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("Preprocessor directive #line is ignored",  lineNum, IMarker.SEVERITY_WARNING));
		lineNum += 23;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 24;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 6;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 13;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 6;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 7;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 9;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 9;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 7;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 7;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 7;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 7;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 6;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 8;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 3;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 17;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 6;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 20;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 6;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 15;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 11;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 6;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 19;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 6;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 9;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 19;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 13;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 6;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 8;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 10;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 9;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 5;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 12;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 10;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 15;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 14;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 11;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 11;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 8;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 4;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 6;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 12;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 6;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 11;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 35;
		markersToCheck.add(new MarkerToCheck("no viable alternative at input 'error_marker_expected;'",  lineNum, IMarker.SEVERITY_ERROR));

		return markersToCheck;
	}


	private ArrayList<MarkerToCheck> ttcnpp_marker_test_with_syntax_errors_ttcnpp_initializer_semantic() {
		//ttcnpp_marker_test_with_syntax_errors.ttcnpp
		ArrayList<MarkerToCheck> markersToCheck = new ArrayList<MarkerToCheck>(2);
		int lineNum = 26;
		markersToCheck.add(new MarkerToCheck(" this is a wrong line  that will be signed by a marker",  lineNum, IMarker.SEVERITY_WARNING));
		lineNum = 64;
		markersToCheck.add(new MarkerToCheck("Invalid integer value: For input string: \"214748364888888888888\"",  lineNum, IMarker.SEVERITY_WARNING));		

		return markersToCheck;
	}

	//assignment_ttcn

	private ArrayList<MarkerToCheck> assignment_ttcn_initializer() {
		//assignment.ttcn
		ArrayList<MarkerToCheck> markersToCheck = new ArrayList<MarkerToCheck>(2);
		int lineNum = 381;
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));
		lineNum += 29;
		markersToCheck.add(new MarkerToCheck("Field `field2' is missing from record value",  lineNum, IMarker.SEVERITY_ERROR));

		return markersToCheck;
	}
	
}
